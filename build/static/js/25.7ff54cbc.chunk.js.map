{"version":3,"sources":["views/Predictions/components/History/Header.tsx","state/predictions/hooks.ts","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollPredictions.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/History/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/helpers.ts","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/components/RoundResult/RoundResultHistory.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/RoundProgress.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","views/Predictions/hooks/useCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/hooks/useOnViewChange.ts","views/Predictions/Positions.tsx","views/Predictions/types.ts","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/Mobile.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx"],"names":["HistoryTabs","useGetRounds","rounds","useSelector","state","predictions","Object","keys","reduce","accum","epoch","parseBigNumberObj","useGetSortedRounds","roundData","orderBy","values","useGetBetByEpoch","account","bets","ledgers","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalSeconds","intervalSeconds","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetBufferSeconds","bufferSeconds","useGetIsFetchingHistory","isFetchingHistory","useGetHistoryByAccount","history","useGetLastOraclePrice","lastOraclePrice","useMemo","ethers","BigNumber","from","useGetCurrentRoundLockTimestamp","currentRound","useGetCurrentRound","lockTimestamp","startTimestamp","useGetLatestOraclePrice","useState","price","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","useEffect","a","contract","getChainlinkOracleContract","latestAnswer","response","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollPredictions","useRef","useWeb3React","earliestEpoch","earliestRound","minBy","current","PredictionStatus","INITIAL","liveCurrentAndRecent","fetchRounds","fetchMarketData","epochRange","range","fetchLedgerData","epochs","fetchClaimableStatuses","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","predictionStatus","isCancelled","getBetHistory","user","toLowerCase","claimed","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","rewardRate","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getNetPayout","payout","Modal","ModalContainer","CollectRoundWinningsModal","betAmount","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","callWithGasPrice","useCallWithGasPrice","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","payoutAsFloat","parseFloat","betAmountAsFloat","handleClick","tx","wait","receipt","transactionHash","href","getBscScanLink","console","error","data","message","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","toFixed","fontSize","times","toFormat","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","handleReclaim","formatUsdv2","formatBigNumberToFixed","formatBnbv2","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","minutesSeconds","getHasRoundFailed","buffer","closeTimestampMs","closeTimestamp","now","Date","oracleCalled","getMultiplierv2","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getNetPayoutv2","ledger","rewardAmount","amountFixed","formatBigNumber","mulUnsafe","getPayoutv2","subUnsafe","getPriceDifference","lockPrice","sub","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","getPrizePoolAmountHistory","PrizePoolHistoryRow","LockPriceHistoryRow","RoundResult","hasFailed","closePrice","HOUSE","gt","getBetPosition","isPositionUp","priceDifference","my","failed","useIsRefundable","isRefundable","setIsRefundable","getPredictionsContract","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","Divider","hr","BetResult","result","canClaim","useTooltip","fee","placement","targetRef","tooltip","tooltipVisible","isWinner","Result","WIN","REWARD_RATE","returned","getHeaderColor","LOSE","CANCELED","handleSuccess","markBetHistoryAsCollected","betId","getHeaderText","getHeaderIcon","claimedHash","getResultColor","toNumber","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","RoundResultHistory","lockBlock","external","closeBlock","StyledBet","attrs","YourResult","HistoricalBet","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","role","scale","Filter","label","StyledHeader","bubblegum","ButtonMenuContainer","getClaimParam","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","backgroundDisabled","initialPnlSummary","bestRound","PnlTab","getPnlSummary","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","roundId","StyledHistory","BetWrapper","SpinnerWrapper","History","results","getUnclaimedWinningBets","activeTabComponent","PNL","ConnectWalletButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","EnteredTag","whiteSpace","fontWeight","outline","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","HEADER_HEIGHT","getBorderBackground","gradientStopPoint","cardHeader","warning","getTextColorByStatus","StyledCardHeader","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","claimableStatuses","useGetIsClaimable","CanceledRoundCard","borderBackground","CalculatingCard","hasEnteredUp","hasEnteredDown","StyledExpiredRoundCard","Card","ExpiredRoundCard","hasClaimedUp","hasClaimedDown","formattedPayout","toUnsafeFloat","hasRoundFailed","RoundProgress","startMs","endMs","rawProgress","progress","primaryStep","LiveRoundCard","isBull","priceColor","priceAsNumber","useCountUp","start","end","duration","decimals","countUp","update","updateRef","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","dust","parseUnits","percentShortcuts","getValueAsEthersBn","valueAsFloat","Number","isNaN","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","percent","setPercent","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","bnbBalanceAsBn","maxBalance","balanceDisplay","valueAsBn","showFieldWarning","handlePercentChange","sliderPercent","maxValueAsFn","hundredAsFn","sliderPercentAsFn","balancePercentage","formatFixedNumber","minBetAmountBalance","lte","key","lt","getButtonProps","handleEnterPosition","betMethod","inputAmount","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","inputAsBn","inputAsFn","percentageAsFloat","isWarning","inputProps","name","min","max","onValueChanged","valueLabel","step","percentShortcut","OpenRoundCard","isSettingPosition","setState","isBufferPhase","ROUND_BUFFER","positionDisplay","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","getNow","Math","floor","useCountdown","timestamp","secondsRemaining","setSecondsRemaining","isPaused","setIsPaused","isWindowVisible","useIsWindowVisible","pause","useCallback","unpause","setTimeout","prevSecondsRemaining","clearTimeout","SoonRoundCard","countdown","RoundCard","formattedBullMultiplier","isZero","formattedBearMultiplier","Token","lg","Title","Text","Price","Interval","Label","shadows","level1","dir","radii","PricePairLabel","display","TimerLabel","unit","currentRoundLockTimestamp","pr","StyledPrevNextNav","default","Icon","PrevNextNav","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","usePreviousValue","useOnViewChange","liveSwiperIndex","view","prevView","usePrevious","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","previousRound","find","swiperIndex","indexOf","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","CHART_LOCAL_STORAGE_KEY","Ul","ul","ChartDisclaimer","usePersistState","localStorageKey","doNotShow","setDoNowShow","Predictions","isDesktop","useMatchBreakpoints","hasAcceptedRisk","setHasAcceptedRisk","initialBlock","useInitialBlock","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","JSON","parse","localStorage","getItem","initializePredictions","PageLoader"],"mappings":"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","file":"static/js/25.7ff54cbc.chunk.js","sourcesContent":["import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Radio,\n  Flex,\n  Heading,\n  Text,\n  ButtonMenu,\n  ButtonMenuItem,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\nconst getClaimParam = (historyFilter: HistoryFilter) => {\n  switch (historyFilter) {\n    case HistoryFilter.COLLECTED:\n      return true\n    case HistoryFilter.UNCOLLECTED:\n      return false\n    case HistoryFilter.ALL:\n    default:\n      return undefined\n  }\n}\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Collected')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\nimport { parseBigNumberObj } from './helpers'\n\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalSeconds = () => {\n  return useSelector((state: State) => state.predictions.intervalSeconds)\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetRounds()\n  return rounds[currentEpoch]\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetBufferSeconds = () => {\n  return useSelector((state: State) => state.predictions.bufferSeconds)\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets ? bets[account] : []\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */\nexport const useGetCurrentRoundLockTimestamp = () => {\n  const currentRound = useGetCurrentRound()\n  const intervalSeconds = useGetIntervalSeconds()\n\n  if (!currentRound.lockTimestamp) {\n    return currentRound.startTimestamp + intervalSeconds\n  }\n\n  return currentRound.lockTimestamp\n}\n","import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getChainlinkOracleContract } from 'utils/contractHelpers'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(ethers.BigNumber.from(0))\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const contract = getChainlinkOracleContract()\n      const response = await contract.latestAnswer()\n      setPrice(response)\n    }\n\n    fetchPrice()\n  }, [lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 10) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n","import { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/predictions/hooks'\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { range } from 'lodash'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollPredictions = () => {\n  const timer = useRef<NodeJS.Timeout>(null)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const earliestEpoch = useGetEarliestEpoch()\n  const status = useGetPredictionsStatus()\n\n  useEffect(() => {\n    // Clear old timer\n    if (timer.current) {\n      clearInterval(timer.current)\n    }\n\n    if (status !== PredictionStatus.INITIAL) {\n      timer.current = setInterval(async () => {\n        const liveCurrentAndRecent = [currentEpoch, currentEpoch - 1, currentEpoch - 2]\n\n        dispatch(fetchRounds(liveCurrentAndRecent))\n        dispatch(fetchMarketData())\n\n        if (account) {\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\n        }\n      }, POLL_TIME_IN_SECONDS * 1000)\n    }\n\n    return () => {\n      if (timer.current) {\n        clearInterval(timer.current)\n      }\n    }\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\n}\n\nexport default usePollPredictions\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {t('Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c',\n  })\n}\n\nconst TradingView = () => {\n  const { currentLanguage } = useTranslation()\n  const theme = useTheme()\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme, currentLanguage.code)\n      })\n    }\n  }, [theme, currentLanguage])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id=\"tradingview_b239c\" />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import { Bet, BetPosition } from 'state/types'\nimport { formatNumber } from 'utils/formatBalance'\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier * rewardRate\n}\n\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const payout = getPayout(bet, rewardRate)\n  return payout - bet.amount\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  LinkExternal,\n  ModalCloseButton,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBscScanLink } from 'utils'\nimport { useAppDispatch } from 'state'\nimport { usePriceBnbBusd } from 'state/farms/hooks'\nimport { fetchClaimableStatuses } from 'state/predictions'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  payout: string\n  betAmount: string\n  epoch: number\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\n  payout,\n  betAmount,\n  epoch,\n  onDismiss,\n  onSuccess,\n}) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = usePriceBnbBusd()\n  const dispatch = useAppDispatch()\n\n  // Convert payout to number for compatibility\n  const payoutAsFloat = parseFloat(payout)\n  const betAmountAsFloat = parseFloat(betAmount)\n\n  const handleClick = async () => {\n    try {\n      const tx = await callWithGasPrice(predictionsContract, 'claim', [[epoch]])\n      setIsPendingTx(true)\n      const receipt = await tx.wait()\n\n      if (onSuccess) {\n        await onSuccess()\n      }\n\n      await dispatch(fetchClaimableStatuses({ account, epochs: [epoch] }))\n      onDismiss()\n      setIsPendingTx(false)\n      toastSuccess(\n        t('Winnings collected!'),\n        <Box>\n          <Text as=\"p\" mb=\"8px\">\n            {t('Your prizes have been sent to your wallet')}\n          </Text>\n          {receipt.transactionHash && (\n            <LinkExternal href={getBscScanLink(receipt.transactionHash, 'transaction')}>\n              {t('View on BscScan')}\n            </LinkExternal>\n          )}\n        </Box>,\n      )\n    } catch (error) {\n      console.error('Unable to claim winnings', error)\n      toastError(\n        t('Error'),\n        error?.data?.message || t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n      )\n    } finally {\n      setIsPendingTx(false)\n    }\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Your position')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${betAmountAsFloat.toFixed(4)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${bnbBusdPrice.times(betAmountAsFloat).toFormat(2)}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\n          <Text>{t('Your winnings')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${payout} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${bnbBusdPrice.times(payoutAsFloat).toFormat(2)}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  payout: string\n  betAmount: string\n  epoch: number\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\n  payout,\n  betAmount,\n  epoch,\n  hasClaimed,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  const [onPresentCollectWinningsModal] = useModal(\n    <CollectRoundWinningsModal payout={payout} betAmount={betAmount} epoch={epoch} onSuccess={onSuccess} />,\n    false,\n  )\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const predictionsContract = usePredictionsContract()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = async () => {\n    const tx = await callWithGasPrice(predictionsContract, 'claim', [[epoch]])\n    setIsPendingTx(true)\n\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      if (onSuccess) {\n        await onSuccess()\n      }\n      setIsPendingTx(false)\n      toastSuccess(t('Position reclaimed!'))\n    } else {\n      setIsPendingTx(false)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import { ethers } from 'ethers'\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\nimport { formatBigNumber, formatBigNumberToFixed } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const formatUsdv2 = (usd: ethers.BigNumber) => {\n  return `$${formatBigNumberToFixed(usd, 3, 8)}`\n}\n\nexport const formatBnbv2 = (bnb: ethers.BigNumber) => {\n  const value = bnb || ethers.BigNumber.from(0)\n  return formatBigNumberToFixed(value, 4)\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getHasRoundFailed = (round: NodeRound, buffer: number) => {\n  const closeTimestampMs = (round.closeTimestamp + buffer) * 1000\n  const now = Date.now()\n\n  if (closeTimestampMs !== null && now > closeTimestampMs && !round.oracleCalled) {\n    return true\n  }\n\n  return false\n}\n\nexport const getMultiplierv2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\n  if (!total) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  if (total.eq(0) || amount.eq(0)) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\n\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\n}\n\nexport const getPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\n  if (!ledger || !round) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const { bullAmount, bearAmount, rewardAmount } = round\n  const { amount, position } = ledger\n\n  const amountFixed = ethers.FixedNumber.from(formatBigNumber(amount))\n  const multiplier = getMultiplierv2(rewardAmount, position === BetPosition.BULL ? bullAmount : bearAmount)\n  return amountFixed.mulUnsafe(multiplier)\n}\n\nexport const getNetPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\n  if (!ledger || !round) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const payout = getPayoutv2(ledger, round)\n  const amount = ethers.FixedNumber.from(formatBigNumber(ledger.amount))\n\n  return payout.subUnsafe(amount)\n}\n\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\n  if (!price || !lockPrice) {\n    return ethers.BigNumber.from(0)\n  }\n\n  return price.sub(lockPrice)\n}\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, NodeRound, Round } from 'state/types'\nimport { formatUsdv2, formatBnbv2 } from '../../helpers'\nimport { formatBnb, formatUsd } from '../History/helpers'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: NodeRound['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnbv2(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: NodeRound['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsdv2(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  if (betPosition === BetPosition.BULL) {\n    return theme.colors.success\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return theme.colors.failure\n  }\n\n  return theme.colors.cardBorder\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n\n/**\n * TODO: Remove\n *\n * This is a temporary function until we consolidate the data coming from the graph versus the node\n */\ninterface PrizePoolHistoryRowProps extends FlexProps {\n  totalAmount: number\n}\n\nconst getPrizePoolAmountHistory = (totalAmount: PrizePoolHistoryRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nexport const PrizePoolHistoryRow: React.FC<PrizePoolHistoryRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmountHistory(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\ninterface LockPriceHistoryRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceHistoryRow: React.FC<LockPriceHistoryRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n/**\n * END TEMPORARY COMPONENTS\n */\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport { BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: NodeRound\n  hasFailed?: boolean\n}\n\nconst getBetPosition = (closePrice: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\n  if (!closePrice) {\n    return null\n  }\n\n  if (closePrice.eq(lockPrice)) {\n    return BetPosition.HOUSE\n  }\n\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, hasFailed = false, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = getBetPosition(closePrice, lockPrice)\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = getPriceDifference(closePrice, lockPrice)\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {hasFailed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {closePrice ? (\n            <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n              {formatUsdv2(closePrice)}\n            </Text>\n          ) : (\n            <Skeleton height=\"34px\" my=\"1px\" />\n          )}\n          <PositionTag betPosition={betPosition}>{formatUsdv2(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../History/helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceHistoryRow, PrizePoolHistoryRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceHistoryRow lockPrice={lockPrice} />}\n      <PrizePoolHistoryRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getPredictionsContract } from 'utils/contractHelpers'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const predictionsContract = getPredictionsContract()\n      const refundable = await predictionsContract.refundable(epoch, account)\n\n      if (refundable) {\n        // Double check they have not already claimed\n        const ledger = await predictionsContract.ledger(epoch, account)\n        setIsRefundable(ledger.claimed === false)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceBnbBusd } from 'state/farms/hooks'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\nimport { Result } from 'state/predictions/helpers'\nimport { getBscScanLink } from 'utils'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst Divider = styled.hr`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const bnbBusdPrice = usePriceBnbBusd()\n  const canClaim = !bet.claimed && bet.position === bet.round.position\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <Text as=\"p\">{t('Includes your original position and your winnings, minus the %fee% fee.', { fee: '3%' })}</Text>,\n    { placement: 'auto' },\n  )\n\n  const isWinner = result === Result.WIN\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = isWinner ? getNetPayout(bet, REWARD_RATE) : bet.amount\n  const returned = payout + bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton\n            payout={formatBnb(payout)}\n            betAmount={bet.amount.toString()}\n            epoch={bet.round.epoch}\n            hasClaimed={!canClaim}\n            width=\"100%\"\n            mb=\"16px\"\n            onSuccess={handleSuccess}\n          >\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {bet.claimed && (\n          <Flex justifyContent=\"center\">\n            <LinkExternal href={getBscScanLink(bet.claimedHash, 'transaction')} mb=\"16px\">\n              {t('View on BscScan')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}:</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{isWinner ? t('Your winnings') : t('Your Result')}:</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${isWinner ? '+' : '-'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n        {isWinner && (\n          <>\n            <Divider />\n            <Flex alignItems=\"start\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('Amount to collect')}:\n              </Text>\n              <Flex justifyContent=\"end\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">{`${formatBnb(returned)} BNB`}</Text>\n                <span ref={targetRef}>\n                  <InfoIcon color=\"textSubtle\" ml=\"4px\" />\n                </span>\n              </Flex>\n              {tooltipVisible && tooltip}\n            </Flex>\n          </>\n        )}\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\nimport { Result } from 'state/predictions/helpers'\nimport { PayoutRow, RoundResultHistory } from '../RoundResult'\nimport BetResult from './BetResult'\nimport { getMultiplier } from './helpers'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResultHistory round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResultHistory>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text>{t('Opening Block')}</Text>\n        <Link href={getBscScanLink(bet.round.lockBlock, 'block')} external>\n          {bet.round.lockBlock}\n        </Link>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{t('Closing Block')}</Text>\n        <Link href={getBscScanLink(bet.round.closeBlock, 'block')} external>\n          {bet.round.closeBlock}\n        </Link>\n      </Flex>\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { useGetCurrentEpoch, useGetPredictionsStatus } from 'state/predictions/hooks'\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = !bet.claimed && bet.position === bet.round.position\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, REWARD_RATE) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            epoch={bet.round.epoch}\n            payout={formatBnb(payout)}\n            onSuccess={handleSuccess}\n            betAmount={bet.amount.toString()}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Bet } from 'state/types'\nimport HistoricalBet from './HistoricalBet'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n\n  return hasBetHistory ? (\n    <>\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.id} bet={bet} />\n      ))}\n    </>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #31d0aa;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const { t } = useTranslation()\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          {t('Won')}\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb } from '../helpers'\n\ntype SummaryType = 'won' | 'lost' | 'entered'\n\ninterface SummaryRowProps {\n  type: SummaryType\n  summary: any\n  bnbBusdPrice: BigNumber\n}\n\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text',\n}\n\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: '',\n}\n\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\n  const { t } = useTranslation()\n\n  const color = summaryTypeColors[type]\n  const { rounds, amount } = summary[type]\n  const totalRounds = summary.entered.rounds\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\n  const displayAmount = type === 'won' ? summary[type].payout : amount\n\n  return (\n    <>\n      <Text mt=\"16px\" bold color=\"textSubtle\">\n        {t(typeTranslationKey)}\n      </Text>\n      <Flex>\n        <Flex flex=\"2\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {rounds} {t('Rounds').toLocaleLowerCase()}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\n          </Text>\n        </Flex>\n        <Flex flex=\"3\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport default SummaryRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { getBscScanLink } from 'utils'\nimport { useGetCurrentEpoch } from 'state/predictions/hooks'\nimport { usePriceBnbBusd } from 'state/farms/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getNetPayout } from '../helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet, REWARD_RATE)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.id, payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const bnbBusdPrice = usePriceBnbBusd()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\n        </Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n            <Text small color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\n            </Text>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\n        </Text>\n\n        <Divider />\n\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`${getBscScanLink(account, 'address')}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchHistory } from 'state/predictions'\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\nimport { HistoryFilter } from 'state/types'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetHistoryByAccount,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/predictions/hooks'\nimport { Header, HistoryTabs } from './components/History'\nimport RoundsTab from './components/History/RoundsTab'\nimport PnlTab from './components/History/PnlTab/PnlTab'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const { t } = useTranslation()\n  const bets = useGetHistoryByAccount(account)\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\n\n  useEffect(() => {\n    if (account && isHistoryPaneOpen) {\n      dispatch(fetchHistory({ account }))\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  // Currently the api cannot filter by unclaimed AND won so we do it here\n  // when the user has selected Uncollected only include positions they won\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\n\n  const hasBetHistory = results && results.length > 0\n\n  let activeTabComponent = null\n\n  switch (activeTab) {\n    case HistoryTabs.PNL:\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n    case HistoryTabs.ROUNDS:\n    default:\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n  }\n\n  if (!account) {\n    activeTabComponent = (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\n        <ConnectWalletButton />\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <StyledHistory>\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\n      <BetWrapper>\n        {isFetchingHistory ? (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        ) : (\n          activeTabComponent\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport { CheckmarkCircleIcon, CheckmarkCircleFillIcon, Tag, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnbv2 } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: ethers.BigNumber\n  hasClaimed?: boolean\n}\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount, hasClaimed = false }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(amount)} BNB`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <Tag\n          variant=\"secondary\"\n          fontWeight=\"bold\"\n          textTransform=\"uppercase\"\n          outline={!hasClaimed}\n          startIcon={hasClaimed ? <CheckmarkCircleFillIcon width=\"18px\" /> : <CheckmarkCircleIcon width=\"18px\" />}\n        >\n          {hasClaimed ? t('Claimed') : t('Entered')}\n        </Tag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: ethers.BigNumber\n  multiplier?: string\n  hasEntered?: boolean\n  hasClaimed?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean) => {\n    if (isDisabled) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  hasClaimed = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled)\n  const downColor = getTextColor('failure')(isActive, isDisabled)\n  const textColor = getTextColor()(isActive, isDisabled)\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier}x` : '-'}\n        </Text>\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={betAmount} hasClaimed={hasClaimed} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box mt=\"-1px\" position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {!isDisabled && multiplierText}\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box mb=\"-1px\" position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  icon?: ReactElement\n}\n\nconst HEADER_HEIGHT = '37px'\n\n// Used to get the gradient for the card border, which depends on the header color to create the illusion\n// that header is overlapping the 1px card border.\n// 'live' is not included into the switch case because it has isActive border style\nexport const getBorderBackground = (theme: DefaultTheme, status: Status) => {\n  const gradientStopPoint = `calc(${HEADER_HEIGHT} + 1px)`\n  switch (status) {\n    case 'calculating':\n      return `linear-gradient(transparent ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint}), ${theme.colors.gradients.cardHeader}`\n    case 'canceled':\n      return `linear-gradient(${theme.colors.warning} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\n    case 'next':\n      return `linear-gradient(${theme.colors.secondary} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients.cardHeader\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return theme.colors.secondary\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  display: flex;\n  justify-content: space-between;\n  height: ${HEADER_HEIGHT};\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { useGetIsClaimable } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectWinningsButton from '../CollectWinningsButton'\n\ninterface CollectWinningsOverlayProps {\n  epoch: number\n  payout: string\n  betAmount: string\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 37px; // Card header height\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\n  epoch,\n  payout,\n  betAmount,\n  isBottom = false,\n  ...props\n}) => {\n  const { t } = useTranslation()\n  const isClaimable = useGetIsClaimable(epoch)\n\n  if (!isClaimable) {\n    return null\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n      <CollectWinningsButton payout={payout} betAmount={betAmount} epoch={epoch} hasClaimed={false} width=\"100%\">\n        {t('Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { Card, CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: NodeRound\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch } = round\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card borderBackground={getBorderBackground(theme, 'canceled')}>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\n              {t('Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport { Card, CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: NodeRound\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round, hasEnteredUp, hasEnteredDown }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card borderBackground={getBorderBackground(theme, 'calculating')}>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled hasEntered={hasEnteredUp} />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n                <InfoIcon ml=\"4px\" />\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled hasEntered={hasEnteredDown} />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Card, Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition, NodeLedger } from 'state/types'\nimport { useGetBetByEpoch, useGetBufferSeconds } from 'state/predictions/hooks'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport useTheme from 'hooks/useTheme'\nimport { getHasRoundFailed, getNetPayoutv2 } from '../../helpers'\nimport { RoundResult } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface ExpiredRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  hasClaimedUp: boolean\n  hasClaimedDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  hasClaimedUp,\n  hasClaimedDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { account } = useWeb3React()\n  const { epoch, lockPrice, closePrice } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const ledger = useGetBetByEpoch(account, epoch)\n  const bufferSeconds = useGetBufferSeconds()\n  const payout = getNetPayoutv2(ledger, round)\n  const formattedPayout = payout.toUnsafeFloat().toFixed(4)\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\n\n  if (hasRoundFailed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (!closePrice) {\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <StyledExpiredRoundCard borderBackground={getBorderBackground(theme, 'expired')}>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n          title={t('Expired')}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n            hasClaimed={hasClaimedUp}\n          />\n          <RoundResult round={round} hasFailed={hasRoundFailed} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            hasClaimed={hasClaimedDown}\n          />\n        </CardBody>\n      </StyledExpiredRoundCard>\n      <CollectWinningsOverlay\n        epoch={epoch}\n        payout={formattedPayout}\n        betAmount={betAmount ? formatBigNumberToFixed(betAmount, 4) : '0'}\n        isBottom={hasEnteredDown}\n      />\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\n\ninterface RoundProgressProps extends ProgressProps {\n  lockTimestamp: number\n  closeTimestamp: number\n}\n\nconst RoundProgress: React.FC<RoundProgressProps> = ({ lockTimestamp, closeTimestamp, ...props }) => {\n  const startMs = lockTimestamp * 1000\n  const endMs = closeTimestamp * 1000\n  const now = Date.now()\n  const rawProgress = ((now - startMs) / (endMs - startMs)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default RoundProgress\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport {\n  Card,\n  CardBody,\n  Flex,\n  PlayCircleOutlineIcon,\n  Skeleton,\n  Text,\n  TooltipText,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetLastOraclePrice, useGetBufferSeconds } from 'state/predictions/hooks'\nimport RoundProgress from 'components/RoundProgress'\nimport { formatUsdv2, getHasRoundFailed, getPriceDifference } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface LiveRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, totalAmount, lockTimestamp, closeTimestamp } = round\n  const price = useGetLastOraclePrice()\n  const bufferSeconds = useGetBufferSeconds()\n\n  const isBull = lockPrice && price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n\n  const priceDifference = getPriceDifference(price, lockPrice)\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  if (hasRoundFailed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <Card isActive>\n      <CardHeader\n        status=\"live\"\n        icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n        title={t('Live')}\n        epoch={round.epoch}\n      />\n      <RoundProgress variant=\"flat\" scale=\"sm\" lockTimestamp={lockTimestamp} closeTimestamp={closeTimestamp} />\n      <CardBody p=\"16px\">\n        <MultiplierArrow\n          betAmount={betAmount}\n          multiplier={bullMultiplier}\n          hasEntered={hasEnteredUp}\n          isActive={isBull}\n        />\n        <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n          <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n            {t('Last Price')}\n          </Text>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n            <div ref={targetRef}>\n              <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n              </TooltipText>\n            </div>\n            <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n              {formatUsdv2(priceDifference)}\n            </PositionTag>\n          </Flex>\n          {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n          <PrizePoolRow totalAmount={totalAmount} />\n        </RoundResultBox>\n        <MultiplierArrow\n          betAmount={betAmount}\n          multiplier={bearMultiplier}\n          betPosition={BetPosition.BEAR}\n          hasEntered={hasEnteredDown}\n          isActive={!isBull}\n        />\n      </CardBody>\n      {tooltipVisible && tooltip}\n    </Card>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  Card,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { BetPosition } from 'state/types'\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport PositionTag from '../PositionTag'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  epoch: number\n  onBack: () => void\n  onSuccess: (decimalValue: string, hash: string) => Promise<void>\n}\n\nconst dust = parseUnits('0.01', 18)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getButtonProps = (\n  value: ethers.BigNumber,\n  bnbBalance: ethers.BigNumber,\n  minBetAmountBalance: ethers.BigNumber,\n) => {\n  const hasSufficientBalance = () => {\n    if (value.gt(0)) {\n      return value.lte(bnbBalance)\n    }\n    return bnbBalance.gt(0)\n  }\n\n  if (!hasSufficientBalance()) {\n    return { key: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0)) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst getValueAsEthersBn = (value: string) => {\n  const valueAsFloat = parseFloat(value)\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, epoch, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [percent, setPercent] = useState(0)\n\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const predictionsContract = usePredictionsContract()\n\n  // Convert bnb balance to ethers.BigNumber\n  const bnbBalanceAsBn = useMemo(() => {\n    return ethers.BigNumber.from(bnbBalance.toString())\n  }, [bnbBalance])\n  const maxBalance = useMemo(() => {\n    return bnbBalanceAsBn.gt(dust) ? bnbBalanceAsBn.sub(dust) : dust\n  }, [bnbBalanceAsBn])\n  const balanceDisplay = formatBigNumber(bnbBalanceAsBn)\n\n  const valueAsBn = getValueAsEthersBn(value)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n\n  const handleInputChange = (input: string) => {\n    const inputAsBn = getValueAsEthersBn(input)\n\n    if (inputAsBn.eq(0)) {\n      setPercent(0)\n    } else {\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\n      const percentageAsFloat = percentage.toUnsafeFloat()\n\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\n    }\n    setValue(input)\n  }\n\n  const handlePercentChange = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\n      setValue(formatFixedNumber(balancePercentage))\n    } else {\n      setValue('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    setPercent(0)\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\n\n  const handleEnterPosition = async () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n\n    try {\n      const tx = await callWithGasPrice(predictionsContract, betMethod, [epoch], { value: valueAsBn.toString() })\n      setIsTxPending(true)\n      const receipt = await tx.wait()\n      onSuccess(valueAsBn.toString(), receipt.transactionHash as string)\n    } catch {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsTxPending(false)\n    }\n  }\n\n  // Warnings\n  useEffect(() => {\n    const inputAmount = getValueAsEthersBn(value)\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient BNB balance' })\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: formatBigNumber(minBetAmount), token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleInputChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handlePercentChange}\n          valueLabel={account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : ''}\n          step={0.01}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percentShortcut) => {\n            const handleClick = () => {\n              handlePercentChange(percentShortcut)\n            }\n\n            return (\n              <Button\n                key={percentShortcut}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percentShortcut}%`}\n              </Button>\n            )\n          })}\n          <Button\n            scale=\"xs\"\n            variant=\"tertiary\"\n            onClick={() => handlePercentChange(100)}\n            disabled={!account || isTxPending}\n          >\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <ConnectWalletButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Card,\n  CardBody,\n  PlayCircleOutlineIcon,\n  Button,\n  useTooltip,\n  ArrowUpIcon,\n  ArrowDownIcon,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\nimport { fetchLedgerData } from 'state/predictions'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport useToast from 'hooks/useToast'\nimport useTheme from 'hooks/useTheme'\nimport CardFlip from '../CardFlip'\nimport { formatBnbv2 } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = Date.now() > (round.lockTimestamp + ROUND_BUFFER) * 1000\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  const getHasEnteredPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getHasEnteredPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async () => {\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      t('%position% position entered', {\n        position: positionDisplay,\n      }),\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card borderBackground={getBorderBackground(theme, 'next')}>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n        epoch={round.epoch}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useCallback, useEffect, useState } from 'react'\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\n\nconst getNow = () => Math.floor(Date.now() / 1000)\n\n/**\n * Consider this moving up to the global level\n */\nconst useCountdown = (timestamp: number) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(() => {\n    return timestamp - getNow()\n  })\n  const [isPaused, setIsPaused] = useState(false)\n  const isWindowVisible = useIsWindowVisible()\n\n  const pause = useCallback(() => setIsPaused(true), [setIsPaused])\n  const unpause = useCallback(() => setIsPaused(false), [setIsPaused])\n\n  useEffect(() => {\n    let timer: ReturnType<typeof setTimeout>\n\n    if (!isPaused && secondsRemaining > 0) {\n      timer = setTimeout(() => {\n        setSecondsRemaining((prevSecondsRemaining) => prevSecondsRemaining - 1)\n      }, 1000)\n    }\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [secondsRemaining, isPaused, setSecondsRemaining])\n\n  useEffect(() => {\n    setSecondsRemaining(timestamp - getNow())\n  }, [timestamp, setSecondsRemaining])\n\n  // Pause the timer if the tab becomes inactive to avoid it becoming out of sync\n  useEffect(() => {\n    if (isWindowVisible) {\n      setSecondsRemaining(timestamp - getNow())\n      unpause()\n    } else {\n      pause()\n    }\n  }, [pause, unpause, timestamp, setSecondsRemaining, isWindowVisible])\n\n  return { secondsRemaining, pause, unpause }\n}\n\nexport default useCountdown\n","import React from 'react'\nimport { Card, CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport { useGetIntervalSeconds } from 'state/predictions/hooks'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport { formatRoundTime } from '../../helpers'\nimport useCountdown from '../../hooks/useCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: NodeRound\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const intervalSeconds = useGetIntervalSeconds()\n  const { secondsRemaining } = useCountdown(round.startTimestamp + intervalSeconds + ROUND_BUFFER)\n  const countdown = formatRoundTime(secondsRemaining)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Card borderBackground={getBorderBackground(theme, 'soon')}>\n      <CardHeader status=\"soon\" icon={<WaitIcon mr=\"4px\" width=\"21px\" />} title={t('Later')} epoch={round.epoch} />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByEpoch, useGetCurrentEpoch } from 'state/predictions/hooks'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { getMultiplierv2 } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: NodeRound\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const ledger = useGetBetByEpoch(account, epoch)\n  const hasEntered = ledger ? ledger.amount.gt(0) : false\n  const hasEnteredUp = hasEntered && ledger.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && ledger.position === BetPosition.BEAR\n  const hasClaimedUp = hasEntered && ledger.claimed && ledger.position === BetPosition.BULL\n  const hasClaimedDown = hasEntered && ledger.claimed && ledger.position === BetPosition.BEAR\n\n  const bullMultiplier = getMultiplierv2(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplierv2(totalAmount, bearAmount)\n\n  const formattedBullMultiplier = bullMultiplier.toUnsafeFloat().toFixed(bullMultiplier.isZero() ? 0 : 2)\n  const formattedBearMultiplier = bearMultiplier.toUnsafeFloat().toFixed(bearMultiplier.isZero() ? 0 : 2)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={ledger?.amount}\n        bullMultiplier={formattedBullMultiplier}\n        bearMultiplier={formattedBearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={ledger?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={formattedBullMultiplier}\n        bearMultiplier={formattedBearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      hasClaimedDown={hasClaimedDown}\n      hasClaimedUp={hasClaimedUp}\n      betAmount={ledger?.amount}\n      bullMultiplier={formattedBullMultiplier}\n      bearMultiplier={formattedBearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Flex, PocketWatchIcon, Text } from '@pancakeswap/uikit'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetCurrentRoundLockTimestamp, useGetLastOraclePrice } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useCountdown from '../hooks/useCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 70px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Flex)<{ dir: 'left' | 'right' }>`\n  background-color: ${({ theme }) => theme.card.background};\n  box-shadow: ${({ theme }) => theme.shadows.level1};\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: ${({ theme }) => theme.radii.card};\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice()\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n  unit: 'm' | 'h' | 'd'\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\n  const currentRoundLockTimestamp = useGetCurrentRoundLockTimestamp()\n  const { secondsRemaining } = useCountdown(currentRoundLockTimestamp + ROUND_BUFFER)\n  const countdown = formatRoundTime(secondsRemaining)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        <Title bold color=\"secondary\">\n          {secondsRemaining === 0 ? t('Closing') : countdown}\n        </Title>\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Flex, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Flex)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  box-shadow: ${({ theme }) => theme.shadows.level1};\n  border-radius: ${({ theme }) => theme.radii.default};\n  background-color: ${({ theme }) => theme.card.background};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/predictions/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 2;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n  }\n`\n\nconst HistoryButtonWrapper = styled.div`\n  display: none;\n  order: 3;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: initial;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"5\" unit=\"m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <IconButton\n              variant=\"subtle\"\n              as=\"a\"\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <HelpIcon width=\"24px\" color=\"white\" />\n            </IconButton>\n          </HelpButtonWrapper>\n          <HistoryButtonWrapper>\n            <HistoryButton />\n          </HistoryButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import { useEffect } from 'react'\nimport usePrevious from 'hooks/usePreviousValue'\nimport useSwiper from './useSwiper'\nimport { PageView } from '../types'\n\n/**\n * Hooks for actions to be performed when the view changes (mobile)\n */\nconst useOnViewChange = (liveSwiperIndex: number, view?: PageView) => {\n  const { swiper } = useSwiper()\n  const prevView = usePrevious(view)\n\n  useEffect(() => {\n    if (swiper && view !== prevView && swiper.activeIndex !== liveSwiperIndex) {\n      swiper.slideTo(liveSwiperIndex, 0.1)\n    }\n  }, [swiper, prevView, view, liveSwiperIndex])\n}\n\nexport default useOnViewChange\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@pancakeswap/uikit'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\nimport useOnViewChange from './hooks/useOnViewChange'\nimport { PageView } from './types'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC<{ view?: PageView }> = ({ view }) => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const currentEpoch = useGetCurrentEpoch()\n  const previousEpoch = currentEpoch > 0 ? currentEpoch - 1 : currentEpoch\n  const previousRound = rounds.find((round) => round.epoch === previousEpoch)\n  const swiperIndex = rounds.indexOf(previousRound)\n\n  useOnNextRound()\n  useOnViewChange(swiperIndex, view)\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={swiperIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          freeModeMomentumRatio={0.25}\n          freeModeMomentumVelocityRatio={0.5}\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.epoch}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","export enum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@pancakeswap/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport { PageView } from './types'\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions view={view} />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  InjectedModalProps,\n  LinkExternal,\n  Flex,\n  Image,\n  Heading,\n  Checkbox,\n  Box,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport usePersistState from 'hooks/usePersistState'\nimport { useTranslation } from 'contexts/Localization'\n\nexport const CHART_LOCAL_STORAGE_KEY = 'pcs_chart_do_not_show'\n\nconst Ul = styled.ul`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  list-style-position: outside;\n  margin-left: 16px;\n\n  & > li {\n    font-size: 14px;\n    line-height: 1.5;\n  }\n`\n\nconst ChartDisclaimer: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [doNotShow, setDoNowShow] = usePersistState(false, { localStorageKey: CHART_LOCAL_STORAGE_KEY })\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Flex justifyContent=\"center\" mb=\"32px\">\n          <Image src=\"/images/chartwarning.svg\" width={190} height={118} />\n        </Flex>\n        <Heading as=\"h3\" size=\"sm\">\n          {t('Warning')}:\n        </Heading>\n        <Heading as=\"h4\" size=\"sm\" mb=\"24px\">\n          {t('Prices shown on cards and charts are different')}:\n        </Heading>\n        <Text as=\"p\" fontSize=\"14px\" color=\"textSubtle\">\n          {t('The price you see come from difference places')}:\n        </Text>\n        <Ul>\n          <li>{t('Prices on cards come from Chainlink’s verifiable price oracle.')}</li>\n          <li>{t(\"Prices on charts come from Binance.com. Chart's are provided for your reference only.\")}</li>\n        </Ul>\n        <Text as=\"p\" mb=\"16px\" fontSize=\"14px\" color=\"textSubtle\">\n          {t(\"Only the price from Chainlink (shown on the cards) determines the round's result.\")}\n        </Text>\n        <LinkExternal\n          href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\n          external\n          mb=\"24px\"\n        >\n          {t('Learn More')}\n        </LinkExternal>\n        <Box>\n          <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n            {t('I understand')}\n          </Button>\n        </Box>\n        <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n          <Flex alignItems=\"center\">\n            <div style={{ flex: 'none' }}>\n              <Checkbox id=\"checkbox\" scale=\"sm\" checked={doNotShow} onChange={() => setDoNowShow(!doNotShow)} />\n            </div>\n            <Text ml=\"8px\">{t(\"Don't show this again\")}</Text>\n          </Flex>\n        </label>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/predictions/hooks'\nimport { useInitialBlock } from 'state/block/hooks'\nimport { initializePredictions } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/Loader/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollPredictions from './hooks/usePollPredictions'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer, { CHART_LOCAL_STORAGE_KEY } from './components/ChartDisclaimer'\n\nconst Predictions = () => {\n  const { isDesktop } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_accepted_risk-2',\n  })\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (isChartPaneOpen) {\n      const showChartDisclaimer = JSON.parse(localStorage.getItem(CHART_LOCAL_STORAGE_KEY))\n\n      if (showChartDisclaimer !== true) {\n        onPresentChartDisclaimerRef.current()\n      }\n    }\n  }, [onPresentChartDisclaimerRef, isChartPaneOpen])\n\n  useEffect(() => {\n    if (initialBlock > 0) {\n      // Do not start initialization until the first block has been retrieved\n      dispatch(initializePredictions(account))\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollPredictions()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n"],"sourceRoot":""}