{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useRef,useState}from'react';import{useLocation}from'react-router-dom';import{useWeb3React}from'@web3-react/core';import{useModal}from'@pancakeswap/uikit';import nfts from'config/constants/nfts';import NftGiveawayModal from'./NftGiveawayModal';import useBunnySpecialLottery from'../hooks/useBunnySpecialLottery';import{jsx as _jsx}from\"react/jsx-runtime\";/**\n * This is represented as a component rather than a hook because we need to keep it\n * inside the Router.\n *\n * TODO: Put global checks in redux or make a generic area to house global checks\n */var GlobalCheckClaimStatus=function GlobalCheckClaimStatus(_ref){var excludeLocations=_ref.excludeLocations;var hasDisplayedModal=useRef(false);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),claimableNfts=_useState2[0],setClaimableNfts=_useState2[1];var _useModal=useModal(/*#__PURE__*/_jsx(NftGiveawayModal,{nfts:claimableNfts})),_useModal2=_slicedToArray(_useModal,1),onPresentGiftModal=_useModal2[0];var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useLocation=useLocation(),pathname=_useLocation.pathname;var _useBunnySpecialLotte=useBunnySpecialLottery(),canClaimBaller=_useBunnySpecialLotte.canClaimBaller,canClaimLottie=_useBunnySpecialLotte.canClaimLottie,canClaimLucky=_useBunnySpecialLotte.canClaimLucky;// Check claim status\nuseEffect(function(){var fetchClaimStatus=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var claimable,nftConfigMap,_yield$canClaimBaller,isBallerClaimable,_yield$canClaimLottie,isLottieClaimable,_yield$canClaimLucky,isLuckyClaimable;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:claimable=[];nftConfigMap={lottie:nfts.find(function(nft){return nft.identifier==='lottie';}),lucky:nfts.find(function(nft){return nft.identifier==='lucky';}),baller:nfts.find(function(nft){return nft.identifier==='baller';})};_context.next=4;return canClaimBaller();case 4:_yield$canClaimBaller=_context.sent;isBallerClaimable=_yield$canClaimBaller.canClaim;_context.next=8;return canClaimLottie();case 8:_yield$canClaimLottie=_context.sent;isLottieClaimable=_yield$canClaimLottie.canClaim;_context.next=12;return canClaimLucky();case 12:_yield$canClaimLucky=_context.sent;isLuckyClaimable=_yield$canClaimLucky.canClaim;if(isBallerClaimable){claimable.push(nftConfigMap.baller);}if(isLottieClaimable){claimable.push(nftConfigMap.lottie);}if(isLuckyClaimable){claimable.push(nftConfigMap.lucky);}setClaimableNfts(claimable);case 18:case\"end\":return _context.stop();}}},_callee);}));return function fetchClaimStatus(){return _ref2.apply(this,arguments);};}();if(account){fetchClaimStatus();}},[account,canClaimBaller,canClaimLottie,canClaimLucky]);// Check if we need to display the modal\nuseEffect(function(){var matchesSomeLocations=excludeLocations.some(function(location){return pathname.includes(location);});if(claimableNfts.length>0&&!matchesSomeLocations&&!hasDisplayedModal.current){onPresentGiftModal();hasDisplayedModal.current=true;}},[pathname,excludeLocations,hasDisplayedModal,onPresentGiftModal,claimableNfts]);// Reset the check flag when account changes\nuseEffect(function(){hasDisplayedModal.current=false;},[account,hasDisplayedModal]);return null;};export default GlobalCheckClaimStatus;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Collectibles/components/GlobalCheckClaimStatus.tsx"],"names":["React","useEffect","useRef","useState","useLocation","useWeb3React","useModal","nfts","NftGiveawayModal","useBunnySpecialLottery","GlobalCheckClaimStatus","excludeLocations","hasDisplayedModal","claimableNfts","setClaimableNfts","onPresentGiftModal","account","pathname","canClaimBaller","canClaimLottie","canClaimLucky","fetchClaimStatus","claimable","nftConfigMap","lottie","find","nft","identifier","lucky","baller","isBallerClaimable","canClaim","isLottieClaimable","isLuckyClaimable","push","matchesSomeLocations","some","location","includes","length","current"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { useModal } from '@pancakeswap/uikit'\nimport { Nft } from 'config/constants/types'\nimport nfts from 'config/constants/nfts'\nimport NftGiveawayModal from './NftGiveawayModal'\nimport useBunnySpecialLottery from '../hooks/useBunnySpecialLottery'\n\ninterface GlobalCheckClaimStatusProps {\n  excludeLocations: string[]\n}\n\n/**\n * This is represented as a component rather than a hook because we need to keep it\n * inside the Router.\n *\n * TODO: Put global checks in redux or make a generic area to house global checks\n */\nconst GlobalCheckClaimStatus: React.FC<GlobalCheckClaimStatusProps> = ({ excludeLocations }) => {\n  const hasDisplayedModal = useRef(false)\n  const [claimableNfts, setClaimableNfts] = useState<Nft[]>([])\n  const [onPresentGiftModal] = useModal(<NftGiveawayModal nfts={claimableNfts} />)\n  const { account } = useWeb3React()\n  const { pathname } = useLocation()\n  const { canClaimBaller, canClaimLottie, canClaimLucky } = useBunnySpecialLottery()\n\n  // Check claim status\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const claimable: Nft[] = []\n\n      const nftConfigMap = {\n        lottie: nfts.find((nft) => nft.identifier === 'lottie'),\n        lucky: nfts.find((nft) => nft.identifier === 'lucky'),\n        baller: nfts.find((nft) => nft.identifier === 'baller'),\n      }\n\n      const { canClaim: isBallerClaimable } = await canClaimBaller()\n      const { canClaim: isLottieClaimable } = await canClaimLottie()\n      const { canClaim: isLuckyClaimable } = await canClaimLucky()\n\n      if (isBallerClaimable) {\n        claimable.push(nftConfigMap.baller)\n      }\n\n      if (isLottieClaimable) {\n        claimable.push(nftConfigMap.lottie)\n      }\n\n      if (isLuckyClaimable) {\n        claimable.push(nftConfigMap.lucky)\n      }\n\n      setClaimableNfts(claimable)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, canClaimBaller, canClaimLottie, canClaimLucky])\n\n  // Check if we need to display the modal\n  useEffect(() => {\n    const matchesSomeLocations = excludeLocations.some((location) => pathname.includes(location))\n\n    if (claimableNfts.length > 0 && !matchesSomeLocations && !hasDisplayedModal.current) {\n      onPresentGiftModal()\n      hasDisplayedModal.current = true\n    }\n  }, [pathname, excludeLocations, hasDisplayedModal, onPresentGiftModal, claimableNfts])\n\n  // Reset the check flag when account changes\n  useEffect(() => {\n    hasDisplayedModal.current = false\n  }, [account, hasDisplayedModal])\n\n  return null\n}\n\nexport default GlobalCheckClaimStatus\n"]},"metadata":{},"sourceType":"module"}