{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import fetchFarm from'./fetchFarm';var fetchFarms=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(farmsToFetch){var data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return Promise.all(farmsToFetch.map(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(farmConfig){var farm;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchFarm(farmConfig);case 2:farm=_context.sent;return _context.abrupt(\"return\",farm);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x2){return _ref2.apply(this,arguments);};}()));case 2:data=_context2.sent;return _context2.abrupt(\"return\",data);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchFarms(_x){return _ref.apply(this,arguments);};}();export default fetchFarms;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/state/farms/fetchFarms.ts"],"names":["fetchFarm","fetchFarms","farmsToFetch","Promise","all","map","farmConfig","farm","data"],"mappings":"+UACA,MAAOA,CAAAA,SAAP,KAAsB,aAAtB,CAEA,GAAMC,CAAAA,UAAU,0FAAG,kBAAOC,YAAP,sJACEC,CAAAA,OAAO,CAACC,GAAR,CACjBF,YAAY,CAACG,GAAb,2FAAiB,iBAAOC,UAAP,iJACIN,CAAAA,SAAS,CAACM,UAAD,CADb,QACTC,IADS,+CAERA,IAFQ,wDAAjB,iEADiB,CADF,QACXC,IADW,iDAOVA,IAPU,0DAAH,kBAAVP,CAAAA,UAAU,4CAAhB,CAUA,cAAeA,CAAAA,UAAf","sourcesContent":["import { FarmConfig } from 'config/constants/types'\nimport fetchFarm from './fetchFarm'\n\nconst fetchFarms = async (farmsToFetch: FarmConfig[]) => {\n  const data = await Promise.all(\n    farmsToFetch.map(async (farmConfig) => {\n      const farm = await fetchFarm(farmConfig)\n      return farm\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n"]},"metadata":{},"sourceType":"module"}