{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import maxBy from'lodash/maxBy';import merge from'lodash/merge';import range from'lodash/range';import{BIG_ZERO}from'utils/bigNumber';import{HistoryFilter,PredictionStatus}from'state/types';import{getPredictionsContract}from'utils/contractHelpers';import{FUTURE_ROUND_COUNT,PAST_ROUND_COUNT,ROUND_BUFFER}from'./config';import{getBetHistory,transformBetResponse,makeFutureRoundResponse,makeRoundData,getRoundsData,getPredictionData,getLedgerData,makeLedgerData,serializePredictionsRoundsResponse,getClaimStatuses}from'./helpers';var initialState={status:PredictionStatus.INITIAL,isLoading:false,isHistoryPaneOpen:false,isChartPaneOpen:false,isFetchingHistory:false,historyFilter:HistoryFilter.ALL,currentEpoch:0,intervalSeconds:300,minBetAmount:'10000000000000',bufferSeconds:60,lastOraclePrice:BIG_ZERO.toJSON(),rounds:{},history:{},ledgers:{},claimableStatuses:{}};// Thunks\n// V2 REFACTOR\nexport var initializePredictions=createAsyncThunk('predictions/intialize',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var account,marketData,epochs,roundsResponse,initialRoundData,initializedData,ledgerResponses,claimableStatuses,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:account=_args.length>0&&_args[0]!==undefined?_args[0]:null;_context.next=3;return getPredictionData();case 3:marketData=_context.sent;epochs=marketData.currentEpoch>PAST_ROUND_COUNT?range(marketData.currentEpoch,marketData.currentEpoch-PAST_ROUND_COUNT):[marketData.currentEpoch];// Round data\n_context.next=7;return getRoundsData(epochs);case 7:roundsResponse=_context.sent;initialRoundData=roundsResponse.reduce(function(accum,roundResponse){var reduxNodeRound=serializePredictionsRoundsResponse(roundResponse);return _objectSpread(_objectSpread({},accum),{},_defineProperty({},reduxNodeRound.epoch.toString(),reduxNodeRound));},{});initializedData=_objectSpread(_objectSpread({},marketData),{},{rounds:initialRoundData,ledgers:{},claimableStatuses:{}});if(account){_context.next=12;break;}return _context.abrupt(\"return\",initializedData);case 12:_context.next=14;return getLedgerData(account,epochs);case 14:ledgerResponses=_context.sent;_context.next=17;return getClaimStatuses(account,epochs);case 17:claimableStatuses=_context.sent;return _context.abrupt(\"return\",merge({},initializedData,{ledgers:makeLedgerData(account,ledgerResponses,epochs),claimableStatuses:claimableStatuses}));case 19:case\"end\":return _context.stop();}}},_callee);})));export var fetchRound=createAsyncThunk('predictions/fetchRound',/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(epoch){var predictionContract,response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:predictionContract=getPredictionsContract();_context2.next=3;return predictionContract.rounds(epoch);case 3:response=_context2.sent;return _context2.abrupt(\"return\",serializePredictionsRoundsResponse(response));case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x){return _ref2.apply(this,arguments);};}());export var fetchRounds=createAsyncThunk('predictions/fetchRounds',/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(epochs){var rounds;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return getRoundsData(epochs);case 2:rounds=_context3.sent;return _context3.abrupt(\"return\",rounds.reduce(function(accum,round){if(!round){return accum;}var reduxNodeRound=serializePredictionsRoundsResponse(round);return _objectSpread(_objectSpread({},accum),{},_defineProperty({},reduxNodeRound.epoch.toString(),reduxNodeRound));},{}));case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x2){return _ref3.apply(this,arguments);};}());export var fetchMarketData=createAsyncThunk('predictions/fetchMarketData',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var marketData;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return getPredictionData();case 2:marketData=_context4.sent;return _context4.abrupt(\"return\",marketData);case 4:case\"end\":return _context4.stop();}}},_callee4);})));export var fetchLedgerData=createAsyncThunk('predictions/fetchLedgerData',/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref5){var account,epochs,ledgers;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:account=_ref5.account,epochs=_ref5.epochs;_context5.next=3;return getLedgerData(account,epochs);case 3:ledgers=_context5.sent;return _context5.abrupt(\"return\",makeLedgerData(account,ledgers,epochs));case 5:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x3){return _ref6.apply(this,arguments);};}());export var fetchClaimableStatuses=createAsyncThunk('predictions/fetchClaimableStatuses',/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref7){var account,epochs,ledgers;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:account=_ref7.account,epochs=_ref7.epochs;_context6.next=3;return getClaimStatuses(account,epochs);case 3:ledgers=_context6.sent;return _context6.abrupt(\"return\",ledgers);case 5:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x4){return _ref8.apply(this,arguments);};}());// END V2 REFACTOR\nexport var fetchHistory=createAsyncThunk('predictions/fetchHistory',/*#__PURE__*/function(){var _ref10=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref9){var account,claimed,response,bets;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:account=_ref9.account,claimed=_ref9.claimed;_context7.next=3;return getBetHistory({user:account.toLowerCase(),claimed:claimed});case 3:response=_context7.sent;bets=response.map(transformBetResponse);return _context7.abrupt(\"return\",{account:account,bets:bets});case 6:case\"end\":return _context7.stop();}}},_callee7);}));return function(_x5){return _ref10.apply(this,arguments);};}());export var predictionsSlice=createSlice({name:'predictions',initialState:initialState,reducers:{setPredictionStatus:function setPredictionStatus(state,action){state.status=action.payload;},setHistoryPaneState:function setHistoryPaneState(state,action){state.isHistoryPaneOpen=action.payload;state.historyFilter=HistoryFilter.ALL;},setChartPaneState:function setChartPaneState(state,action){state.isChartPaneOpen=action.payload;},setHistoryFilter:function setHistoryFilter(state,action){state.historyFilter=action.payload;},setCurrentEpoch:function setCurrentEpoch(state,action){state.currentEpoch=action.payload;},setLastOraclePrice:function setLastOraclePrice(state,action){state.lastOraclePrice=action.payload;},markBetHistoryAsCollected:function markBetHistoryAsCollected(state,action){var _action$payload=action.payload,account=_action$payload.account,betId=_action$payload.betId;if(state.history[account]){var betIndex=state.history[account].findIndex(function(bet){return bet.id===betId;});if(betIndex>=0){state.history[account][betIndex].claimed=true;}}}},extraReducers:function extraReducers(builder){// Claimable statuses\nbuilder.addCase(fetchClaimableStatuses.fulfilled,function(state,action){state.claimableStatuses=merge({},state.claimableStatuses,action.payload);});// Ledger (bet) records\nbuilder.addCase(fetchLedgerData.fulfilled,function(state,action){state.ledgers=merge({},state.ledgers,action.payload);});// Get static market data\nbuilder.addCase(fetchMarketData.fulfilled,function(state,action){var _action$payload2=action.payload,status=_action$payload2.status,currentEpoch=_action$payload2.currentEpoch,intervalSeconds=_action$payload2.intervalSeconds,minBetAmount=_action$payload2.minBetAmount;// If the round has change add a new future round\nif(state.currentEpoch!==currentEpoch){var newestRound=maxBy(Object.values(state.rounds),'epoch');var futureRound=makeFutureRoundResponse(newestRound.epoch+1,newestRound.startTimestamp+intervalSeconds+ROUND_BUFFER);state.rounds[futureRound.epoch]=futureRound;}state.status=status;state.currentEpoch=currentEpoch;state.intervalSeconds=intervalSeconds;state.minBetAmount=minBetAmount;});// Initialize predictions\nbuilder.addCase(initializePredictions.fulfilled,function(state,action){var _action$payload3=action.payload,status=_action$payload3.status,currentEpoch=_action$payload3.currentEpoch,intervalSeconds=_action$payload3.intervalSeconds,bufferSeconds=_action$payload3.bufferSeconds,rounds=_action$payload3.rounds,claimableStatuses=_action$payload3.claimableStatuses,ledgers=_action$payload3.ledgers;var futureRounds=[];var currentRound=rounds[currentEpoch];for(var i=1;i<=FUTURE_ROUND_COUNT;i++){futureRounds.push(makeFutureRoundResponse(currentEpoch+i,currentRound.startTimestamp+intervalSeconds*i));}return _objectSpread(_objectSpread({},state),{},{status:status,currentEpoch:currentEpoch,intervalSeconds:intervalSeconds,bufferSeconds:bufferSeconds,claimableStatuses:claimableStatuses,ledgers:ledgers,rounds:merge({},rounds,makeRoundData(futureRounds))});});// Get single round\nbuilder.addCase(fetchRound.fulfilled,function(state,action){state.rounds=merge({},state.rounds,_defineProperty({},action.payload.epoch.toString(),action.payload));});// Get multiple rounds\nbuilder.addCase(fetchRounds.fulfilled,function(state,action){state.rounds=merge({},state.rounds,action.payload);});// Show History\nbuilder.addCase(fetchHistory.pending,function(state){state.isFetchingHistory=true;});builder.addCase(fetchHistory.rejected,function(state){state.isFetchingHistory=false;});builder.addCase(fetchHistory.fulfilled,function(state,action){var _action$payload4=action.payload,account=_action$payload4.account,bets=_action$payload4.bets;state.isFetchingHistory=false;state.history[account]=bets;});}});// Actions\nvar _predictionsSlice$act=predictionsSlice.actions,setChartPaneState=_predictionsSlice$act.setChartPaneState,setCurrentEpoch=_predictionsSlice$act.setCurrentEpoch,setHistoryFilter=_predictionsSlice$act.setHistoryFilter,setHistoryPaneState=_predictionsSlice$act.setHistoryPaneState,setPredictionStatus=_predictionsSlice$act.setPredictionStatus,setLastOraclePrice=_predictionsSlice$act.setLastOraclePrice,markBetHistoryAsCollected=_predictionsSlice$act.markBetHistoryAsCollected;export{setChartPaneState,setCurrentEpoch,setHistoryFilter,setHistoryPaneState,setPredictionStatus,setLastOraclePrice,markBetHistoryAsCollected};export default predictionsSlice.reducer;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/state/predictions/index.ts"],"names":["createAsyncThunk","createSlice","maxBy","merge","range","BIG_ZERO","HistoryFilter","PredictionStatus","getPredictionsContract","FUTURE_ROUND_COUNT","PAST_ROUND_COUNT","ROUND_BUFFER","getBetHistory","transformBetResponse","makeFutureRoundResponse","makeRoundData","getRoundsData","getPredictionData","getLedgerData","makeLedgerData","serializePredictionsRoundsResponse","getClaimStatuses","initialState","status","INITIAL","isLoading","isHistoryPaneOpen","isChartPaneOpen","isFetchingHistory","historyFilter","ALL","currentEpoch","intervalSeconds","minBetAmount","bufferSeconds","lastOraclePrice","toJSON","rounds","history","ledgers","claimableStatuses","initializePredictions","account","marketData","epochs","roundsResponse","initialRoundData","reduce","accum","roundResponse","reduxNodeRound","epoch","toString","initializedData","ledgerResponses","fetchRound","predictionContract","response","fetchRounds","round","fetchMarketData","fetchLedgerData","fetchClaimableStatuses","fetchHistory","claimed","user","toLowerCase","bets","map","predictionsSlice","name","reducers","setPredictionStatus","state","action","payload","setHistoryPaneState","setChartPaneState","setHistoryFilter","setCurrentEpoch","setLastOraclePrice","markBetHistoryAsCollected","betId","betIndex","findIndex","bet","id","extraReducers","builder","addCase","fulfilled","newestRound","Object","values","futureRound","startTimestamp","futureRounds","currentRound","i","push","pending","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport maxBy from 'lodash/maxBy'\nimport merge from 'lodash/merge'\nimport range from 'lodash/range'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Bet, LedgerData, HistoryFilter, PredictionsState, PredictionStatus, ReduxNodeRound } from 'state/types'\nimport { getPredictionsContract } from 'utils/contractHelpers'\nimport { FUTURE_ROUND_COUNT, PAST_ROUND_COUNT, ROUND_BUFFER } from './config'\nimport {\n  getBetHistory,\n  transformBetResponse,\n  makeFutureRoundResponse,\n  makeRoundData,\n  getRoundsData,\n  getPredictionData,\n  MarketData,\n  getLedgerData,\n  makeLedgerData,\n  serializePredictionsRoundsResponse,\n  getClaimStatuses,\n} from './helpers'\n\nconst initialState: PredictionsState = {\n  status: PredictionStatus.INITIAL,\n  isLoading: false,\n  isHistoryPaneOpen: false,\n  isChartPaneOpen: false,\n  isFetchingHistory: false,\n  historyFilter: HistoryFilter.ALL,\n  currentEpoch: 0,\n  intervalSeconds: 300,\n  minBetAmount: '10000000000000',\n  bufferSeconds: 60,\n  lastOraclePrice: BIG_ZERO.toJSON(),\n  rounds: {},\n  history: {},\n  ledgers: {},\n  claimableStatuses: {},\n}\n\n// Thunks\n// V2 REFACTOR\ntype PredictionInitialization = Pick<\n  PredictionsState,\n  | 'status'\n  | 'currentEpoch'\n  | 'intervalSeconds'\n  | 'minBetAmount'\n  | 'rounds'\n  | 'ledgers'\n  | 'claimableStatuses'\n  | 'bufferSeconds'\n>\nexport const initializePredictions = createAsyncThunk<PredictionInitialization, string>(\n  'predictions/intialize',\n  async (account = null) => {\n    // Static values\n    const marketData = await getPredictionData()\n    const epochs =\n      marketData.currentEpoch > PAST_ROUND_COUNT\n        ? range(marketData.currentEpoch, marketData.currentEpoch - PAST_ROUND_COUNT)\n        : [marketData.currentEpoch]\n\n    // Round data\n    const roundsResponse = await getRoundsData(epochs)\n    const initialRoundData: { [key: string]: ReduxNodeRound } = roundsResponse.reduce((accum, roundResponse) => {\n      const reduxNodeRound = serializePredictionsRoundsResponse(roundResponse)\n\n      return {\n        ...accum,\n        [reduxNodeRound.epoch.toString()]: reduxNodeRound,\n      }\n    }, {})\n\n    const initializedData = {\n      ...marketData,\n      rounds: initialRoundData,\n      ledgers: {},\n      claimableStatuses: {},\n    }\n\n    if (!account) {\n      return initializedData\n    }\n\n    // Bet data\n    const ledgerResponses = await getLedgerData(account, epochs)\n\n    // Claim statuses\n    const claimableStatuses = await getClaimStatuses(account, epochs)\n\n    return merge({}, initializedData, {\n      ledgers: makeLedgerData(account, ledgerResponses, epochs),\n      claimableStatuses,\n    })\n  },\n)\n\nexport const fetchRound = createAsyncThunk<ReduxNodeRound, number>('predictions/fetchRound', async (epoch) => {\n  const predictionContract = getPredictionsContract()\n  const response = await predictionContract.rounds(epoch)\n  return serializePredictionsRoundsResponse(response)\n})\n\nexport const fetchRounds = createAsyncThunk<{ [key: string]: ReduxNodeRound }, number[]>(\n  'predictions/fetchRounds',\n  async (epochs) => {\n    const rounds = await getRoundsData(epochs)\n    return rounds.reduce((accum, round) => {\n      if (!round) {\n        return accum\n      }\n\n      const reduxNodeRound = serializePredictionsRoundsResponse(round)\n\n      return {\n        ...accum,\n        [reduxNodeRound.epoch.toString()]: reduxNodeRound,\n      }\n    }, {})\n  },\n)\n\nexport const fetchMarketData = createAsyncThunk<MarketData>('predictions/fetchMarketData', async () => {\n  const marketData = await getPredictionData()\n  return marketData\n})\n\nexport const fetchLedgerData = createAsyncThunk<LedgerData, { account: string; epochs: number[] }>(\n  'predictions/fetchLedgerData',\n  async ({ account, epochs }) => {\n    const ledgers = await getLedgerData(account, epochs)\n    return makeLedgerData(account, ledgers, epochs)\n  },\n)\n\nexport const fetchClaimableStatuses = createAsyncThunk<\n  PredictionsState['claimableStatuses'],\n  { account: string; epochs: number[] }\n>('predictions/fetchClaimableStatuses', async ({ account, epochs }) => {\n  const ledgers = await getClaimStatuses(account, epochs)\n  return ledgers\n})\n// END V2 REFACTOR\n\nexport const fetchHistory = createAsyncThunk<{ account: string; bets: Bet[] }, { account: string; claimed?: boolean }>(\n  'predictions/fetchHistory',\n  async ({ account, claimed }) => {\n    const response = await getBetHistory({\n      user: account.toLowerCase(),\n      claimed,\n    })\n    const bets = response.map(transformBetResponse)\n\n    return { account, bets }\n  },\n)\n\nexport const predictionsSlice = createSlice({\n  name: 'predictions',\n  initialState,\n  reducers: {\n    setPredictionStatus: (state, action: PayloadAction<PredictionStatus>) => {\n      state.status = action.payload\n    },\n    setHistoryPaneState: (state, action: PayloadAction<boolean>) => {\n      state.isHistoryPaneOpen = action.payload\n      state.historyFilter = HistoryFilter.ALL\n    },\n    setChartPaneState: (state, action: PayloadAction<boolean>) => {\n      state.isChartPaneOpen = action.payload\n    },\n    setHistoryFilter: (state, action: PayloadAction<HistoryFilter>) => {\n      state.historyFilter = action.payload\n    },\n    setCurrentEpoch: (state, action: PayloadAction<number>) => {\n      state.currentEpoch = action.payload\n    },\n    setLastOraclePrice: (state, action: PayloadAction<string>) => {\n      state.lastOraclePrice = action.payload\n    },\n    markBetHistoryAsCollected: (state, action: PayloadAction<{ account: string; betId: string }>) => {\n      const { account, betId } = action.payload\n\n      if (state.history[account]) {\n        const betIndex = state.history[account].findIndex((bet) => bet.id === betId)\n\n        if (betIndex >= 0) {\n          state.history[account][betIndex].claimed = true\n        }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    // Claimable statuses\n    builder.addCase(fetchClaimableStatuses.fulfilled, (state, action) => {\n      state.claimableStatuses = merge({}, state.claimableStatuses, action.payload)\n    })\n\n    // Ledger (bet) records\n    builder.addCase(fetchLedgerData.fulfilled, (state, action) => {\n      state.ledgers = merge({}, state.ledgers, action.payload)\n    })\n\n    // Get static market data\n    builder.addCase(fetchMarketData.fulfilled, (state, action) => {\n      const { status, currentEpoch, intervalSeconds, minBetAmount } = action.payload\n\n      // If the round has change add a new future round\n      if (state.currentEpoch !== currentEpoch) {\n        const newestRound = maxBy(Object.values(state.rounds), 'epoch')\n        const futureRound = makeFutureRoundResponse(\n          newestRound.epoch + 1,\n          newestRound.startTimestamp + intervalSeconds + ROUND_BUFFER,\n        )\n\n        state.rounds[futureRound.epoch] = futureRound\n      }\n\n      state.status = status\n      state.currentEpoch = currentEpoch\n      state.intervalSeconds = intervalSeconds\n      state.minBetAmount = minBetAmount\n    })\n\n    // Initialize predictions\n    builder.addCase(initializePredictions.fulfilled, (state, action) => {\n      const { status, currentEpoch, intervalSeconds, bufferSeconds, rounds, claimableStatuses, ledgers } =\n        action.payload\n      const futureRounds: ReduxNodeRound[] = []\n      const currentRound = rounds[currentEpoch]\n\n      for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n        futureRounds.push(makeFutureRoundResponse(currentEpoch + i, currentRound.startTimestamp + intervalSeconds * i))\n      }\n\n      return {\n        ...state,\n        status,\n        currentEpoch,\n        intervalSeconds,\n        bufferSeconds,\n        claimableStatuses,\n        ledgers,\n        rounds: merge({}, rounds, makeRoundData(futureRounds)),\n      }\n    })\n\n    // Get single round\n    builder.addCase(fetchRound.fulfilled, (state, action) => {\n      state.rounds = merge({}, state.rounds, {\n        [action.payload.epoch.toString()]: action.payload,\n      })\n    })\n\n    // Get multiple rounds\n    builder.addCase(fetchRounds.fulfilled, (state, action) => {\n      state.rounds = merge({}, state.rounds, action.payload)\n    })\n\n    // Show History\n    builder.addCase(fetchHistory.pending, (state) => {\n      state.isFetchingHistory = true\n    })\n    builder.addCase(fetchHistory.rejected, (state) => {\n      state.isFetchingHistory = false\n    })\n    builder.addCase(fetchHistory.fulfilled, (state, action) => {\n      const { account, bets } = action.payload\n\n      state.isFetchingHistory = false\n      state.history[account] = bets\n    })\n  },\n})\n\n// Actions\nexport const {\n  setChartPaneState,\n  setCurrentEpoch,\n  setHistoryFilter,\n  setHistoryPaneState,\n  setPredictionStatus,\n  setLastOraclePrice,\n  markBetHistoryAsCollected,\n} = predictionsSlice.actions\n\nexport default predictionsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}