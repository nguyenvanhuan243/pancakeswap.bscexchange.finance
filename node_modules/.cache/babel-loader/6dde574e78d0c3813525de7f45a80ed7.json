{"ast":null,"code":"import _defineProperty from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useMemo}from'react';import{useSelector}from'react-redux';import{ethers}from'ethers';import{minBy,orderBy}from'lodash';import{parseBigNumberObj}from'./helpers';export var useGetRounds=function useGetRounds(){var rounds=useSelector(function(state){return state.predictions.rounds;});return Object.keys(rounds).reduce(function(accum,epoch){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},epoch,parseBigNumberObj(rounds[epoch])));},{});};export var useGetRound=function useGetRound(epoch){var round=useSelector(function(state){return state.predictions.rounds[epoch];});return parseBigNumberObj(round);};export var useGetSortedRounds=function useGetSortedRounds(){var roundData=useGetRounds();return orderBy(Object.values(roundData),['epoch'],['asc']);};export var useGetBetByEpoch=function useGetBetByEpoch(account,epoch){var bets=useSelector(function(state){return state.predictions.ledgers;});if(!bets[account]){return null;}if(!bets[account][epoch]){return null;}return parseBigNumberObj(bets[account][epoch]);};export var useGetIsClaimable=function useGetIsClaimable(epoch){var claimableStatuses=useSelector(function(state){return state.predictions.claimableStatuses;});return claimableStatuses[epoch]||false;};/**\n * Used to get the range of rounds to poll for\n */export var useGetEarliestEpoch=function useGetEarliestEpoch(){return useSelector(function(state){var earliestRound=minBy(Object.values(state.predictions.rounds),'epoch');return earliestRound===null||earliestRound===void 0?void 0:earliestRound.epoch;});};export var useIsHistoryPaneOpen=function useIsHistoryPaneOpen(){return useSelector(function(state){return state.predictions.isHistoryPaneOpen;});};export var useIsChartPaneOpen=function useIsChartPaneOpen(){return useSelector(function(state){return state.predictions.isChartPaneOpen;});};export var useGetCurrentEpoch=function useGetCurrentEpoch(){return useSelector(function(state){return state.predictions.currentEpoch;});};export var useGetIntervalSeconds=function useGetIntervalSeconds(){return useSelector(function(state){return state.predictions.intervalSeconds;});};export var useGetCurrentRound=function useGetCurrentRound(){var currentEpoch=useGetCurrentEpoch();var rounds=useGetRounds();return rounds[currentEpoch];};export var useGetPredictionsStatus=function useGetPredictionsStatus(){return useSelector(function(state){return state.predictions.status;});};export var useGetHistoryFilter=function useGetHistoryFilter(){return useSelector(function(state){return state.predictions.historyFilter;});};export var useGetMinBetAmount=function useGetMinBetAmount(){var minBetAmount=useSelector(function(state){return state.predictions.minBetAmount;});return useMemo(function(){return ethers.BigNumber.from(minBetAmount);},[minBetAmount]);};export var useGetBufferSeconds=function useGetBufferSeconds(){return useSelector(function(state){return state.predictions.bufferSeconds;});};export var useGetIsFetchingHistory=function useGetIsFetchingHistory(){return useSelector(function(state){return state.predictions.isFetchingHistory;});};export var useGetHistory=function useGetHistory(){return useSelector(function(state){return state.predictions.history;});};export var useGetHistoryByAccount=function useGetHistoryByAccount(account){var bets=useGetHistory();return bets?bets[account]:[];};export var useGetLastOraclePrice=function useGetLastOraclePrice(){var lastOraclePrice=useSelector(function(state){return state.predictions.lastOraclePrice;});return useMemo(function(){return ethers.BigNumber.from(lastOraclePrice);},[lastOraclePrice]);};/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */export var useGetCurrentRoundLockTimestamp=function useGetCurrentRoundLockTimestamp(){var currentRound=useGetCurrentRound();var intervalSeconds=useGetIntervalSeconds();if(!currentRound.lockTimestamp){return currentRound.startTimestamp+intervalSeconds;}return currentRound.lockTimestamp;};","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/state/predictions/hooks.ts"],"names":["useMemo","useSelector","ethers","minBy","orderBy","parseBigNumberObj","useGetRounds","rounds","state","predictions","Object","keys","reduce","accum","epoch","useGetRound","round","useGetSortedRounds","roundData","values","useGetBetByEpoch","account","bets","ledgers","useGetIsClaimable","claimableStatuses","useGetEarliestEpoch","earliestRound","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalSeconds","intervalSeconds","useGetCurrentRound","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetMinBetAmount","minBetAmount","BigNumber","from","useGetBufferSeconds","bufferSeconds","useGetIsFetchingHistory","isFetchingHistory","useGetHistory","history","useGetHistoryByAccount","useGetLastOraclePrice","lastOraclePrice","useGetCurrentRoundLockTimestamp","currentRound","lockTimestamp","startTimestamp"],"mappings":"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","sourcesContent":["import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\nimport { parseBigNumberObj } from './helpers'\n\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalSeconds = () => {\n  return useSelector((state: State) => state.predictions.intervalSeconds)\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetRounds()\n  return rounds[currentEpoch]\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetBufferSeconds = () => {\n  return useSelector((state: State) => state.predictions.bufferSeconds)\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets ? bets[account] : []\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */\nexport const useGetCurrentRoundLockTimestamp = () => {\n  const currentRound = useGetCurrentRound()\n  const intervalSeconds = useGetIntervalSeconds()\n\n  if (!currentRound.lockTimestamp) {\n    return currentRound.startTimestamp + intervalSeconds\n  }\n\n  return currentRound.lockTimestamp\n}\n"]},"metadata":{},"sourceType":"module"}