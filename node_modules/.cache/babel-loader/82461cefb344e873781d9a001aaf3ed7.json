{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _templateObject;import{request,gql}from'graphql-request';import{GRAPH_API_LOTTERY}from'config/constants/endpoints';import{getRoundIdsArray,fetchMultipleLotteries}from'./helpers';export var MAX_LOTTERIES_REQUEST_SIZE=100;/* eslint-disable camelcase */var applyNodeDataToLotteriesGraphResponse=function applyNodeDataToLotteriesGraphResponse(nodeData,graphResponse){//   If no graph response - return node data\nif(graphResponse.length===0){return nodeData.map(function(nodeRound){return{endTime:nodeRound.endTime,finalNumber:nodeRound.finalNumber.toString(),startTime:nodeRound.startTime,status:nodeRound.status,id:nodeRound.lotteryId.toString(),ticketPrice:nodeRound.priceTicketInCake,totalTickets:'',totalUsers:'',winningTickets:''};});}//   Else if there is a graph response - merge with node data where node data is more reliable\nvar mergedResponse=graphResponse.map(function(graphRound,index){var nodeRound=nodeData[index];// if there is node data for this index, overwrite graph data. Otherwise - return graph data.\nif(nodeRound){// if isLoading === true, there has been a node error - return graphRound\nif(!nodeRound.isLoading){return{endTime:nodeRound.endTime,finalNumber:nodeRound.finalNumber.toString(),startTime:nodeRound.startTime,status:nodeRound.status,id:graphRound.id,ticketPrice:graphRound.ticketPrice,totalTickets:graphRound.totalTickets,totalUsers:graphRound.totalUsers,winningTickets:graphRound.winningTickets};}return graphRound;}return graphRound;});return mergedResponse;};export var getGraphLotteries=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var first,skip,where,response,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:first=_args.length>0&&_args[0]!==undefined?_args[0]:MAX_LOTTERIES_REQUEST_SIZE;skip=_args.length>1&&_args[1]!==undefined?_args[1]:0;where=_args.length>2&&_args[2]!==undefined?_args[2]:{};_context.prev=3;_context.next=6;return request(GRAPH_API_LOTTERY,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n        query getLotteries($first: Int!, $skip: Int!, $where: Lottery_filter) {\\n          lotteries(first: $first, skip: $skip, where: $where, orderDirection: desc, orderBy: block) {\\n            id\\n            totalUsers\\n            totalTickets\\n            winningTickets\\n            status\\n            finalNumber\\n            startTime\\n            endTime\\n            ticketPrice\\n          }\\n        }\\n      \"]))),{skip:skip,first:first,where:where});case 6:response=_context.sent;return _context.abrupt(\"return\",response.lotteries);case 10:_context.prev=10;_context.t0=_context[\"catch\"](3);console.error(_context.t0);return _context.abrupt(\"return\",[]);case 14:case\"end\":return _context.stop();}}},_callee,null,[[3,10]]);}));return function getGraphLotteries(){return _ref.apply(this,arguments);};}();var getLotteriesData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(currentLotteryId){var idsForNodesCall,nodeData,graphResponse,mergedData;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:idsForNodesCall=getRoundIdsArray(currentLotteryId);_context2.next=3;return fetchMultipleLotteries(idsForNodesCall);case 3:nodeData=_context2.sent;_context2.next=6;return getGraphLotteries();case 6:graphResponse=_context2.sent;mergedData=applyNodeDataToLotteriesGraphResponse(nodeData,graphResponse);return _context2.abrupt(\"return\",mergedData);case 9:case\"end\":return _context2.stop();}}},_callee2);}));return function getLotteriesData(_x){return _ref2.apply(this,arguments);};}();export default getLotteriesData;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/state/lottery/getLotteriesData.ts"],"names":["request","gql","GRAPH_API_LOTTERY","getRoundIdsArray","fetchMultipleLotteries","MAX_LOTTERIES_REQUEST_SIZE","applyNodeDataToLotteriesGraphResponse","nodeData","graphResponse","length","map","nodeRound","endTime","finalNumber","toString","startTime","status","id","lotteryId","ticketPrice","priceTicketInCake","totalTickets","totalUsers","winningTickets","mergedResponse","graphRound","index","isLoading","getGraphLotteries","first","skip","where","response","lotteries","console","error","getLotteriesData","currentLotteryId","idsForNodesCall","mergedData"],"mappings":"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","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { GRAPH_API_LOTTERY } from 'config/constants/endpoints'\nimport { LotteryRoundGraphEntity, LotteryResponse } from 'state/types'\nimport { getRoundIdsArray, fetchMultipleLotteries } from './helpers'\n\nexport const MAX_LOTTERIES_REQUEST_SIZE = 100\n\n/* eslint-disable camelcase */\ntype LotteriesWhere = { id_in?: string[] }\n\nconst applyNodeDataToLotteriesGraphResponse = (\n  nodeData: LotteryResponse[],\n  graphResponse: LotteryRoundGraphEntity[],\n): LotteryRoundGraphEntity[] => {\n  //   If no graph response - return node data\n  if (graphResponse.length === 0) {\n    return nodeData.map((nodeRound) => {\n      return {\n        endTime: nodeRound.endTime,\n        finalNumber: nodeRound.finalNumber.toString(),\n        startTime: nodeRound.startTime,\n        status: nodeRound.status,\n        id: nodeRound.lotteryId.toString(),\n        ticketPrice: nodeRound.priceTicketInCake,\n        totalTickets: '',\n        totalUsers: '',\n        winningTickets: '',\n      }\n    })\n  }\n\n  //   Else if there is a graph response - merge with node data where node data is more reliable\n  const mergedResponse = graphResponse.map((graphRound, index) => {\n    const nodeRound = nodeData[index]\n    // if there is node data for this index, overwrite graph data. Otherwise - return graph data.\n    if (nodeRound) {\n      // if isLoading === true, there has been a node error - return graphRound\n      if (!nodeRound.isLoading) {\n        return {\n          endTime: nodeRound.endTime,\n          finalNumber: nodeRound.finalNumber.toString(),\n          startTime: nodeRound.startTime,\n          status: nodeRound.status,\n          id: graphRound.id,\n          ticketPrice: graphRound.ticketPrice,\n          totalTickets: graphRound.totalTickets,\n          totalUsers: graphRound.totalUsers,\n          winningTickets: graphRound.winningTickets,\n        }\n      }\n      return graphRound\n    }\n    return graphRound\n  })\n  return mergedResponse\n}\n\nexport const getGraphLotteries = async (\n  first = MAX_LOTTERIES_REQUEST_SIZE,\n  skip = 0,\n  where: LotteriesWhere = {},\n): Promise<LotteryRoundGraphEntity[]> => {\n  try {\n    const response = await request(\n      GRAPH_API_LOTTERY,\n      gql`\n        query getLotteries($first: Int!, $skip: Int!, $where: Lottery_filter) {\n          lotteries(first: $first, skip: $skip, where: $where, orderDirection: desc, orderBy: block) {\n            id\n            totalUsers\n            totalTickets\n            winningTickets\n            status\n            finalNumber\n            startTime\n            endTime\n            ticketPrice\n          }\n        }\n      `,\n      { skip, first, where },\n    )\n    return response.lotteries\n  } catch (error) {\n    console.error(error)\n    return []\n  }\n}\n\nconst getLotteriesData = async (currentLotteryId: string): Promise<LotteryRoundGraphEntity[]> => {\n  const idsForNodesCall = getRoundIdsArray(currentLotteryId)\n  const nodeData = await fetchMultipleLotteries(idsForNodesCall)\n  const graphResponse = await getGraphLotteries()\n  const mergedData = applyNodeDataToLotteriesGraphResponse(nodeData, graphResponse)\n  return mergedData\n}\n\nexport default getLotteriesData\n"]},"metadata":{},"sourceType":"module"}