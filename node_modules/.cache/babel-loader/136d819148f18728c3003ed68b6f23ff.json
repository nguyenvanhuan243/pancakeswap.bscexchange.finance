{"ast":null,"code":"import _slicedToArray from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React,{useState,useEffect,useRef,useCallback}from'react';import styled from'styled-components';import{Flex,Box,SwapVertIcon,IconButton}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import useIntersectionObserver from'hooks/useIntersectionObserver';import useGetTopFarmsByApr from'views/Home/hooks/useGetTopFarmsByApr';import useGetTopPoolsByApr from'views/Home/hooks/useGetTopPoolsByApr';import TopFarmPool from'./TopFarmPool';import RowHeading from'./RowHeading';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Grid=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: repeat(2, auto);\\n\\n  \",\" {\\n    grid-gap: 16px;\\n    grid-template-columns: repeat(5, auto);\\n  }\\n\\n  \",\" {\\n    grid-gap: 32px;\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.mediaQueries.sm;},function(_ref2){var theme=_ref2.theme;return theme.mediaQueries.md;});var FarmsPoolsRow=function FarmsPoolsRow(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showFarms=_useState2[0],setShowFarms=_useState2[1];var _useTranslation=useTranslation(),t=_useTranslation.t;var _useIntersectionObser=useIntersectionObserver(),observerRef=_useIntersectionObser.observerRef,isIntersecting=_useIntersectionObser.isIntersecting;var _useGetTopFarmsByApr=useGetTopFarmsByApr(isIntersecting),topFarms=_useGetTopFarmsByApr.topFarms;var _useGetTopPoolsByApr=useGetTopPoolsByApr(isIntersecting),topPools=_useGetTopPoolsByApr.topPools;var timer=useRef(null);var isLoaded=topFarms[0]&&topPools[0];var startTimer=useCallback(function(){timer.current=setInterval(function(){setShowFarms(function(prev){return!prev;});},6000);},[timer]);useEffect(function(){if(isLoaded){startTimer();}return function(){clearInterval(timer.current);};},[timer,isLoaded,startTimer]);var getPoolText=function getPoolText(pool){if(pool.isAutoVault){return t('Auto CAKE');}if(pool.sousId===0){return t('Manual CAKE');}return t('Stake %stakingSymbol% - Earn %earningSymbol%',{earningSymbol:pool.earningToken.symbol,stakingSymbol:pool.stakingToken.symbol});};return/*#__PURE__*/_jsx(\"div\",{ref:observerRef,children:/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",mt:\"24px\",children:[/*#__PURE__*/_jsxs(Flex,{mb:\"24px\",children:[/*#__PURE__*/_jsx(RowHeading,{text:showFarms?t('Top Farms'):t('Top Syrup Pools')}),/*#__PURE__*/_jsx(IconButton,{variant:\"text\",height:\"100%\",width:\"auto\",onClick:function onClick(){setShowFarms(function(prev){return!prev;});clearInterval(timer.current);startTimer();},children:/*#__PURE__*/_jsx(SwapVertIcon,{height:\"24px\",width:\"24px\",color:\"textSubtle\"})})]}),/*#__PURE__*/_jsxs(Box,{height:['240px',null,'80px'],children:[/*#__PURE__*/_jsx(Grid,{children:topFarms.map(function(topFarm,index){return/*#__PURE__*/_jsx(TopFarmPool// eslint-disable-next-line react/no-array-index-key\n,{title:topFarm===null||topFarm===void 0?void 0:topFarm.lpSymbol,percentage:(topFarm===null||topFarm===void 0?void 0:topFarm.apr)+(topFarm===null||topFarm===void 0?void 0:topFarm.lpRewardsApr),index:index,visible:showFarms},index);})}),/*#__PURE__*/_jsx(Grid,{children:topPools.map(function(topPool,index){return/*#__PURE__*/_jsx(TopFarmPool// eslint-disable-next-line react/no-array-index-key\n,{title:topPool&&getPoolText(topPool),percentage:topPool===null||topPool===void 0?void 0:topPool.apr,index:index,visible:!showFarms},index);})})]})]})});};export default FarmsPoolsRow;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Home/components/FarmsPoolsRow/index.tsx"],"names":["React","useState","useEffect","useRef","useCallback","styled","Flex","Box","SwapVertIcon","IconButton","useTranslation","useIntersectionObserver","useGetTopFarmsByApr","useGetTopPoolsByApr","TopFarmPool","RowHeading","Grid","div","theme","mediaQueries","sm","md","FarmsPoolsRow","showFarms","setShowFarms","t","observerRef","isIntersecting","topFarms","topPools","timer","isLoaded","startTimer","current","setInterval","prev","clearInterval","getPoolText","pool","isAutoVault","sousId","earningSymbol","earningToken","symbol","stakingSymbol","stakingToken","map","topFarm","index","lpSymbol","apr","lpRewardsApr","topPool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, SwapVertIcon, IconButton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport useGetTopFarmsByApr from 'views/Home/hooks/useGetTopFarmsByApr'\nimport useGetTopPoolsByApr from 'views/Home/hooks/useGetTopPoolsByApr'\nimport TopFarmPool from './TopFarmPool'\nimport RowHeading from './RowHeading'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, auto);\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-gap: 16px;\n    grid-template-columns: repeat(5, auto);\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-gap: 32px;\n  }\n`\n\nconst FarmsPoolsRow = () => {\n  const [showFarms, setShowFarms] = useState(false)\n  const { t } = useTranslation()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const { topFarms } = useGetTopFarmsByApr(isIntersecting)\n  const { topPools } = useGetTopPoolsByApr(isIntersecting)\n\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const isLoaded = topFarms[0] && topPools[0]\n\n  const startTimer = useCallback(() => {\n    timer.current = setInterval(() => {\n      setShowFarms((prev) => !prev)\n    }, 6000)\n  }, [timer])\n\n  useEffect(() => {\n    if (isLoaded) {\n      startTimer()\n    }\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [timer, isLoaded, startTimer])\n\n  const getPoolText = (pool: Pool) => {\n    if (pool.isAutoVault) {\n      return t('Auto CAKE')\n    }\n\n    if (pool.sousId === 0) {\n      return t('Manual CAKE')\n    }\n\n    return t('Stake %stakingSymbol% - Earn %earningSymbol%', {\n      earningSymbol: pool.earningToken.symbol,\n      stakingSymbol: pool.stakingToken.symbol,\n    })\n  }\n\n  return (\n    <div ref={observerRef}>\n      <Flex flexDirection=\"column\" mt=\"24px\">\n        <Flex mb=\"24px\">\n          <RowHeading text={showFarms ? t('Top Farms') : t('Top Syrup Pools')} />\n          <IconButton\n            variant=\"text\"\n            height=\"100%\"\n            width=\"auto\"\n            onClick={() => {\n              setShowFarms((prev) => !prev)\n              clearInterval(timer.current)\n              startTimer()\n            }}\n          >\n            <SwapVertIcon height=\"24px\" width=\"24px\" color=\"textSubtle\" />\n          </IconButton>\n        </Flex>\n        <Box height={['240px', null, '80px']}>\n          <Grid>\n            {topFarms.map((topFarm, index) => (\n              <TopFarmPool\n                // eslint-disable-next-line react/no-array-index-key\n                key={index}\n                title={topFarm?.lpSymbol}\n                percentage={topFarm?.apr + topFarm?.lpRewardsApr}\n                index={index}\n                visible={showFarms}\n              />\n            ))}\n          </Grid>\n          <Grid>\n            {topPools.map((topPool, index) => (\n              <TopFarmPool\n                // eslint-disable-next-line react/no-array-index-key\n                key={index}\n                title={topPool && getPoolText(topPool)}\n                percentage={topPool?.apr}\n                index={index}\n                visible={!showFarms}\n              />\n            ))}\n          </Grid>\n        </Box>\n      </Flex>\n    </div>\n  )\n}\n\nexport default FarmsPoolsRow\n"]},"metadata":{},"sourceType":"module"}