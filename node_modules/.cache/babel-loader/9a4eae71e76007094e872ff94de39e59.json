{"ast":null,"code":"import _objectSpread from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"totalStaked\",\"stakingLimit\",\"userData\"];import BigNumber from'bignumber.js';import{getAddress}from'utils/addressHelpers';import{BIG_ZERO}from'utils/bigNumber';export var transformUserData=function transformUserData(userData){return{allowance:userData?new BigNumber(userData.allowance):BIG_ZERO,stakingTokenBalance:userData?new BigNumber(userData.stakingTokenBalance):BIG_ZERO,stakedBalance:userData?new BigNumber(userData.stakedBalance):BIG_ZERO,pendingReward:userData?new BigNumber(userData.pendingReward):BIG_ZERO};};export var transformPool=function transformPool(pool){var totalStaked=pool.totalStaked,stakingLimit=pool.stakingLimit,userData=pool.userData,rest=_objectWithoutProperties(pool,_excluded);return _objectSpread(_objectSpread({},rest),{},{userData:transformUserData(userData),totalStaked:new BigNumber(totalStaked),stakingLimit:new BigNumber(stakingLimit)});};export var getTokenPricesFromFarm=function getTokenPricesFromFarm(farms){return farms.reduce(function(prices,farm){var quoteTokenAddress=getAddress(farm.quoteToken.address).toLocaleLowerCase();var tokenAddress=getAddress(farm.token.address).toLocaleLowerCase();/* eslint-disable no-param-reassign */if(!prices[quoteTokenAddress]){prices[quoteTokenAddress]=new BigNumber(farm.quoteToken.busdPrice).toNumber();}if(!prices[tokenAddress]){prices[tokenAddress]=new BigNumber(farm.token.busdPrice).toNumber();}/* eslint-enable no-param-reassign */return prices;},{});};","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/state/pools/helpers.ts"],"names":["BigNumber","getAddress","BIG_ZERO","transformUserData","userData","allowance","stakingTokenBalance","stakedBalance","pendingReward","transformPool","pool","totalStaked","stakingLimit","rest","getTokenPricesFromFarm","farms","reduce","prices","farm","quoteTokenAddress","quoteToken","address","toLocaleLowerCase","tokenAddress","token","busdPrice","toNumber"],"mappings":"2ZAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CAEA,OAASC,UAAT,KAA2B,sBAA3B,CACA,OAASC,QAAT,KAAyB,iBAAzB,CAWA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,QAAD,CAAwB,CACvD,MAAO,CACLC,SAAS,CAAED,QAAQ,CAAG,GAAIJ,CAAAA,SAAJ,CAAcI,QAAQ,CAACC,SAAvB,CAAH,CAAuCH,QADrD,CAELI,mBAAmB,CAAEF,QAAQ,CAAG,GAAIJ,CAAAA,SAAJ,CAAcI,QAAQ,CAACE,mBAAvB,CAAH,CAAiDJ,QAFzE,CAGLK,aAAa,CAAEH,QAAQ,CAAG,GAAIJ,CAAAA,SAAJ,CAAcI,QAAQ,CAACG,aAAvB,CAAH,CAA2CL,QAH7D,CAILM,aAAa,CAAEJ,QAAQ,CAAG,GAAIJ,CAAAA,SAAJ,CAAcI,QAAQ,CAACI,aAAvB,CAAH,CAA2CN,QAJ7D,CAAP,CAMD,CAPM,CASP,MAAO,IAAMO,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,IAAD,CAAsB,CACjD,GAAQC,CAAAA,WAAR,CAAyDD,IAAzD,CAAQC,WAAR,CAAqBC,YAArB,CAAyDF,IAAzD,CAAqBE,YAArB,CAAmCR,QAAnC,CAAyDM,IAAzD,CAAmCN,QAAnC,CAAgDS,IAAhD,0BAAyDH,IAAzD,YAEA,sCACKG,IADL,MAEET,QAAQ,CAAED,iBAAiB,CAACC,QAAD,CAF7B,CAGEO,WAAW,CAAE,GAAIX,CAAAA,SAAJ,CAAcW,WAAd,CAHf,CAIEC,YAAY,CAAE,GAAIZ,CAAAA,SAAJ,CAAcY,YAAd,CAJhB,GAMD,CATM,CAWP,MAAO,IAAME,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,KAAD,CAAmB,CACvD,MAAOA,CAAAA,KAAK,CAACC,MAAN,CAAa,SAACC,MAAD,CAASC,IAAT,CAAkB,CACpC,GAAMC,CAAAA,iBAAiB,CAAGlB,UAAU,CAACiB,IAAI,CAACE,UAAL,CAAgBC,OAAjB,CAAV,CAAoCC,iBAApC,EAA1B,CACA,GAAMC,CAAAA,YAAY,CAAGtB,UAAU,CAACiB,IAAI,CAACM,KAAL,CAAWH,OAAZ,CAAV,CAA+BC,iBAA/B,EAArB,CACA,sCACA,GAAI,CAACL,MAAM,CAACE,iBAAD,CAAX,CAAgC,CAC9BF,MAAM,CAACE,iBAAD,CAAN,CAA4B,GAAInB,CAAAA,SAAJ,CAAckB,IAAI,CAACE,UAAL,CAAgBK,SAA9B,EAAyCC,QAAzC,EAA5B,CACD,CACD,GAAI,CAACT,MAAM,CAACM,YAAD,CAAX,CAA2B,CACzBN,MAAM,CAACM,YAAD,CAAN,CAAuB,GAAIvB,CAAAA,SAAJ,CAAckB,IAAI,CAACM,KAAL,CAAWC,SAAzB,EAAoCC,QAApC,EAAvB,CACD,CACD,qCACA,MAAOT,CAAAA,MAAP,CACD,CAZM,CAYJ,EAZI,CAAP,CAaD,CAdM","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { Farm, Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\ntype UserData =\n  | Pool['userData']\n  | {\n      allowance: number | string\n      stakingTokenBalance: number | string\n      stakedBalance: number | string\n      pendingReward: number | string\n    }\n\nexport const transformUserData = (userData: UserData) => {\n  return {\n    allowance: userData ? new BigNumber(userData.allowance) : BIG_ZERO,\n    stakingTokenBalance: userData ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO,\n    stakedBalance: userData ? new BigNumber(userData.stakedBalance) : BIG_ZERO,\n    pendingReward: userData ? new BigNumber(userData.pendingReward) : BIG_ZERO,\n  }\n}\n\nexport const transformPool = (pool: Pool): Pool => {\n  const { totalStaked, stakingLimit, userData, ...rest } = pool\n\n  return {\n    ...rest,\n    userData: transformUserData(userData),\n    totalStaked: new BigNumber(totalStaked),\n    stakingLimit: new BigNumber(stakingLimit),\n  } as Pool\n}\n\nexport const getTokenPricesFromFarm = (farms: Farm[]) => {\n  return farms.reduce((prices, farm) => {\n    const quoteTokenAddress = getAddress(farm.quoteToken.address).toLocaleLowerCase()\n    const tokenAddress = getAddress(farm.token.address).toLocaleLowerCase()\n    /* eslint-disable no-param-reassign */\n    if (!prices[quoteTokenAddress]) {\n      prices[quoteTokenAddress] = new BigNumber(farm.quoteToken.busdPrice).toNumber()\n    }\n    if (!prices[tokenAddress]) {\n      prices[tokenAddress] = new BigNumber(farm.token.busdPrice).toNumber()\n    }\n    /* eslint-enable no-param-reassign */\n    return prices\n  }, {})\n}\n"]},"metadata":{},"sourceType":"module"}