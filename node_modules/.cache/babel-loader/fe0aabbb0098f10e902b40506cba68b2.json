{"ast":null,"code":"import _objectSpread from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"nft\"];import React,{useEffect,useState}from'react';import{useWeb3React}from'@web3-react/core';import omit from'lodash/omit';import{useAppDispatch}from'state';import{fetchWalletNfts}from'state/collectibles';import{useBunnySpecialLotteryContract}from'hooks/useContract';import NftCard from'./index';import useBunnySpecialLottery from'../../hooks/useBunnySpecialLottery';import{jsx as _jsx}from\"react/jsx-runtime\";var LotteryNftCard=function LotteryNftCard(_ref){var nft=_ref.nft,props=_objectWithoutProperties(_ref,_excluded);var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var dispatch=useAppDispatch();var lotteryNftContract=useBunnySpecialLotteryContract();var identifier=nft.identifier;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isClaimable=_useState2[0],setIsClaimable=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),mintNFTData=_useState4[0],setMintNFTData=_useState4[1];var _useBunnySpecialLotte=useBunnySpecialLottery(),canClaimBaller=_useBunnySpecialLotte.canClaimBaller,canClaimLottie=_useBunnySpecialLotte.canClaimLottie,canClaimLucky=_useBunnySpecialLotte.canClaimLucky;useEffect(function(){var canClaimMap={lottie:canClaimLottie,lucky:canClaimLucky,baller:canClaimBaller};var checkCanClaim=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$canClaimMap$id,canClaim,mintData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return canClaimMap[identifier]();case 2:_yield$canClaimMap$id=_context.sent;canClaim=_yield$canClaimMap$id.canClaim;mintData=_yield$canClaimMap$id.mintData;setIsClaimable(canClaim);setMintNFTData(mintData);case 7:case\"end\":return _context.stop();}}},_callee);}));return function checkCanClaim(){return _ref2.apply(this,arguments);};}();if(account){checkCanClaim();}},[account,canClaimBaller,canClaimLottie,canClaimLucky,identifier]);var handleClaim=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var bunnyId,lotteryId,cursor,response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:bunnyId=mintNFTData.bunnyId,lotteryId=mintNFTData.lotteryId,cursor=mintNFTData.cursor;_context2.next=3;return lotteryNftContract.mintNFT(bunnyId,lotteryId,cursor);case 3:response=_context2.sent;return _context2.abrupt(\"return\",response);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function handleClaim(){return _ref3.apply(this,arguments);};}();var LotteryNftRefresh=function LotteryNftRefresh(){dispatch(fetchWalletNfts(account));setIsClaimable(false);};// Don't pass the <NftList> 'refresh' function to the NftCard\nvar propsWithoutRefresh=omit(props,'refresh');return/*#__PURE__*/_jsx(NftCard,_objectSpread({nft:nft,canClaim:isClaimable,onClaim:handleClaim,refresh:LotteryNftRefresh},propsWithoutRefresh));};export default LotteryNftCard;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Collectibles/components/NftCard/LotteryNftCard.tsx"],"names":["React","useEffect","useState","useWeb3React","omit","useAppDispatch","fetchWalletNfts","useBunnySpecialLotteryContract","NftCard","useBunnySpecialLottery","LotteryNftCard","nft","props","account","dispatch","lotteryNftContract","identifier","isClaimable","setIsClaimable","mintNFTData","setMintNFTData","canClaimBaller","canClaimLottie","canClaimLucky","canClaimMap","lottie","lucky","baller","checkCanClaim","canClaim","mintData","handleClaim","bunnyId","lotteryId","cursor","mintNFT","response","LotteryNftRefresh","propsWithoutRefresh"],"mappings":"82BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,MAAOC,CAAAA,IAAP,KAAiB,aAAjB,CAEA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,eAAT,KAAgC,oBAAhC,CACA,OAASC,8BAAT,KAA+C,mBAA/C,CAEA,MAAOC,CAAAA,OAAP,KAAsC,SAAtC,CACA,MAAOC,CAAAA,sBAAP,KAAmC,oCAAnC,C,2CAEA,GAAMC,CAAAA,cAAsC,CAAG,QAAzCA,CAAAA,cAAyC,MAAuB,IAApBC,CAAAA,GAAoB,MAApBA,GAAoB,CAAZC,KAAY,0CACpE,kBAAoBT,YAAY,EAAhC,CAAQU,OAAR,eAAQA,OAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGT,cAAc,EAA/B,CACA,GAAMU,CAAAA,kBAAkB,CAAGR,8BAA8B,EAAzD,CACA,GAAQS,CAAAA,UAAR,CAAuBL,GAAvB,CAAQK,UAAR,CACA,cAAsCd,QAAQ,CAAC,KAAD,CAA9C,wCAAOe,WAAP,eAAoBC,cAApB,eACA,eAAsChB,QAAQ,CAAqB,IAArB,CAA9C,yCAAOiB,WAAP,eAAoBC,cAApB,eACA,0BAA0DX,sBAAsB,EAAhF,CAAQY,cAAR,uBAAQA,cAAR,CAAwBC,cAAxB,uBAAwBA,cAAxB,CAAwCC,aAAxC,uBAAwCA,aAAxC,CAEAtB,SAAS,CAAC,UAAM,CACd,GAAMuB,CAAAA,WAAW,CAAG,CAClBC,MAAM,CAAEH,cADU,CAElBI,KAAK,CAAEH,aAFW,CAGlBI,MAAM,CAAEN,cAHU,CAApB,CAMA,GAAMO,CAAAA,aAAa,2FAAG,qMACiBJ,CAAAA,WAAW,CAACR,UAAD,CAAX,EADjB,4CACZa,QADY,uBACZA,QADY,CACFC,QADE,uBACFA,QADE,CAEpBZ,cAAc,CAACW,QAAD,CAAd,CACAT,cAAc,CAACU,QAAD,CAAd,CAHoB,sDAAH,kBAAbF,CAAAA,aAAa,2CAAnB,CAMA,GAAIf,OAAJ,CAAa,CACXe,aAAa,GACd,CACF,CAhBQ,CAgBN,CAACf,OAAD,CAAUQ,cAAV,CAA0BC,cAA1B,CAA0CC,aAA1C,CAAyDP,UAAzD,CAhBM,CAAT,CAkBA,GAAMe,CAAAA,WAAW,2FAAG,8KACVC,OADU,CACqBb,WADrB,CACVa,OADU,CACDC,SADC,CACqBd,WADrB,CACDc,SADC,CACUC,MADV,CACqBf,WADrB,CACUe,MADV,wBAE2CnB,CAAAA,kBAAkB,CAACoB,OAAnB,CAA2BH,OAA3B,CAAoCC,SAApC,CAA+CC,MAA/C,CAF3C,QAEZE,QAFY,iDAGXA,QAHW,0DAAH,kBAAXL,CAAAA,WAAW,2CAAjB,CAMA,GAAMM,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9BvB,QAAQ,CAACR,eAAe,CAACO,OAAD,CAAhB,CAAR,CACAK,cAAc,CAAC,KAAD,CAAd,CACD,CAHD,CAKA;AACA,GAAMoB,CAAAA,mBAAmB,CAAGlC,IAAI,CAACQ,KAAD,CAAQ,SAAR,CAAhC,CAEA,mBACE,KAAC,OAAD,gBACE,GAAG,CAAED,GADP,CAEE,QAAQ,CAAEM,WAFZ,CAGE,OAAO,CAAEc,WAHX,CAIE,OAAO,CAAEM,iBAJX,EAKMC,mBALN,EADF,CASD,CAlDD,CAoDA,cAAe5B,CAAAA,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport omit from 'lodash/omit'\nimport { ethers } from 'ethers'\nimport { useAppDispatch } from 'state'\nimport { fetchWalletNfts } from 'state/collectibles'\nimport { useBunnySpecialLotteryContract } from 'hooks/useContract'\nimport { LotteryNftMintData } from 'views/Collectibles/helpers'\nimport NftCard, { NftCardProps } from './index'\nimport useBunnySpecialLottery from '../../hooks/useBunnySpecialLottery'\n\nconst LotteryNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const lotteryNftContract = useBunnySpecialLotteryContract()\n  const { identifier } = nft\n  const [isClaimable, setIsClaimable] = useState(false)\n  const [mintNFTData, setMintNFTData] = useState<LotteryNftMintData>(null)\n  const { canClaimBaller, canClaimLottie, canClaimLucky } = useBunnySpecialLottery()\n\n  useEffect(() => {\n    const canClaimMap = {\n      lottie: canClaimLottie,\n      lucky: canClaimLucky,\n      baller: canClaimBaller,\n    }\n\n    const checkCanClaim = async () => {\n      const { canClaim, mintData } = await canClaimMap[identifier]()\n      setIsClaimable(canClaim)\n      setMintNFTData(mintData)\n    }\n\n    if (account) {\n      checkCanClaim()\n    }\n  }, [account, canClaimBaller, canClaimLottie, canClaimLucky, identifier])\n\n  const handleClaim = async () => {\n    const { bunnyId, lotteryId, cursor } = mintNFTData\n    const response: ethers.providers.TransactionResponse = await lotteryNftContract.mintNFT(bunnyId, lotteryId, cursor)\n    return response\n  }\n\n  const LotteryNftRefresh = () => {\n    dispatch(fetchWalletNfts(account))\n    setIsClaimable(false)\n  }\n\n  // Don't pass the <NftList> 'refresh' function to the NftCard\n  const propsWithoutRefresh = omit(props, 'refresh')\n\n  return (\n    <NftCard\n      nft={nft}\n      canClaim={isClaimable}\n      onClaim={handleClaim}\n      refresh={LotteryNftRefresh}\n      {...propsWithoutRefresh}\n    />\n  )\n}\n\nexport default LotteryNftCard\n"]},"metadata":{},"sourceType":"module"}