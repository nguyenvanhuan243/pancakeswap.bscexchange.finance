{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenvanhuan243/Documents/pancake-frontend/src/views/Profile/components/ClaimGiftModal.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Modal, Text, Button, AutoRenewIcon } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport useToast from 'hooks/useToast';\nimport { useClaimRefundContract } from 'hooks/useContract';\nimport { useTranslation } from 'contexts/Localization';\nimport { getClaimRefundContract } from 'utils/contractHelpers';\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const useCanClaim = () => {\n  _s();\n\n  const [canClaim, setCanClaim] = useState(false);\n  const [refresh, setRefresh] = useState(1);\n  const {\n    account\n  } = useWeb3React();\n  const checkClaimStatus = useCallback(() => {\n    setRefresh(prevRefresh => prevRefresh + 1);\n  }, [setRefresh]);\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const claimRefundContract = getClaimRefundContract();\n\n      try {\n        const walletCanClaim = await claimRefundContract.canClaim(account);\n        setCanClaim(walletCanClaim);\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    if (account) {\n      fetchClaimStatus();\n    }\n  }, [account, refresh, setCanClaim]);\n  return {\n    canClaim,\n    checkClaimStatus\n  };\n};\n\n_s(useCanClaim, \"58e0GTPAd6pKEkkvn0TNBZNJ8uI=\", false, function () {\n  return [useWeb3React];\n});\n\nconst ClaimGift = ({\n  onSuccess,\n  onDismiss\n}) => {\n  _s2();\n\n  const [isConfirming, setIsConfirming] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const {\n    canClaim\n  } = useCanClaim();\n  const claimRefundContract = useClaimRefundContract();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n\n  const handleClick = async () => {\n    const tx = await callWithGasPrice(claimRefundContract, 'getCakeBack');\n    setIsConfirming(true);\n    const receipt = await tx.wait();\n\n    if (receipt.status) {\n      toastSuccess(t('Success!'));\n      onSuccess();\n      onDismiss();\n    } else {\n      setIsConfirming(false);\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Claim your Gift!'),\n    onDismiss: onDismiss,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '640px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        children: t('Thank you for being a day-one user of Pancake Profiles!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        mb: \"8px\",\n        children: t(\"If you haven't already noticed, we made a mistake and the starter bunny you chose got mixed up and changed into another bunny. Oops!\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        children: t('To make it up to you, we’ll refund you the full 4 CAKE it cost to make your bunny.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        mb: \"8px\",\n        children: t('We’re also preparing an all-new collectible for you to claim (for free!) in the near future.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        mb: \"24px\",\n        children: t('Once you claim the refund, you can make another account with another wallet, mint a new bunny, and send it to your main account via the NFT page.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        endIcon: isConfirming ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n          spin: true,\n          color: \"currentColor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 35\n        }, this) : null,\n        isLoading: isConfirming,\n        onClick: handleClick,\n        disabled: !canClaim,\n        children: t('Claim Your CAKE')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ClaimGift, \"Odsbt9rs4sXadNUa3/TuIvcPr7s=\", false, function () {\n  return [useTranslation, useCanClaim, useClaimRefundContract, useToast, useCallWithGasPrice];\n});\n\n_c = ClaimGift;\nexport default ClaimGift;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimGift\");","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/views/Profile/components/ClaimGiftModal.tsx"],"names":["React","useCallback","useEffect","useState","Modal","Text","Button","AutoRenewIcon","useWeb3React","useToast","useClaimRefundContract","useTranslation","getClaimRefundContract","useCallWithGasPrice","useCanClaim","canClaim","setCanClaim","refresh","setRefresh","account","checkClaimStatus","prevRefresh","fetchClaimStatus","claimRefundContract","walletCanClaim","e","console","error","ClaimGift","onSuccess","onDismiss","isConfirming","setIsConfirming","t","toastSuccess","toastError","callWithGasPrice","handleClick","tx","receipt","wait","status","maxWidth"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAA0CC,MAA1C,EAAkDC,aAAlD,QAAuE,oBAAvE;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,sBAAT,QAAuC,mBAAvC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,sBAAT,QAAuC,uBAAvC;AACA,SAASC,mBAAT,QAAoC,2BAApC;;AAMA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAcX,YAAY,EAAhC;AAEA,QAAMY,gBAAgB,GAAGnB,WAAW,CAAC,MAAM;AACzCiB,IAAAA,UAAU,CAAEG,WAAD,IAAiBA,WAAW,GAAG,CAAhC,CAAV;AACD,GAFmC,EAEjC,CAACH,UAAD,CAFiC,CAApC;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,gBAAgB,GAAG,YAAY;AACnC,YAAMC,mBAAmB,GAAGX,sBAAsB,EAAlD;;AACA,UAAI;AACF,cAAMY,cAAc,GAAG,MAAMD,mBAAmB,CAACR,QAApB,CAA6BI,OAA7B,CAA7B;AACAH,QAAAA,WAAW,CAACQ,cAAD,CAAX;AACD,OAHD,CAGE,OAAOC,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,KARD;;AAUA,QAAIN,OAAJ,EAAa;AACXG,MAAAA,gBAAgB;AACjB;AACF,GAdQ,EAcN,CAACH,OAAD,EAAUF,OAAV,EAAmBD,WAAnB,CAdM,CAAT;AAgBA,SAAO;AAAED,IAAAA,QAAF;AAAYK,IAAAA;AAAZ,GAAP;AACD,CA1BM;;GAAMN,W;UAGSN,Y;;;AAyBtB,MAAMoB,SAAmC,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA8B;AAAA;;AACxE,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkC7B,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAE8B,IAAAA;AAAF,MAAQtB,cAAc,EAA5B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAeD,WAAW,EAAhC;AACA,QAAMS,mBAAmB,GAAGb,sBAAsB,EAAlD;AACA,QAAM;AAAEwB,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA+B1B,QAAQ,EAA7C;AACA,QAAM;AAAE2B,IAAAA;AAAF,MAAuBvB,mBAAmB,EAAhD;;AAEA,QAAMwB,WAAW,GAAG,YAAY;AAC9B,UAAMC,EAAE,GAAG,MAAMF,gBAAgB,CAACb,mBAAD,EAAsB,aAAtB,CAAjC;AACAS,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA,UAAMO,OAAO,GAAG,MAAMD,EAAE,CAACE,IAAH,EAAtB;;AACA,QAAID,OAAO,CAACE,MAAZ,EAAoB;AAClBP,MAAAA,YAAY,CAACD,CAAC,CAAC,UAAD,CAAF,CAAZ;AACAJ,MAAAA,SAAS;AACTC,MAAAA,SAAS;AACV,KAJD,MAIO;AACLE,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAG,MAAAA,UAAU,CAACF,CAAC,CAAC,OAAD,CAAF,EAAaA,CAAC,CAAC,oFAAD,CAAd,CAAV;AACD;AACF,GAZD;;AAcA,sBACE,QAAC,KAAD;AAAO,IAAA,KAAK,EAAEA,CAAC,CAAC,kBAAD,CAAf;AAAqC,IAAA,SAAS,EAAEH,SAAhD;AAAA,2BACE;AAAK,MAAA,KAAK,EAAE;AAAEY,QAAAA,QAAQ,EAAE;AAAZ,OAAZ;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAA,kBAAcT,CAAC,CAAC,yDAAD;AAAf;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAa,QAAA,EAAE,EAAC,KAAhB;AAAA,kBACGA,CAAC,CACA,sIADA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAA,kBAAcA,CAAC,CAAC,oFAAD;AAAf;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAa,QAAA,EAAE,EAAC,KAAhB;AAAA,kBACGA,CAAC,CAAC,8FAAD;AADJ;AAAA;AAAA;AAAA;AAAA,cARF,eAWE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAa,QAAA,EAAE,EAAC,MAAhB;AAAA,kBACGA,CAAC,CACA,mJADA;AADJ;AAAA;AAAA;AAAA;AAAA,cAXF,eAgBE,QAAC,MAAD;AACE,QAAA,OAAO,EAAEF,YAAY,gBAAG,QAAC,aAAD;AAAe,UAAA,IAAI,MAAnB;AAAoB,UAAA,KAAK,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAAH,GAAiD,IADxE;AAEE,QAAA,SAAS,EAAEA,YAFb;AAGE,QAAA,OAAO,EAAEM,WAHX;AAIE,QAAA,QAAQ,EAAE,CAACtB,QAJb;AAAA,kBAMGkB,CAAC,CAAC,iBAAD;AANJ;AAAA;AAAA;AAAA;AAAA,cAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAnDD;;IAAML,S;UAEUjB,c,EACOG,W,EACOJ,sB,EACSD,Q,EACRI,mB;;;KANzBe,S;AAqDN,eAAeA,SAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { Modal, Text, InjectedModalProps, Button, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useToast from 'hooks/useToast'\nimport { useClaimRefundContract } from 'hooks/useContract'\nimport { useTranslation } from 'contexts/Localization'\nimport { getClaimRefundContract } from 'utils/contractHelpers'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\ninterface ClaimGiftProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nexport const useCanClaim = () => {\n  const [canClaim, setCanClaim] = useState(false)\n  const [refresh, setRefresh] = useState(1)\n  const { account } = useWeb3React()\n\n  const checkClaimStatus = useCallback(() => {\n    setRefresh((prevRefresh) => prevRefresh + 1)\n  }, [setRefresh])\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const claimRefundContract = getClaimRefundContract()\n      try {\n        const walletCanClaim = await claimRefundContract.canClaim(account)\n        setCanClaim(walletCanClaim)\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, refresh, setCanClaim])\n\n  return { canClaim, checkClaimStatus }\n}\n\nconst ClaimGift: React.FC<ClaimGiftProps> = ({ onSuccess, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { t } = useTranslation()\n  const { canClaim } = useCanClaim()\n  const claimRefundContract = useClaimRefundContract()\n  const { toastSuccess, toastError } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleClick = async () => {\n    const tx = await callWithGasPrice(claimRefundContract, 'getCakeBack')\n    setIsConfirming(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('Success!'))\n      onSuccess()\n      onDismiss()\n    } else {\n      setIsConfirming(false)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    }\n  }\n\n  return (\n    <Modal title={t('Claim your Gift!')} onDismiss={onDismiss}>\n      <div style={{ maxWidth: '640px' }}>\n        <Text as=\"p\">{t('Thank you for being a day-one user of Pancake Profiles!')}</Text>\n        <Text as=\"p\" mb=\"8px\">\n          {t(\n            \"If you haven't already noticed, we made a mistake and the starter bunny you chose got mixed up and changed into another bunny. Oops!\",\n          )}\n        </Text>\n        <Text as=\"p\">{t('To make it up to you, we’ll refund you the full 4 CAKE it cost to make your bunny.')}</Text>\n        <Text as=\"p\" mb=\"8px\">\n          {t('We’re also preparing an all-new collectible for you to claim (for free!) in the near future.')}\n        </Text>\n        <Text as=\"p\" mb=\"24px\">\n          {t(\n            'Once you claim the refund, you can make another account with another wallet, mint a new bunny, and send it to your main account via the NFT page.',\n          )}\n        </Text>\n        <Button\n          endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          isLoading={isConfirming}\n          onClick={handleClick}\n          disabled={!canClaim}\n        >\n          {t('Claim Your CAKE')}\n        </Button>\n      </div>\n    </Modal>\n  )\n}\n\nexport default ClaimGift\n"]},"metadata":{},"sourceType":"module"}