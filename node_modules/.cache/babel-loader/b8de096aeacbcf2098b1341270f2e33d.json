{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Collectibles/components/NftCard/LotteryNftCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport omit from 'lodash/omit';\nimport { useAppDispatch } from 'state';\nimport { fetchWalletNfts } from 'state/collectibles';\nimport { useBunnySpecialLotteryContract } from 'hooks/useContract';\nimport NftCard from './index';\nimport useBunnySpecialLottery from '../../hooks/useBunnySpecialLottery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LotteryNftCard = ({\n  nft,\n  ...props\n}) => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const lotteryNftContract = useBunnySpecialLotteryContract();\n  const {\n    identifier\n  } = nft;\n  const [isClaimable, setIsClaimable] = useState(false);\n  const [mintNFTData, setMintNFTData] = useState(null);\n  const {\n    canClaimBaller,\n    canClaimLottie,\n    canClaimLucky\n  } = useBunnySpecialLottery();\n  useEffect(() => {\n    const canClaimMap = {\n      lottie: canClaimLottie,\n      lucky: canClaimLucky,\n      baller: canClaimBaller\n    };\n\n    const checkCanClaim = async () => {\n      const {\n        canClaim,\n        mintData\n      } = await canClaimMap[identifier]();\n      setIsClaimable(canClaim);\n      setMintNFTData(mintData);\n    };\n\n    if (account) {\n      checkCanClaim();\n    }\n  }, [account, canClaimBaller, canClaimLottie, canClaimLucky, identifier]);\n\n  const handleClaim = async () => {\n    const {\n      bunnyId,\n      lotteryId,\n      cursor\n    } = mintNFTData;\n    const response = await lotteryNftContract.mintNFT(bunnyId, lotteryId, cursor);\n    return response;\n  };\n\n  const LotteryNftRefresh = () => {\n    dispatch(fetchWalletNfts(account));\n    setIsClaimable(false);\n  }; // Don't pass the <NftList> 'refresh' function to the NftCard\n\n\n  const propsWithoutRefresh = omit(props, 'refresh');\n  return /*#__PURE__*/_jsxDEV(NftCard, {\n    nft: nft,\n    canClaim: isClaimable,\n    onClaim: handleClaim,\n    refresh: LotteryNftRefresh,\n    ...propsWithoutRefresh\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LotteryNftCard, \"VcBCIeILefuH7FgYzlrdQEXQ0kA=\", false, function () {\n  return [useWeb3React, useAppDispatch, useBunnySpecialLotteryContract, useBunnySpecialLottery];\n});\n\n_c = LotteryNftCard;\nexport default LotteryNftCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"LotteryNftCard\");","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Collectibles/components/NftCard/LotteryNftCard.tsx"],"names":["React","useEffect","useState","useWeb3React","omit","useAppDispatch","fetchWalletNfts","useBunnySpecialLotteryContract","NftCard","useBunnySpecialLottery","LotteryNftCard","nft","props","account","dispatch","lotteryNftContract","identifier","isClaimable","setIsClaimable","mintNFTData","setMintNFTData","canClaimBaller","canClaimLottie","canClaimLucky","canClaimMap","lottie","lucky","baller","checkCanClaim","canClaim","mintData","handleClaim","bunnyId","lotteryId","cursor","response","mintNFT","LotteryNftRefresh","propsWithoutRefresh"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,8BAAT,QAA+C,mBAA/C;AAEA,OAAOC,OAAP,MAAsC,SAAtC;AACA,OAAOC,sBAAP,MAAmC,oCAAnC;;;AAEA,MAAMC,cAAsC,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAO,KAAGC;AAAV,CAAD,KAAuB;AAAA;;AACpE,QAAM;AAAEC,IAAAA;AAAF,MAAcV,YAAY,EAAhC;AACA,QAAMW,QAAQ,GAAGT,cAAc,EAA/B;AACA,QAAMU,kBAAkB,GAAGR,8BAA8B,EAAzD;AACA,QAAM;AAAES,IAAAA;AAAF,MAAiBL,GAAvB;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAqB,IAArB,CAA9C;AACA,QAAM;AAAEmB,IAAAA,cAAF;AAAkBC,IAAAA,cAAlB;AAAkCC,IAAAA;AAAlC,MAAoDd,sBAAsB,EAAhF;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,WAAW,GAAG;AAClBC,MAAAA,MAAM,EAAEH,cADU;AAElBI,MAAAA,KAAK,EAAEH,aAFW;AAGlBI,MAAAA,MAAM,EAAEN;AAHU,KAApB;;AAMA,UAAMO,aAAa,GAAG,YAAY;AAChC,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAyB,MAAMN,WAAW,CAACR,UAAD,CAAX,EAArC;AACAE,MAAAA,cAAc,CAACW,QAAD,CAAd;AACAT,MAAAA,cAAc,CAACU,QAAD,CAAd;AACD,KAJD;;AAMA,QAAIjB,OAAJ,EAAa;AACXe,MAAAA,aAAa;AACd;AACF,GAhBQ,EAgBN,CAACf,OAAD,EAAUQ,cAAV,EAA0BC,cAA1B,EAA0CC,aAA1C,EAAyDP,UAAzD,CAhBM,CAAT;;AAkBA,QAAMe,WAAW,GAAG,YAAY;AAC9B,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,SAAX;AAAsBC,MAAAA;AAAtB,QAAiCf,WAAvC;AACA,UAAMgB,QAA8C,GAAG,MAAMpB,kBAAkB,CAACqB,OAAnB,CAA2BJ,OAA3B,EAAoCC,SAApC,EAA+CC,MAA/C,CAA7D;AACA,WAAOC,QAAP;AACD,GAJD;;AAMA,QAAME,iBAAiB,GAAG,MAAM;AAC9BvB,IAAAA,QAAQ,CAACR,eAAe,CAACO,OAAD,CAAhB,CAAR;AACAK,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAHD,CAjCoE,CAsCpE;;;AACA,QAAMoB,mBAAmB,GAAGlC,IAAI,CAACQ,KAAD,EAAQ,SAAR,CAAhC;AAEA,sBACE,QAAC,OAAD;AACE,IAAA,GAAG,EAAED,GADP;AAEE,IAAA,QAAQ,EAAEM,WAFZ;AAGE,IAAA,OAAO,EAAEc,WAHX;AAIE,IAAA,OAAO,EAAEM,iBAJX;AAAA,OAKMC;AALN;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAlDD;;GAAM5B,c;UACgBP,Y,EACHE,c,EACUE,8B,EAI+BE,sB;;;KAPtDC,c;AAoDN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport omit from 'lodash/omit'\nimport { ethers } from 'ethers'\nimport { useAppDispatch } from 'state'\nimport { fetchWalletNfts } from 'state/collectibles'\nimport { useBunnySpecialLotteryContract } from 'hooks/useContract'\nimport { LotteryNftMintData } from 'views/Collectibles/helpers'\nimport NftCard, { NftCardProps } from './index'\nimport useBunnySpecialLottery from '../../hooks/useBunnySpecialLottery'\n\nconst LotteryNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const lotteryNftContract = useBunnySpecialLotteryContract()\n  const { identifier } = nft\n  const [isClaimable, setIsClaimable] = useState(false)\n  const [mintNFTData, setMintNFTData] = useState<LotteryNftMintData>(null)\n  const { canClaimBaller, canClaimLottie, canClaimLucky } = useBunnySpecialLottery()\n\n  useEffect(() => {\n    const canClaimMap = {\n      lottie: canClaimLottie,\n      lucky: canClaimLucky,\n      baller: canClaimBaller,\n    }\n\n    const checkCanClaim = async () => {\n      const { canClaim, mintData } = await canClaimMap[identifier]()\n      setIsClaimable(canClaim)\n      setMintNFTData(mintData)\n    }\n\n    if (account) {\n      checkCanClaim()\n    }\n  }, [account, canClaimBaller, canClaimLottie, canClaimLucky, identifier])\n\n  const handleClaim = async () => {\n    const { bunnyId, lotteryId, cursor } = mintNFTData\n    const response: ethers.providers.TransactionResponse = await lotteryNftContract.mintNFT(bunnyId, lotteryId, cursor)\n    return response\n  }\n\n  const LotteryNftRefresh = () => {\n    dispatch(fetchWalletNfts(account))\n    setIsClaimable(false)\n  }\n\n  // Don't pass the <NftList> 'refresh' function to the NftCard\n  const propsWithoutRefresh = omit(props, 'refresh')\n\n  return (\n    <NftCard\n      nft={nft}\n      canClaim={isClaimable}\n      onClaim={handleClaim}\n      refresh={LotteryNftRefresh}\n      {...propsWithoutRefresh}\n    />\n  )\n}\n\nexport default LotteryNftCard\n"]},"metadata":{},"sourceType":"module"}