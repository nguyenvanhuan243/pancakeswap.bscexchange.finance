{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Collectibles/components/TransferNftModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { ethers } from 'ethers';\nimport { useWeb3React } from '@web3-react/core';\nimport { Button, Input, Modal, Text } from '@pancakeswap/uikit';\nimport { getAddressByType } from 'utils/collectibles';\nimport { useTranslation } from 'contexts/Localization';\nimport useToast from 'hooks/useToast';\nimport { useERC721 } from 'hooks/useContract';\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice';\nimport InfoRow from './InfoRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Value = styled(Text)`\n  font-weight: 600;\n`;\n_c = Value;\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`;\n_c2 = ModalContent;\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`;\n_c3 = Actions;\nconst Label = styled.label`\n  color: ${({\n  theme\n}) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`;\n_c4 = Label;\n\nconst TransferNftModal = ({\n  nft,\n  tokenIds,\n  onSuccess,\n  onDismiss\n}) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [value, setValue] = useState('');\n  const [error, setError] = useState(null);\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const contract = useERC721(getAddressByType(nft.type));\n  const {\n    toastSuccess\n  } = useToast();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = ethers.utils.isAddress(value);\n\n      if (!isValidAddress) {\n        setError(t('Please enter a valid wallet address'));\n      } else {\n        const tx = await callWithGasPrice(contract, 'transferFrom', [account, value, tokenIds[0]]);\n        setIsLoading(true); // TODO: Refactor to try/catch pattern so error state is properly handled\n\n        const receipt = await tx.wait();\n\n        if (receipt.status) {\n          onDismiss();\n          onSuccess();\n          toastSuccess(t('NFT successfully transferred!'));\n        } else {\n          setError(t('Unable to transfer NFT'));\n          setIsLoading(false);\n        }\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err);\n    }\n  };\n\n  const handleChange = evt => {\n    const {\n      value: inputValue\n    } = evt.target;\n    setValue(inputValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Transfer NFT'),\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalContent, {\n      children: [error && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"failure\",\n        mb: \"8px\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InfoRow, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [t('Transferring'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Value, {\n          children: t('1x %nftName% NFT', {\n            nftName: nft.name\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"transferAddress\",\n        children: [t('Receiving address'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"transferAddress\",\n        name: \"address\",\n        type: \"text\",\n        placeholder: t('Paste address'),\n        value: value,\n        onChange: handleChange,\n        isWarning: error,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Actions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        variant: \"secondary\",\n        onClick: onDismiss,\n        children: t('Cancel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        onClick: handleConfirm,\n        disabled: !account || isLoading || !value,\n        children: t('Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransferNftModal, \"hmt7GMm+cj2hiKAiu4Sbbl+7Kag=\", false, function () {\n  return [useTranslation, useWeb3React, useERC721, useToast, useCallWithGasPrice];\n});\n\n_c5 = TransferNftModal;\nexport default TransferNftModal;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Value\");\n$RefreshReg$(_c2, \"ModalContent\");\n$RefreshReg$(_c3, \"Actions\");\n$RefreshReg$(_c4, \"Label\");\n$RefreshReg$(_c5, \"TransferNftModal\");","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Collectibles/components/TransferNftModal.tsx"],"names":["React","useState","styled","ethers","useWeb3React","Button","Input","Modal","Text","getAddressByType","useTranslation","useToast","useERC721","useCallWithGasPrice","InfoRow","Value","ModalContent","div","Actions","Label","label","theme","colors","text","TransferNftModal","nft","tokenIds","onSuccess","onDismiss","isLoading","setIsLoading","value","setValue","error","setError","t","account","contract","type","toastSuccess","callWithGasPrice","handleConfirm","isValidAddress","utils","isAddress","tx","receipt","wait","status","err","console","handleChange","evt","inputValue","target","nftName","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Input, Modal, Text } from '@pancakeswap/uikit'\nimport { getAddressByType } from 'utils/collectibles'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC721 } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const contract = useERC721(getAddressByType(nft.type))\n  const { toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = ethers.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(t('Please enter a valid wallet address'))\n      } else {\n        const tx = await callWithGasPrice(contract, 'transferFrom', [account, value, tokenIds[0]])\n        setIsLoading(true)\n        // TODO: Refactor to try/catch pattern so error state is properly handled\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          onDismiss()\n          onSuccess()\n          toastSuccess(t('NFT successfully transferred!'))\n        } else {\n          setError(t('Unable to transfer NFT'))\n          setIsLoading(false)\n        }\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={t('Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{t('Transferring')}:</Text>\n          <Value>{t('1x %nftName% NFT', { nftName: nft.name })}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{t('Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={t('Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n"]},"metadata":{},"sourceType":"module"}