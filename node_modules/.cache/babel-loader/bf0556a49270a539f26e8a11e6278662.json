{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useCallback}from'react';import{useAppDispatch}from'state';import{useWeb3React}from'@web3-react/core';import{useGetCurrentLotteryId}from'state/lottery/hooks';import{getGraphLotteryUser}from'state/lottery/getUserLotteryData';import{getBunnySpecialLotteryAddress}from'utils/addressHelpers';import{multicallv2}from'utils/multicall';import bunnySpecialLotteryAbi from'config/abi/bunnySpecialLottery.json';import Nfts from'config/constants/nfts';import{fetchCurrentLotteryId}from'state/lottery';import{getBallerClaim,getLottieClaim,getLuckyClaim,NO_CLAIM}from'../helpers';var useBunnySpecialLottery=function useBunnySpecialLottery(){var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var dispatch=useAppDispatch();var currentLotteryId=useGetCurrentLotteryId();var currentLotteryIdNum=currentLotteryId&&parseInt(currentLotteryId);var _useState=useState(null),_useState2=_slicedToArray(_useState,2),userRounds=_useState2[0],setUserRounds=_useState2[1];useEffect(function(){dispatch(fetchCurrentLotteryId());},[dispatch]);useEffect(function(){setUserRounds(null);},[account]);useEffect(function(){var getUserData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var lotteryNftContractAddress,calls,_yield$multicallv,_yield$multicallv2,_yield$multicallv2$,startRound,_yield$multicallv2$2,finalRound,startLotteryRoundInt,finalLotteryRoundInt,lotteryIdsArray,i,userParticipation;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:lotteryNftContractAddress=getBunnySpecialLotteryAddress();calls=[{name:'startLotteryRound',address:lotteryNftContractAddress,params:[]},{name:'finalLotteryRound',address:lotteryNftContractAddress,params:[]}];_context.next=4;return multicallv2(bunnySpecialLotteryAbi,calls);case 4:_yield$multicallv=_context.sent;_yield$multicallv2=_slicedToArray(_yield$multicallv,2);_yield$multicallv2$=_slicedToArray(_yield$multicallv2[0],1);startRound=_yield$multicallv2$[0];_yield$multicallv2$2=_slicedToArray(_yield$multicallv2[1],1);finalRound=_yield$multicallv2$2[0];startLotteryRoundInt=startRound.toNumber();finalLotteryRoundInt=finalRound.toNumber();lotteryIdsArray=[];for(i=startLotteryRoundInt;i<=finalLotteryRoundInt;i++){lotteryIdsArray.push(\"\".concat(i));}_context.next=16;return getGraphLotteryUser(account,undefined,undefined,{lottery_in:lotteryIdsArray});case 16:userParticipation=_context.sent;setUserRounds(userParticipation.rounds);case 18:case\"end\":return _context.stop();}}},_callee);}));return function getUserData(){return _ref.apply(this,arguments);};}();if(account&&currentLotteryIdNum&&!userRounds){getUserData();}},[currentLotteryIdNum,userRounds,account]);var canClaimLottie=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _Nfts$find,variationId,_userRounds,userRound,lottieClaim;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(!userRounds||userRounds.length===0)){_context2.next=2;break;}return _context2.abrupt(\"return\",NO_CLAIM);case 2:_Nfts$find=Nfts.find(function(nft){return nft.identifier==='lottie';}),variationId=_Nfts$find.variationId;_userRounds=_slicedToArray(userRounds,1),userRound=_userRounds[0];_context2.next=6;return getLottieClaim(account,variationId,userRound.lotteryId);case 6:lottieClaim=_context2.sent;return _context2.abrupt(\"return\",lottieClaim);case 8:case\"end\":return _context2.stop();}}},_callee2);})),[account,userRounds]);var canClaimLucky=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _Nfts$find2,variationId,luckyClaim;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(!userRounds||userRounds.length===0)){_context3.next=2;break;}return _context3.abrupt(\"return\",NO_CLAIM);case 2:_Nfts$find2=Nfts.find(function(nft){return nft.identifier==='lucky';}),variationId=_Nfts$find2.variationId;_context3.next=5;return getLuckyClaim(account,variationId,userRounds);case 5:luckyClaim=_context3.sent;return _context3.abrupt(\"return\",luckyClaim);case 7:case\"end\":return _context3.stop();}}},_callee3);})),[account,userRounds]);var canClaimBaller=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _Nfts$find3,variationId,lotteryId,lottieClaim;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_Nfts$find3=Nfts.find(function(nft){return nft.identifier==='baller';}),variationId=_Nfts$find3.variationId;lotteryId=userRounds&&userRounds.length>0&&userRounds[0].lotteryId;_context4.next=4;return getBallerClaim(account,variationId,lotteryId);case 4:lottieClaim=_context4.sent;return _context4.abrupt(\"return\",lottieClaim);case 6:case\"end\":return _context4.stop();}}},_callee4);})),[account,userRounds]);return{canClaimLottie:canClaimLottie,canClaimLucky:canClaimLucky,canClaimBaller:canClaimBaller};};export default useBunnySpecialLottery;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/views/Collectibles/hooks/useBunnySpecialLottery.tsx"],"names":["useEffect","useState","useCallback","useAppDispatch","useWeb3React","useGetCurrentLotteryId","getGraphLotteryUser","getBunnySpecialLotteryAddress","multicallv2","bunnySpecialLotteryAbi","Nfts","fetchCurrentLotteryId","getBallerClaim","getLottieClaim","getLuckyClaim","NO_CLAIM","useBunnySpecialLottery","account","dispatch","currentLotteryId","currentLotteryIdNum","parseInt","userRounds","setUserRounds","getUserData","lotteryNftContractAddress","calls","name","address","params","startRound","finalRound","startLotteryRoundInt","toNumber","finalLotteryRoundInt","lotteryIdsArray","i","push","undefined","lottery_in","userParticipation","rounds","canClaimLottie","length","find","nft","identifier","variationId","userRound","lotteryId","lottieClaim","canClaimLucky","luckyClaim","canClaimBaller"],"mappings":"wfAAA,OAASA,SAAT,CAAoBC,QAApB,CAA8BC,WAA9B,KAAiD,OAAjD,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,OAASC,sBAAT,KAAuC,qBAAvC,CACA,OAASC,mBAAT,KAAoC,kCAApC,CAEA,OAASC,6BAAT,KAA8C,sBAA9C,CACA,OAASC,WAAT,KAA4B,iBAA5B,CACA,MAAOC,CAAAA,sBAAP,KAAmC,qCAAnC,CACA,MAAOC,CAAAA,IAAP,KAAiB,uBAAjB,CACA,OAASC,qBAAT,KAAsC,eAAtC,CACA,OAASC,cAAT,CAAyBC,cAAzB,CAAyCC,aAAzC,CAAkEC,QAAlE,KAAkF,YAAlF,CAEA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAI1B,CACH,kBAAoBZ,YAAY,EAAhC,CAAQa,OAAR,eAAQA,OAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGf,cAAc,EAA/B,CACA,GAAMgB,CAAAA,gBAAgB,CAAGd,sBAAsB,EAA/C,CACA,GAAMe,CAAAA,mBAAmB,CAAGD,gBAAgB,EAAIE,QAAQ,CAACF,gBAAD,CAAxD,CACA,cAAoClB,QAAQ,CAAc,IAAd,CAA5C,wCAAOqB,UAAP,eAAmBC,aAAnB,eAEAvB,SAAS,CAAC,UAAM,CACdkB,QAAQ,CAACP,qBAAqB,EAAtB,CAAR,CACD,CAFQ,CAEN,CAACO,QAAD,CAFM,CAAT,CAIAlB,SAAS,CAAC,UAAM,CACduB,aAAa,CAAC,IAAD,CAAb,CACD,CAFQ,CAEN,CAACN,OAAD,CAFM,CAAT,CAIAjB,SAAS,CAAC,UAAM,CACd,GAAMwB,CAAAA,WAAW,0FAAG,yVACZC,yBADY,CACgBlB,6BAA6B,EAD7C,CAEZmB,KAFY,CAEJ,CACZ,CACEC,IAAI,CAAE,mBADR,CAEEC,OAAO,CAAEH,yBAFX,CAGEI,MAAM,CAAE,EAHV,CADY,CAMZ,CACEF,IAAI,CAAE,mBADR,CAEEC,OAAO,CAAEH,yBAFX,CAGEI,MAAM,CAAE,EAHV,CANY,CAFI,uBAeyBrB,CAAAA,WAAW,CAACC,sBAAD,CAAyBiB,KAAzB,CAfpC,2JAeVI,UAfU,qFAeIC,UAfJ,yBAgBZC,oBAhBY,CAgBWF,UAAU,CAACG,QAAX,EAhBX,CAiBZC,oBAjBY,CAiBWH,UAAU,CAACE,QAAX,EAjBX,CAmBZE,eAnBY,CAmBM,EAnBN,CAoBlB,IAASC,CAAT,CAAaJ,oBAAb,CAAmCI,CAAC,EAAIF,oBAAxC,CAA8DE,CAAC,EAA/D,CAAmE,CACjED,eAAe,CAACE,IAAhB,WAAwBD,CAAxB,GACD,CAtBiB,uBAuBc9B,CAAAA,mBAAmB,CAACW,OAAD,CAAUqB,SAAV,CAAqBA,SAArB,CAAgC,CACjFC,UAAU,CAAEJ,eADqE,CAAhC,CAvBjC,SAuBZK,iBAvBY,eA0BlBjB,aAAa,CAACiB,iBAAiB,CAACC,MAAnB,CAAb,CA1BkB,uDAAH,kBAAXjB,CAAAA,WAAW,0CAAjB,CA6BA,GAAIP,OAAO,EAAIG,mBAAX,EAAkC,CAACE,UAAvC,CAAmD,CACjDE,WAAW,GACZ,CACF,CAjCQ,CAiCN,CAACJ,mBAAD,CAAsBE,UAAtB,CAAkCL,OAAlC,CAjCM,CAAT,CAmCA,GAAMyB,CAAAA,cAAc,CAAGxC,WAAW,sEAAC,0MAC7B,CAACoB,UAAD,EAAeA,UAAU,CAACqB,MAAX,GAAsB,CADR,4DAExB5B,QAFwB,oBAKTL,IAAI,CAACkC,IAAL,CAAU,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,UAAJ,GAAmB,QAA5B,EAAV,CALS,CAKzBC,WALyB,YAKzBA,WALyB,4BAMbzB,UANa,IAM1B0B,SAN0B,uCAOPnC,CAAAA,cAAc,CAACI,OAAD,CAAU8B,WAAV,CAAuBC,SAAS,CAACC,SAAjC,CAPP,QAO3BC,WAP2B,iDAQ1BA,WAR0B,0DAAD,GAS/B,CAACjC,OAAD,CAAUK,UAAV,CAT+B,CAAlC,CAWA,GAAM6B,CAAAA,aAAa,CAAGjD,WAAW,sEAAC,oLAC5B,CAACoB,UAAD,EAAeA,UAAU,CAACqB,MAAX,GAAsB,CADT,4DAEvB5B,QAFuB,qBAKRL,IAAI,CAACkC,IAAL,CAAU,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,UAAJ,GAAmB,OAA5B,EAAV,CALQ,CAKxBC,WALwB,aAKxBA,WALwB,wBAMPjC,CAAAA,aAAa,CAACG,OAAD,CAAU8B,WAAV,CAAuBzB,UAAvB,CANN,QAM1B8B,UAN0B,iDAOzBA,UAPyB,0DAAD,GAQ9B,CAACnC,OAAD,CAAUK,UAAV,CAR8B,CAAjC,CAUA,GAAM+B,CAAAA,cAAc,CAAGnD,WAAW,sEAAC,sMACTQ,IAAI,CAACkC,IAAL,CAAU,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,UAAJ,GAAmB,QAA5B,EAAV,CADS,CACzBC,WADyB,aACzBA,WADyB,CAE3BE,SAF2B,CAEf3B,UAAU,EAAIA,UAAU,CAACqB,MAAX,CAAoB,CAAlC,EAAuCrB,UAAU,CAAC,CAAD,CAAV,CAAc2B,SAFtC,wBAIPrC,CAAAA,cAAc,CAACK,OAAD,CAAU8B,WAAV,CAAuBE,SAAvB,CAJP,QAI3BC,WAJ2B,iDAK1BA,WAL0B,0DAAD,GAM/B,CAACjC,OAAD,CAAUK,UAAV,CAN+B,CAAlC,CAQA,MAAO,CAAEoB,cAAc,CAAdA,cAAF,CAAkBS,aAAa,CAAbA,aAAlB,CAAiCE,cAAc,CAAdA,cAAjC,CAAP,CACD,CApFD,CAsFA,cAAerC,CAAAA,sBAAf","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetCurrentLotteryId } from 'state/lottery/hooks'\nimport { getGraphLotteryUser } from 'state/lottery/getUserLotteryData'\nimport { UserRound } from 'state/types'\nimport { getBunnySpecialLotteryAddress } from 'utils/addressHelpers'\nimport { multicallv2 } from 'utils/multicall'\nimport bunnySpecialLotteryAbi from 'config/abi/bunnySpecialLottery.json'\nimport Nfts from 'config/constants/nfts'\nimport { fetchCurrentLotteryId } from 'state/lottery'\nimport { getBallerClaim, getLottieClaim, getLuckyClaim, NftClaim, NO_CLAIM } from '../helpers'\n\nconst useBunnySpecialLottery = (): {\n  canClaimLottie: () => Promise<NftClaim>\n  canClaimLucky: () => Promise<NftClaim>\n  canClaimBaller: () => Promise<NftClaim>\n} => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const currentLotteryId = useGetCurrentLotteryId()\n  const currentLotteryIdNum = currentLotteryId && parseInt(currentLotteryId)\n  const [userRounds, setUserRounds] = useState<UserRound[]>(null)\n\n  useEffect(() => {\n    dispatch(fetchCurrentLotteryId())\n  }, [dispatch])\n\n  useEffect(() => {\n    setUserRounds(null)\n  }, [account])\n\n  useEffect(() => {\n    const getUserData = async () => {\n      const lotteryNftContractAddress = getBunnySpecialLotteryAddress()\n      const calls = [\n        {\n          name: 'startLotteryRound',\n          address: lotteryNftContractAddress,\n          params: [],\n        },\n        {\n          name: 'finalLotteryRound',\n          address: lotteryNftContractAddress,\n          params: [],\n        },\n      ]\n\n      const [[startRound], [finalRound]] = await multicallv2(bunnySpecialLotteryAbi, calls)\n      const startLotteryRoundInt = startRound.toNumber()\n      const finalLotteryRoundInt = finalRound.toNumber()\n\n      const lotteryIdsArray = []\n      for (let i = startLotteryRoundInt; i <= finalLotteryRoundInt; i++) {\n        lotteryIdsArray.push(`${i}`)\n      }\n      const userParticipation = await getGraphLotteryUser(account, undefined, undefined, {\n        lottery_in: lotteryIdsArray,\n      })\n      setUserRounds(userParticipation.rounds)\n    }\n\n    if (account && currentLotteryIdNum && !userRounds) {\n      getUserData()\n    }\n  }, [currentLotteryIdNum, userRounds, account])\n\n  const canClaimLottie = useCallback(async () => {\n    if (!userRounds || userRounds.length === 0) {\n      return NO_CLAIM\n    }\n\n    const { variationId } = Nfts.find((nft) => nft.identifier === 'lottie')\n    const [userRound] = userRounds\n    const lottieClaim = await getLottieClaim(account, variationId, userRound.lotteryId)\n    return lottieClaim\n  }, [account, userRounds])\n\n  const canClaimLucky = useCallback(async () => {\n    if (!userRounds || userRounds.length === 0) {\n      return NO_CLAIM\n    }\n\n    const { variationId } = Nfts.find((nft) => nft.identifier === 'lucky')\n    const luckyClaim = await getLuckyClaim(account, variationId, userRounds)\n    return luckyClaim\n  }, [account, userRounds])\n\n  const canClaimBaller = useCallback(async () => {\n    const { variationId } = Nfts.find((nft) => nft.identifier === 'baller')\n    const lotteryId = userRounds && userRounds.length > 0 && userRounds[0].lotteryId\n\n    const lottieClaim = await getBallerClaim(account, variationId, lotteryId)\n    return lottieClaim\n  }, [account, userRounds])\n\n  return { canClaimLottie, canClaimLucky, canClaimBaller }\n}\n\nexport default useBunnySpecialLottery\n"]},"metadata":{},"sourceType":"module"}