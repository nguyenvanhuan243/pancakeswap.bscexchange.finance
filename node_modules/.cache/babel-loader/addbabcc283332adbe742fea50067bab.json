{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenvanhuan243/Documents/pancake-frontend/src/components/Menu/GlobalSettings/SettingsModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Text, PancakeToggle, Toggle, Flex, Modal } from '@pancakeswap/uikit';\nimport { useAudioModeManager, useExpertModeManager, useUserSingleHopOnly } from 'state/user/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport { useSwapActionHandlers } from 'state/swap/hooks';\nimport usePersistState from 'hooks/usePersistState';\nimport useTheme from 'hooks/useTheme';\nimport QuestionHelper from '../../QuestionHelper';\nimport TransactionSettings from './TransactionSettings';\nimport ExpertModal from './ExpertModal';\nimport GasSettings from './GasSettings'; // TODO: Temporary. Once uikit is merged with this style change, this can be removed.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PancakeToggleWrapper = styled.div`\n  .pancakes {\n    position: absolute;\n  }\n`;\n_c = PancakeToggleWrapper;\n\nconst SettingsModal = ({\n  onDismiss\n}) => {\n  _s();\n\n  const [showConfirmExpertModal, setShowConfirmExpertModal] = useState(false);\n  const [rememberExpertModeAcknowledgement, setRememberExpertModeAcknowledgement] = usePersistState(false, {\n    localStorageKey: 'pancake_expert_mode_remember_acknowledgement'\n  });\n  const [expertMode, toggleExpertMode] = useExpertModeManager();\n  const [singleHopOnly, setSingleHopOnly] = useUserSingleHopOnly();\n  const [audioPlay, toggleSetAudioMode] = useAudioModeManager();\n  const {\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n\n  if (showConfirmExpertModal) {\n    return /*#__PURE__*/_jsxDEV(ExpertModal, {\n      setShowConfirmExpertModal: setShowConfirmExpertModal,\n      onDismiss: onDismiss,\n      setRememberExpertModeAcknowledgement: setRememberExpertModeAcknowledgement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n\n  const handleExpertModeToggle = () => {\n    if (expertMode) {\n      onChangeRecipient(null);\n      toggleExpertMode();\n    } else if (rememberExpertModeAcknowledgement) {\n      onChangeRecipient(null);\n      toggleExpertMode();\n    } else {\n      setShowConfirmExpertModal(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Settings'),\n    headerBackground: \"gradients.cardHeader\",\n    onDismiss: onDismiss,\n    style: {\n      maxWidth: '420px',\n      overflowY: 'auto'\n    },\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        pb: \"24px\",\n        flexDirection: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          fontSize: \"12px\",\n          color: \"secondary\",\n          mb: \"24px\",\n          children: t('Global')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GasSettings, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        pt: \"24px\",\n        flexDirection: \"column\",\n        borderTop: `1px ${theme.colors.cardBorder} solid`,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          fontSize: \"12px\",\n          color: \"secondary\",\n          mb: \"24px\",\n          children: t('Swaps & Liquidity')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TransactionSettings, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        mb: \"24px\",\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: t('Expert Mode')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n            text: t('Bypasses confirmation modals and allows high slippage trades. Use at your own risk.'),\n            placement: \"top-start\",\n            ml: \"4px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Toggle, {\n          id: \"toggle-expert-mode-button\",\n          scale: \"md\",\n          checked: expertMode,\n          onChange: handleExpertModeToggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        mb: \"24px\",\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: t('Disable Multihops')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n            text: t('Restricts swaps to direct pairs only.'),\n            placement: \"top-start\",\n            ml: \"4px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Toggle, {\n          id: \"toggle-disable-multihop-button\",\n          checked: singleHopOnly,\n          scale: \"md\",\n          onChange: () => {\n            setSingleHopOnly(!singleHopOnly);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: t('Flippy sounds')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n            text: t('Fun sounds to make a truly immersive pancake-flipping trading experience'),\n            placement: \"top-start\",\n            ml: \"4px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PancakeToggleWrapper, {\n          children: /*#__PURE__*/_jsxDEV(PancakeToggle, {\n            checked: audioPlay,\n            onChange: toggleSetAudioMode,\n            scale: \"md\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SettingsModal, \"7cz39/S6T1XJP6Dj3q8VcA23924=\", false, function () {\n  return [usePersistState, useExpertModeManager, useUserSingleHopOnly, useAudioModeManager, useSwapActionHandlers, useTranslation, useTheme];\n});\n\n_c2 = SettingsModal;\nexport default SettingsModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PancakeToggleWrapper\");\n$RefreshReg$(_c2, \"SettingsModal\");","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/components/Menu/GlobalSettings/SettingsModal.tsx"],"names":["React","useState","styled","Text","PancakeToggle","Toggle","Flex","Modal","useAudioModeManager","useExpertModeManager","useUserSingleHopOnly","useTranslation","useSwapActionHandlers","usePersistState","useTheme","QuestionHelper","TransactionSettings","ExpertModal","GasSettings","PancakeToggleWrapper","div","SettingsModal","onDismiss","showConfirmExpertModal","setShowConfirmExpertModal","rememberExpertModeAcknowledgement","setRememberExpertModeAcknowledgement","localStorageKey","expertMode","toggleExpertMode","singleHopOnly","setSingleHopOnly","audioPlay","toggleSetAudioMode","onChangeRecipient","t","theme","handleExpertModeToggle","maxWidth","overflowY","colors","cardBorder"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Text, PancakeToggle, Toggle, Flex, Modal, InjectedModalProps } from '@pancakeswap/uikit'\nimport { useAudioModeManager, useExpertModeManager, useUserSingleHopOnly } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSwapActionHandlers } from 'state/swap/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport useTheme from 'hooks/useTheme'\nimport QuestionHelper from '../../QuestionHelper'\nimport TransactionSettings from './TransactionSettings'\nimport ExpertModal from './ExpertModal'\nimport GasSettings from './GasSettings'\n\n// TODO: Temporary. Once uikit is merged with this style change, this can be removed.\nconst PancakeToggleWrapper = styled.div`\n  .pancakes {\n    position: absolute;\n  }\n`\n\nconst SettingsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [showConfirmExpertModal, setShowConfirmExpertModal] = useState(false)\n  const [rememberExpertModeAcknowledgement, setRememberExpertModeAcknowledgement] = usePersistState(false, {\n    localStorageKey: 'pancake_expert_mode_remember_acknowledgement',\n  })\n  const [expertMode, toggleExpertMode] = useExpertModeManager()\n  const [singleHopOnly, setSingleHopOnly] = useUserSingleHopOnly()\n  const [audioPlay, toggleSetAudioMode] = useAudioModeManager()\n  const { onChangeRecipient } = useSwapActionHandlers()\n\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  if (showConfirmExpertModal) {\n    return (\n      <ExpertModal\n        setShowConfirmExpertModal={setShowConfirmExpertModal}\n        onDismiss={onDismiss}\n        setRememberExpertModeAcknowledgement={setRememberExpertModeAcknowledgement}\n      />\n    )\n  }\n\n  const handleExpertModeToggle = () => {\n    if (expertMode) {\n      onChangeRecipient(null)\n      toggleExpertMode()\n    } else if (rememberExpertModeAcknowledgement) {\n      onChangeRecipient(null)\n      toggleExpertMode()\n    } else {\n      setShowConfirmExpertModal(true)\n    }\n  }\n\n  return (\n    <Modal\n      title={t('Settings')}\n      headerBackground=\"gradients.cardHeader\"\n      onDismiss={onDismiss}\n      style={{ maxWidth: '420px', overflowY: 'auto' }}\n    >\n      <Flex flexDirection=\"column\">\n        <Flex pb=\"24px\" flexDirection=\"column\">\n          <Text bold textTransform=\"uppercase\" fontSize=\"12px\" color=\"secondary\" mb=\"24px\">\n            {t('Global')}\n          </Text>\n          <GasSettings />\n        </Flex>\n        <Flex pt=\"24px\" flexDirection=\"column\" borderTop={`1px ${theme.colors.cardBorder} solid`}>\n          <Text bold textTransform=\"uppercase\" fontSize=\"12px\" color=\"secondary\" mb=\"24px\">\n            {t('Swaps & Liquidity')}\n          </Text>\n          <TransactionSettings />\n        </Flex>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n          <Flex alignItems=\"center\">\n            <Text>{t('Expert Mode')}</Text>\n            <QuestionHelper\n              text={t('Bypasses confirmation modals and allows high slippage trades. Use at your own risk.')}\n              placement=\"top-start\"\n              ml=\"4px\"\n            />\n          </Flex>\n          <Toggle id=\"toggle-expert-mode-button\" scale=\"md\" checked={expertMode} onChange={handleExpertModeToggle} />\n        </Flex>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n          <Flex alignItems=\"center\">\n            <Text>{t('Disable Multihops')}</Text>\n            <QuestionHelper text={t('Restricts swaps to direct pairs only.')} placement=\"top-start\" ml=\"4px\" />\n          </Flex>\n          <Toggle\n            id=\"toggle-disable-multihop-button\"\n            checked={singleHopOnly}\n            scale=\"md\"\n            onChange={() => {\n              setSingleHopOnly(!singleHopOnly)\n            }}\n          />\n        </Flex>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Flex alignItems=\"center\">\n            <Text>{t('Flippy sounds')}</Text>\n            <QuestionHelper\n              text={t('Fun sounds to make a truly immersive pancake-flipping trading experience')}\n              placement=\"top-start\"\n              ml=\"4px\"\n            />\n          </Flex>\n          <PancakeToggleWrapper>\n            <PancakeToggle checked={audioPlay} onChange={toggleSetAudioMode} scale=\"md\" />\n          </PancakeToggleWrapper>\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default SettingsModal\n"]},"metadata":{},"sourceType":"module"}