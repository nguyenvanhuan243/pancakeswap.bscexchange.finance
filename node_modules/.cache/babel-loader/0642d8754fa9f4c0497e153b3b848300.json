{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Predictions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { Helmet } from 'react-helmet-async';\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit';\nimport { useAppDispatch } from 'state';\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/predictions/hooks';\nimport { useInitialBlock } from 'state/block/hooks';\nimport { initializePredictions } from 'state/predictions';\nimport { PredictionStatus } from 'state/types';\nimport usePersistState from 'hooks/usePersistState';\nimport PageLoader from 'components/Loader/PageLoader';\nimport usePollOraclePrice from './hooks/usePollOraclePrice';\nimport usePollPredictions from './hooks/usePollPredictions';\nimport Container from './components/Container';\nimport CollectWinningsPopup from './components/CollectWinningsPopup';\nimport SwiperProvider from './context/SwiperProvider';\nimport Desktop from './Desktop';\nimport Mobile from './Mobile';\nimport RiskDisclaimer from './components/RiskDisclaimer';\nimport ChartDisclaimer, { CHART_LOCAL_STORAGE_KEY } from './components/ChartDisclaimer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Predictions = () => {\n  _s();\n\n  const {\n    isDesktop\n  } = useMatchBreakpoints();\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_accepted_risk-2'\n  });\n  const {\n    account\n  } = useWeb3React();\n  const status = useGetPredictionsStatus();\n  const isChartPaneOpen = useIsChartPaneOpen();\n  const dispatch = useAppDispatch();\n  const initialBlock = useInitialBlock();\n\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true);\n\n  const [onPresentRiskDisclaimer] = useModal( /*#__PURE__*/_jsxDEV(RiskDisclaimer, {\n    onSuccess: handleAcceptRiskSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 46\n  }, this), false);\n  const [onPresentChartDisclaimer] = useModal( /*#__PURE__*/_jsxDEV(ChartDisclaimer, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 47\n  }, this), false); // TODO: memoize modal's handlers\n\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer);\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer); // Disclaimer\n\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current();\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef]); // Chart Disclaimer\n\n  useEffect(() => {\n    if (isChartPaneOpen) {\n      const showChartDisclaimer = JSON.parse(localStorage.getItem(CHART_LOCAL_STORAGE_KEY));\n\n      if (showChartDisclaimer !== true) {\n        onPresentChartDisclaimerRef.current();\n      }\n    }\n  }, [onPresentChartDisclaimerRef, isChartPaneOpen]);\n  useEffect(() => {\n    if (initialBlock > 0) {\n      // Do not start initialization until the first block has been retrieved\n      dispatch(initializePredictions(account));\n    }\n  }, [initialBlock, dispatch, account]);\n  usePollPredictions();\n  usePollOraclePrice();\n\n  if (status === PredictionStatus.INITIAL) {\n    return /*#__PURE__*/_jsxDEV(PageLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"script\", {\n        src: \"https://s3.tradingview.com/tv.js\",\n        type: \"text/javascript\",\n        id: \"tradingViewWidget\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SwiperProvider, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [isDesktop ? /*#__PURE__*/_jsxDEV(Desktop, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(Mobile, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 38\n        }, this), /*#__PURE__*/_jsxDEV(CollectWinningsPopup, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Predictions, \"46NSaHpO0n4dLGso7xUpT/MN2CI=\", false, function () {\n  return [useMatchBreakpoints, usePersistState, useWeb3React, useGetPredictionsStatus, useIsChartPaneOpen, useAppDispatch, useInitialBlock, useModal, useModal, usePollPredictions, usePollOraclePrice];\n});\n\n_c = Predictions;\nexport default Predictions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Predictions\");","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Predictions/index.tsx"],"names":["React","useEffect","useRef","useWeb3React","Helmet","useMatchBreakpoints","useModal","useAppDispatch","useGetPredictionsStatus","useIsChartPaneOpen","useInitialBlock","initializePredictions","PredictionStatus","usePersistState","PageLoader","usePollOraclePrice","usePollPredictions","Container","CollectWinningsPopup","SwiperProvider","Desktop","Mobile","RiskDisclaimer","ChartDisclaimer","CHART_LOCAL_STORAGE_KEY","Predictions","isDesktop","hasAcceptedRisk","setHasAcceptedRisk","localStorageKey","account","status","isChartPaneOpen","dispatch","initialBlock","handleAcceptRiskSuccess","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","current","showChartDisclaimer","JSON","parse","localStorage","getItem","INITIAL"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/predictions/hooks'\nimport { useInitialBlock } from 'state/block/hooks'\nimport { initializePredictions } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/Loader/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollPredictions from './hooks/usePollPredictions'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer, { CHART_LOCAL_STORAGE_KEY } from './components/ChartDisclaimer'\n\nconst Predictions = () => {\n  const { isDesktop } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_accepted_risk-2',\n  })\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (isChartPaneOpen) {\n      const showChartDisclaimer = JSON.parse(localStorage.getItem(CHART_LOCAL_STORAGE_KEY))\n\n      if (showChartDisclaimer !== true) {\n        onPresentChartDisclaimerRef.current()\n      }\n    }\n  }, [onPresentChartDisclaimerRef, isChartPaneOpen])\n\n  useEffect(() => {\n    if (initialBlock > 0) {\n      // Do not start initialization until the first block has been retrieved\n      dispatch(initializePredictions(account))\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollPredictions()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n"]},"metadata":{},"sourceType":"module"}