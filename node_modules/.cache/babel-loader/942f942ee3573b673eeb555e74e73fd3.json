{"ast":null,"code":"import{useEffect,useMemo}from'react';import{useSelector}from'react-redux';import{useAppDispatch}from'state';import{useWeb3React}from'@web3-react/core';import BigNumber from'bignumber.js';import{BIG_ZERO}from'utils/bigNumber';import{getBalanceAmount}from'utils/formatBalance';import{farmsConfig}from'config/constants';import useRefresh from'hooks/useRefresh';import{fetchFarmsPublicDataAsync,fetchFarmUserDataAsync,nonArchivedFarms}from'.';export var usePollFarmsData=function usePollFarmsData(){var includeArchive=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var dispatch=useAppDispatch();var _useRefresh=useRefresh(),slowRefresh=_useRefresh.slowRefresh;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;useEffect(function(){var farmsToFetch=includeArchive?farmsConfig:nonArchivedFarms;var pids=farmsToFetch.map(function(farmToFetch){return farmToFetch.pid;});dispatch(fetchFarmsPublicDataAsync(pids));if(account){dispatch(fetchFarmUserDataAsync({account:account,pids:pids}));}},[includeArchive,dispatch,slowRefresh,account]);};/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */export var usePollCoreFarmData=function usePollCoreFarmData(){var dispatch=useAppDispatch();var _useRefresh2=useRefresh(),fastRefresh=_useRefresh2.fastRefresh;useEffect(function(){dispatch(fetchFarmsPublicDataAsync([251,252]));},[dispatch,fastRefresh]);};export var useFarms=function useFarms(){var farms=useSelector(function(state){return state.farms;});return farms;};export var useFarmFromPid=function useFarmFromPid(pid){var farm=useSelector(function(state){return state.farms.data.find(function(f){return f.pid===pid;});});return farm;};export var useFarmFromLpSymbol=function useFarmFromLpSymbol(lpSymbol){var farm=useSelector(function(state){return state.farms.data.find(function(f){return f.lpSymbol===lpSymbol;});});return farm;};export var useFarmUser=function useFarmUser(pid){var farm=useFarmFromPid(pid);return{allowance:farm.userData?new BigNumber(farm.userData.allowance):BIG_ZERO,tokenBalance:farm.userData?new BigNumber(farm.userData.tokenBalance):BIG_ZERO,stakedBalance:farm.userData?new BigNumber(farm.userData.stakedBalance):BIG_ZERO,earnings:farm.userData?new BigNumber(farm.userData.earnings):BIG_ZERO};};// Return the base token price for a farm, from a given pid\nexport var useBusdPriceFromPid=function useBusdPriceFromPid(pid){var farm=useFarmFromPid(pid);return farm&&new BigNumber(farm.token.busdPrice);};export var useLpTokenPrice=function useLpTokenPrice(symbol){var farm=useFarmFromLpSymbol(symbol);var farmTokenPriceInUsd=useBusdPriceFromPid(farm.pid);var lpTokenPrice=BIG_ZERO;if(farm.lpTotalSupply&&farm.lpTotalInQuoteToken){// Total value of base token in LP\nvar valueOfBaseTokenInFarm=farmTokenPriceInUsd.times(farm.tokenAmountTotal);// Double it to get overall value in LP\nvar overallValueOfAllTokensInFarm=valueOfBaseTokenInFarm.times(2);// Divide total value of all tokens, by the number of LP tokens\nvar totalLpTokens=getBalanceAmount(new BigNumber(farm.lpTotalSupply));lpTokenPrice=overallValueOfAllTokensInFarm.div(totalLpTokens);}return lpTokenPrice;};// /!\\ Deprecated , use the BUSD hook in /hooks\nexport var usePriceBnbBusd=function usePriceBnbBusd(){var bnbBusdFarm=useFarmFromPid(252);return new BigNumber(bnbBusdFarm.quoteToken.busdPrice);};export var usePriceCakeBusd=function usePriceCakeBusd(){var cakeBnbFarm=useFarmFromPid(251);var cakePriceBusdAsString=cakeBnbFarm.token.busdPrice;var cakePriceBusd=useMemo(function(){return new BigNumber(cakePriceBusdAsString);},[cakePriceBusdAsString]);return cakePriceBusd;};","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/state/farms/hooks.ts"],"names":["useEffect","useMemo","useSelector","useAppDispatch","useWeb3React","BigNumber","BIG_ZERO","getBalanceAmount","farmsConfig","useRefresh","fetchFarmsPublicDataAsync","fetchFarmUserDataAsync","nonArchivedFarms","usePollFarmsData","includeArchive","dispatch","slowRefresh","account","farmsToFetch","pids","map","farmToFetch","pid","usePollCoreFarmData","fastRefresh","useFarms","farms","state","useFarmFromPid","farm","data","find","f","useFarmFromLpSymbol","lpSymbol","useFarmUser","allowance","userData","tokenBalance","stakedBalance","earnings","useBusdPriceFromPid","token","busdPrice","useLpTokenPrice","symbol","farmTokenPriceInUsd","lpTokenPrice","lpTotalSupply","lpTotalInQuoteToken","valueOfBaseTokenInFarm","times","tokenAmountTotal","overallValueOfAllTokensInFarm","totalLpTokens","div","usePriceBnbBusd","bnbBusdFarm","quoteToken","usePriceCakeBusd","cakeBnbFarm","cakePriceBusdAsString","cakePriceBusd"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.'\nimport { State, Farm, FarmsState } from '../types'\n\nexport const usePollFarmsData = (includeArchive = false) => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\n\n    dispatch(fetchFarmsPublicDataAsync(pids))\n\n    if (account) {\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\n    }\n  }, [includeArchive, dispatch, slowRefresh, account])\n}\n\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\nexport const usePollCoreFarmData = () => {\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([251, 252]))\n  }, [dispatch, fastRefresh])\n}\n\nexport const useFarms = (): FarmsState => {\n  const farms = useSelector((state: State) => state.farms)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromLpSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\n  }\n}\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\n  const farm = useFarmFromPid(pid)\n  return farm && new BigNumber(farm.token.busdPrice)\n}\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromLpSymbol(symbol)\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\n  let lpTokenPrice = BIG_ZERO\n\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply))\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\n  }\n\n  return lpTokenPrice\n}\n\n// /!\\ Deprecated , use the BUSD hook in /hooks\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const bnbBusdFarm = useFarmFromPid(252)\n  return new BigNumber(bnbBusdFarm.quoteToken.busdPrice)\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const cakeBnbFarm = useFarmFromPid(251)\n\n  const cakePriceBusdAsString = cakeBnbFarm.token.busdPrice\n\n  const cakePriceBusd = useMemo(() => {\n    return new BigNumber(cakePriceBusdAsString)\n  }, [cakePriceBusdAsString])\n\n  return cakePriceBusd\n}\n"]},"metadata":{},"sourceType":"module"}