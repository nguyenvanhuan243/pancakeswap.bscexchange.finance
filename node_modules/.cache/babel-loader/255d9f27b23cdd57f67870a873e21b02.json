{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenvanhuan243/Documents/pancake-frontend/src/views/AddLiquidity/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { currencyEquals, ETHER, WETH } from '@pancakeswap/sdk';\nimport { Button, Text, Flex, AddIcon, CardBody, Message, useModal } from '@pancakeswap/uikit';\nimport { useIsTransactionUnsupported } from 'hooks/Trades';\nimport { useTranslation } from 'contexts/Localization';\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { LightCard } from '../../components/Card';\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column';\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nimport { DoubleCurrencyLogo } from '../../components/Logo';\nimport { AppHeader, AppBody } from '../../components/App';\nimport { MinimalPositionCard } from '../../components/PositionCard';\nimport Row, { RowBetween } from '../../components/Layout/Row';\nimport ConnectWalletButton from '../../components/ConnectWalletButton';\nimport { ROUTER_ADDRESS } from '../../config/constants';\nimport { PairState } from '../../hooks/usePairs';\nimport { useCurrency } from '../../hooks/Tokens';\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback';\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline';\nimport { Field } from '../../state/mint/actions';\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { useGasPrice, useIsExpertMode, useUserSlippageTolerance } from '../../state/user/hooks';\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport { wrappedCurrency } from '../../utils/wrappedCurrency';\nimport Dots from '../../components/Loader/Dots';\nimport ConfirmAddModalBottom from './ConfirmAddModalBottom';\nimport { currencyId } from '../../utils/currencyId';\nimport PoolPriceBar from './PoolPriceBar';\nimport Page from '../Page';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AddLiquidity({\n  match: {\n    params: {\n      currencyIdA,\n      currencyIdB\n    }\n  },\n  history\n}) {\n  _s();\n\n  var _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$Field$3, _parsedAmounts$Field$4, _currencies$Field$CUR7, _currencies$Field$CUR8, _parsedAmounts$Field$5, _parsedAmounts$Field$6, _currencies$Field$CUR9, _currencies$Field$CUR10, _currencies$Field$CUR11, _currencies$Field$CUR12, _currencies$Field$CUR13, _currencies$Field$CUR14;\n\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const gasPrice = useGasPrice();\n  const currencyA = useCurrency(currencyIdA);\n  const currencyB = useCurrency(currencyIdB);\n  const oneCurrencyIsWETH = Boolean(chainId && (currencyA && currencyEquals(currencyA, WETH[chainId]) || currencyB && currencyEquals(currencyB, WETH[chainId])));\n  const expertMode = useIsExpertMode(); // mint state\n\n  const {\n    independentField,\n    typedValue,\n    otherTypedValue\n  } = useMintState();\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  } = useDerivedMintInfo(currencyA !== null && currencyA !== void 0 ? currencyA : undefined, currencyB !== null && currencyB !== void 0 ? currencyB : undefined);\n  const {\n    onFieldAInput,\n    onFieldBInput\n  } = useMintActionHandlers(noLiquidity);\n  const isValid = !error; // modal and loading\n\n  const [attemptingTxn, setAttemptingTxn] = useState(false); // clicked confirm\n  // txn values\n\n  const deadline = useTransactionDeadline(); // custom from users settings\n\n  const [allowedSlippage] = useUserSlippageTolerance(); // custom from users\n\n  const [txHash, setTxHash] = useState(''); // get formatted amounts\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  }; // get the max amounts user can add\n\n  const maxAmounts = [Field.CURRENCY_A, Field.CURRENCY_B].reduce((accumulator, field) => {\n    return { ...accumulator,\n      [field]: maxAmountSpend(currencyBalances[field])\n    };\n  }, {});\n  const atMaxAmounts = [Field.CURRENCY_A, Field.CURRENCY_B].reduce((accumulator, field) => {\n    var _maxAmounts$field, _parsedAmounts$field;\n\n    return { ...accumulator,\n      [field]: (_maxAmounts$field = maxAmounts[field]) === null || _maxAmounts$field === void 0 ? void 0 : _maxAmounts$field.equalTo((_parsedAmounts$field = parsedAmounts[field]) !== null && _parsedAmounts$field !== void 0 ? _parsedAmounts$field : '0')\n    };\n  }, {}); // check whether the user has approved the router on the tokens\n\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS);\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS);\n  const addTransaction = useTransactionAdder();\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return;\n    const router = getRouterContract(chainId, library, account);\n    const {\n      [Field.CURRENCY_A]: parsedAmountA,\n      [Field.CURRENCY_B]: parsedAmountB\n    } = parsedAmounts;\n\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return;\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0]\n    };\n    let estimate;\n    let method;\n    let args;\n    let value;\n\n    if (currencyA === ETHER || currencyB === ETHER) {\n      var _wrappedCurrency$addr, _wrappedCurrency;\n\n      const tokenBIsETH = currencyB === ETHER;\n      estimate = router.estimateGas.addLiquidityETH;\n      method = router.addLiquidityETH;\n      args = [(_wrappedCurrency$addr = (_wrappedCurrency = wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)) === null || _wrappedCurrency === void 0 ? void 0 : _wrappedCurrency.address) !== null && _wrappedCurrency$addr !== void 0 ? _wrappedCurrency$addr : '', // token\n      (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n      amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n      amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n      account, deadline.toHexString()];\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString());\n    } else {\n      var _wrappedCurrency$addr2, _wrappedCurrency2, _wrappedCurrency$addr3, _wrappedCurrency3;\n\n      estimate = router.estimateGas.addLiquidity;\n      method = router.addLiquidity;\n      args = [(_wrappedCurrency$addr2 = (_wrappedCurrency2 = wrappedCurrency(currencyA, chainId)) === null || _wrappedCurrency2 === void 0 ? void 0 : _wrappedCurrency2.address) !== null && _wrappedCurrency$addr2 !== void 0 ? _wrappedCurrency$addr2 : '', (_wrappedCurrency$addr3 = (_wrappedCurrency3 = wrappedCurrency(currencyB, chainId)) === null || _wrappedCurrency3 === void 0 ? void 0 : _wrappedCurrency3.address) !== null && _wrappedCurrency$addr3 !== void 0 ? _wrappedCurrency$addr3 : '', parsedAmountA.raw.toString(), parsedAmountB.raw.toString(), amountsMin[Field.CURRENCY_A].toString(), amountsMin[Field.CURRENCY_B].toString(), account, deadline.toHexString()];\n      value = null;\n    }\n\n    setAttemptingTxn(true);\n    await estimate(...args, value ? {\n      value\n    } : {}).then(estimatedGasLimit => method(...args, { ...(value ? {\n        value\n      } : {}),\n      gasLimit: calculateGasMargin(estimatedGasLimit),\n      gasPrice\n    }).then(response => {\n      var _parsedAmounts$Field$, _currencies$Field$CUR, _parsedAmounts$Field$2, _currencies$Field$CUR2;\n\n      setAttemptingTxn(false);\n      addTransaction(response, {\n        summary: `Add ${(_parsedAmounts$Field$ = parsedAmounts[Field.CURRENCY_A]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.toSignificant(3)} ${(_currencies$Field$CUR = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR === void 0 ? void 0 : _currencies$Field$CUR.symbol} and ${(_parsedAmounts$Field$2 = parsedAmounts[Field.CURRENCY_B]) === null || _parsedAmounts$Field$2 === void 0 ? void 0 : _parsedAmounts$Field$2.toSignificant(3)} ${(_currencies$Field$CUR2 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR2 === void 0 ? void 0 : _currencies$Field$CUR2.symbol}`\n      });\n      setTxHash(response.hash);\n    })).catch(err => {\n      setAttemptingTxn(false); // we only care if the error is something _other_ than the user rejected the tx\n\n      if ((err === null || err === void 0 ? void 0 : err.code) !== 4001) {\n        console.error(err);\n      }\n    });\n  }\n\n  const modalHeader = () => {\n    var _currencies$Field$CUR3, _currencies$Field$CUR4, _currencies$Field$CUR5, _currencies$Field$CUR6;\n\n    return noLiquidity ? /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"48px\",\n        marginRight: \"10px\",\n        children: `${(_currencies$Field$CUR3 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR3 === void 0 ? void 0 : _currencies$Field$CUR3.symbol}/${(_currencies$Field$CUR4 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR4 === void 0 ? void 0 : _currencies$Field$CUR4.symbol}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DoubleCurrencyLogo, {\n        currency0: currencies[Field.CURRENCY_A],\n        currency1: currencies[Field.CURRENCY_B],\n        size: 30\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(AutoColumn, {\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"48px\",\n          marginRight: \"10px\",\n          children: liquidityMinted === null || liquidityMinted === void 0 ? void 0 : liquidityMinted.toSignificant(6)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DoubleCurrencyLogo, {\n          currency0: currencies[Field.CURRENCY_A],\n          currency1: currencies[Field.CURRENCY_B],\n          size: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"24px\",\n          children: `${(_currencies$Field$CUR5 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR5 === void 0 ? void 0 : _currencies$Field$CUR5.symbol}/${(_currencies$Field$CUR6 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR6 === void 0 ? void 0 : _currencies$Field$CUR6.symbol} Pool Tokens`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        small: true,\n        textAlign: \"left\",\n        my: \"24px\",\n        children: t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\n          slippage: allowedSlippage / 100\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  };\n\n  const modalBottom = () => {\n    return /*#__PURE__*/_jsxDEV(ConfirmAddModalBottom, {\n      price: price,\n      currencies: currencies,\n      parsedAmounts: parsedAmounts,\n      noLiquidity: noLiquidity,\n      onAdd: onAdd,\n      poolTokenPercentage: poolTokenPercentage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this);\n  };\n\n  const pendingText = t('Supplying %amountA% %symbolA% and %amountB% %symbolB%', {\n    amountA: (_parsedAmounts$Field$3 = (_parsedAmounts$Field$4 = parsedAmounts[Field.CURRENCY_A]) === null || _parsedAmounts$Field$4 === void 0 ? void 0 : _parsedAmounts$Field$4.toSignificant(6)) !== null && _parsedAmounts$Field$3 !== void 0 ? _parsedAmounts$Field$3 : '',\n    symbolA: (_currencies$Field$CUR7 = (_currencies$Field$CUR8 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR8 === void 0 ? void 0 : _currencies$Field$CUR8.symbol) !== null && _currencies$Field$CUR7 !== void 0 ? _currencies$Field$CUR7 : '',\n    amountB: (_parsedAmounts$Field$5 = (_parsedAmounts$Field$6 = parsedAmounts[Field.CURRENCY_B]) === null || _parsedAmounts$Field$6 === void 0 ? void 0 : _parsedAmounts$Field$6.toSignificant(6)) !== null && _parsedAmounts$Field$5 !== void 0 ? _parsedAmounts$Field$5 : '',\n    symbolB: (_currencies$Field$CUR9 = (_currencies$Field$CUR10 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR10 === void 0 ? void 0 : _currencies$Field$CUR10.symbol) !== null && _currencies$Field$CUR9 !== void 0 ? _currencies$Field$CUR9 : ''\n  });\n  const handleCurrencyASelect = useCallback(currencyA_ => {\n    const newCurrencyIdA = currencyId(currencyA_);\n\n    if (newCurrencyIdA === currencyIdB) {\n      history.push(`/add/${currencyIdB}/${currencyIdA}`);\n    } else {\n      history.push(`/add/${newCurrencyIdA}/${currencyIdB}`);\n    }\n  }, [currencyIdB, history, currencyIdA]);\n  const handleCurrencyBSelect = useCallback(currencyB_ => {\n    const newCurrencyIdB = currencyId(currencyB_);\n\n    if (currencyIdA === newCurrencyIdB) {\n      if (currencyIdB) {\n        history.push(`/add/${currencyIdB}/${newCurrencyIdB}`);\n      } else {\n        history.push(`/add/${newCurrencyIdB}`);\n      }\n    } else {\n      history.push(`/add/${currencyIdA || 'BNB'}/${newCurrencyIdB}`);\n    }\n  }, [currencyIdA, history, currencyIdB]);\n  const handleDismissConfirmation = useCallback(() => {\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('');\n    }\n\n    setTxHash('');\n  }, [onFieldAInput, txHash]);\n  const addIsUnsupported = useIsTransactionUnsupported(currencies === null || currencies === void 0 ? void 0 : currencies.CURRENCY_A, currencies === null || currencies === void 0 ? void 0 : currencies.CURRENCY_B);\n  const [onPresentAddLiquidityModal] = useModal( /*#__PURE__*/_jsxDEV(TransactionConfirmationModal, {\n    title: noLiquidity ? t('You are creating a pool') : t('You will receive'),\n    customOnDismiss: handleDismissConfirmation,\n    attemptingTxn: attemptingTxn,\n    hash: txHash,\n    content: () => /*#__PURE__*/_jsxDEV(ConfirmationModalContent, {\n      topContent: modalHeader,\n      bottomContent: modalBottom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 22\n    }, this),\n    pendingText: pendingText,\n    currencyToAdd: pair === null || pair === void 0 ? void 0 : pair.liquidityToken\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this), true, true, 'addLiquidityModal');\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(AppBody, {\n      children: [/*#__PURE__*/_jsxDEV(AppHeader, {\n        title: t('Add Liquidity'),\n        subtitle: t('Add liquidity to receive LP tokens'),\n        helper: t('Liquidity providers earn a 0.17% trading fee on all trades made for that token pair, proportional to their share of the liquidity pool.'),\n        backTo: \"/pool\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n        children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n          gap: \"20px\",\n          children: [noLiquidity && /*#__PURE__*/_jsxDEV(ColumnCenter, {\n            children: /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"warning\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Text, {\n                  bold: true,\n                  mb: \"8px\",\n                  children: t('You are the first liquidity provider.')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 324,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Text, {\n                  mb: \"8px\",\n                  children: t('The ratio of tokens you add will set the price of this pool.')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Text, {\n                  children: t('Once you are happy with the rate click supply to review.')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 328,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            value: formattedAmounts[Field.CURRENCY_A],\n            onUserInput: onFieldAInput,\n            onMax: () => {\n              var _maxAmounts$Field$CUR, _maxAmounts$Field$CUR2;\n\n              onFieldAInput((_maxAmounts$Field$CUR = (_maxAmounts$Field$CUR2 = maxAmounts[Field.CURRENCY_A]) === null || _maxAmounts$Field$CUR2 === void 0 ? void 0 : _maxAmounts$Field$CUR2.toExact()) !== null && _maxAmounts$Field$CUR !== void 0 ? _maxAmounts$Field$CUR : '');\n            },\n            onCurrencySelect: handleCurrencyASelect,\n            showMaxButton: !atMaxAmounts[Field.CURRENCY_A],\n            currency: currencies[Field.CURRENCY_A],\n            id: \"add-liquidity-input-tokena\",\n            showCommonBases: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ColumnCenter, {\n            children: /*#__PURE__*/_jsxDEV(AddIcon, {\n              width: \"16px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            value: formattedAmounts[Field.CURRENCY_B],\n            onUserInput: onFieldBInput,\n            onCurrencySelect: handleCurrencyBSelect,\n            onMax: () => {\n              var _maxAmounts$Field$CUR3, _maxAmounts$Field$CUR4;\n\n              onFieldBInput((_maxAmounts$Field$CUR3 = (_maxAmounts$Field$CUR4 = maxAmounts[Field.CURRENCY_B]) === null || _maxAmounts$Field$CUR4 === void 0 ? void 0 : _maxAmounts$Field$CUR4.toExact()) !== null && _maxAmounts$Field$CUR3 !== void 0 ? _maxAmounts$Field$CUR3 : '');\n            },\n            showMaxButton: !atMaxAmounts[Field.CURRENCY_B],\n            currency: currencies[Field.CURRENCY_B],\n            id: \"add-liquidity-input-tokenb\",\n            showCommonBases: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this), currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(LightCard, {\n              padding: \"0px\",\n              borderRadius: \"20px\",\n              children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n                padding: \"1rem\",\n                children: /*#__PURE__*/_jsxDEV(Text, {\n                  fontSize: \"14px\",\n                  children: noLiquidity ? t('Initial prices and pool share') : t('Prices and pool share')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 19\n              }, this), ' ', /*#__PURE__*/_jsxDEV(LightCard, {\n                padding: \"1rem\",\n                borderRadius: \"20px\",\n                children: /*#__PURE__*/_jsxDEV(PoolPriceBar, {\n                  currencies: currencies,\n                  poolTokenPercentage: poolTokenPercentage,\n                  noLiquidity: noLiquidity,\n                  price: price\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 17\n            }, this)\n          }, void 0, false), addIsUnsupported ? /*#__PURE__*/_jsxDEV(Button, {\n            disabled: true,\n            mb: \"4px\",\n            children: t('Unsupported Asset')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 15\n          }, this) : !account ? /*#__PURE__*/_jsxDEV(ConnectWalletButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(AutoColumn, {\n            gap: \"md\",\n            children: [(approvalA === ApprovalState.NOT_APPROVED || approvalA === ApprovalState.PENDING || approvalB === ApprovalState.NOT_APPROVED || approvalB === ApprovalState.PENDING) && isValid && /*#__PURE__*/_jsxDEV(RowBetween, {\n              children: [approvalA !== ApprovalState.APPROVED && /*#__PURE__*/_jsxDEV(Button, {\n                onClick: approveACallback,\n                disabled: approvalA === ApprovalState.PENDING,\n                width: approvalB !== ApprovalState.APPROVED ? '48%' : '100%',\n                children: approvalA === ApprovalState.PENDING ? /*#__PURE__*/_jsxDEV(Dots, {\n                  children: t('Enabling %asset%', {\n                    asset: (_currencies$Field$CUR11 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR11 === void 0 ? void 0 : _currencies$Field$CUR11.symbol\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 401,\n                  columnNumber: 29\n                }, this) : t('Enable %asset%', {\n                  asset: (_currencies$Field$CUR12 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR12 === void 0 ? void 0 : _currencies$Field$CUR12.symbol\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 25\n              }, this), approvalB !== ApprovalState.APPROVED && /*#__PURE__*/_jsxDEV(Button, {\n                onClick: approveBCallback,\n                disabled: approvalB === ApprovalState.PENDING,\n                width: approvalA !== ApprovalState.APPROVED ? '48%' : '100%',\n                children: approvalB === ApprovalState.PENDING ? /*#__PURE__*/_jsxDEV(Dots, {\n                  children: t('Enabling %asset%', {\n                    asset: (_currencies$Field$CUR13 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR13 === void 0 ? void 0 : _currencies$Field$CUR13.symbol\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 29\n                }, this) : t('Enable %asset%', {\n                  asset: (_currencies$Field$CUR14 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR14 === void 0 ? void 0 : _currencies$Field$CUR14.symbol\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B] ? 'danger' : 'primary',\n              onClick: () => {\n                if (expertMode) {\n                  onAdd();\n                } else {\n                  onPresentAddLiquidityModal();\n                }\n              },\n              disabled: !isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED,\n              children: error !== null && error !== void 0 ? error : t('Supply')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), !addIsUnsupported ? pair && !noLiquidity && pairState !== PairState.INVALID ? /*#__PURE__*/_jsxDEV(AutoColumn, {\n      style: {\n        minWidth: '20rem',\n        width: '100%',\n        maxWidth: '400px',\n        marginTop: '1rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(MinimalPositionCard, {\n        showUnwrapped: oneCurrencyIsWETH,\n        pair: pair\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 11\n    }, this) : null : /*#__PURE__*/_jsxDEV(UnsupportedCurrencyFooter, {\n      currencies: [currencies.CURRENCY_A, currencies.CURRENCY_B]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddLiquidity, \"d/mBDyPTkU12rfA6Ch79ofmiVnM=\", false, function () {\n  return [useActiveWeb3React, useTranslation, useGasPrice, useCurrency, useCurrency, useIsExpertMode, useMintState, useDerivedMintInfo, useMintActionHandlers, useTransactionDeadline, useUserSlippageTolerance, useApproveCallback, useApproveCallback, useTransactionAdder, useIsTransactionUnsupported, useModal];\n});\n\n_c = AddLiquidity;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLiquidity\");","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/views/AddLiquidity/index.tsx"],"names":["React","useCallback","useState","BigNumber","currencyEquals","ETHER","WETH","Button","Text","Flex","AddIcon","CardBody","Message","useModal","useIsTransactionUnsupported","useTranslation","UnsupportedCurrencyFooter","useActiveWeb3React","LightCard","AutoColumn","ColumnCenter","TransactionConfirmationModal","ConfirmationModalContent","CurrencyInputPanel","DoubleCurrencyLogo","AppHeader","AppBody","MinimalPositionCard","Row","RowBetween","ConnectWalletButton","ROUTER_ADDRESS","PairState","useCurrency","ApprovalState","useApproveCallback","useTransactionDeadline","Field","useDerivedMintInfo","useMintActionHandlers","useMintState","useTransactionAdder","useGasPrice","useIsExpertMode","useUserSlippageTolerance","calculateGasMargin","calculateSlippageAmount","getRouterContract","maxAmountSpend","wrappedCurrency","Dots","ConfirmAddModalBottom","currencyId","PoolPriceBar","Page","AddLiquidity","match","params","currencyIdA","currencyIdB","history","account","chainId","library","t","gasPrice","currencyA","currencyB","oneCurrencyIsWETH","Boolean","expertMode","independentField","typedValue","otherTypedValue","dependentField","currencies","pair","pairState","currencyBalances","parsedAmounts","price","noLiquidity","liquidityMinted","poolTokenPercentage","error","undefined","onFieldAInput","onFieldBInput","isValid","attemptingTxn","setAttemptingTxn","deadline","allowedSlippage","txHash","setTxHash","formattedAmounts","toSignificant","maxAmounts","CURRENCY_A","CURRENCY_B","reduce","accumulator","field","atMaxAmounts","equalTo","approvalA","approveACallback","approvalB","approveBCallback","addTransaction","onAdd","router","parsedAmountA","parsedAmountB","amountsMin","estimate","method","args","value","tokenBIsETH","estimateGas","addLiquidityETH","address","raw","toString","toHexString","from","addLiquidity","then","estimatedGasLimit","gasLimit","response","summary","symbol","hash","catch","err","code","console","modalHeader","slippage","modalBottom","pendingText","amountA","symbolA","amountB","symbolB","handleCurrencyASelect","currencyA_","newCurrencyIdA","push","handleCurrencyBSelect","currencyB_","newCurrencyIdB","handleDismissConfirmation","addIsUnsupported","onPresentAddLiquidityModal","liquidityToken","toExact","INVALID","NOT_APPROVED","PENDING","APPROVED","asset","minWidth","width","maxWidth","marginTop"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Currency, currencyEquals, ETHER, TokenAmount, WETH } from '@pancakeswap/sdk'\nimport { Button, Text, Flex, AddIcon, CardBody, Message, useModal } from '@pancakeswap/uikit'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\nimport { useTranslation } from 'contexts/Localization'\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { DoubleCurrencyLogo } from '../../components/Logo'\nimport { AppHeader, AppBody } from '../../components/App'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row, { RowBetween } from '../../components/Layout/Row'\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\n\nimport { ROUTER_ADDRESS } from '../../config/constants'\nimport { PairState } from '../../hooks/usePairs'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { Field } from '../../state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { useGasPrice, useIsExpertMode, useUserSlippageTolerance } from '../../state/user/hooks'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport Dots from '../../components/Loader/Dots'\nimport ConfirmAddModalBottom from './ConfirmAddModalBottom'\nimport { currencyId } from '../../utils/currencyId'\nimport PoolPriceBar from './PoolPriceBar'\nimport Page from '../Page'\n\nexport default function AddLiquidity({\n  match: {\n    params: { currencyIdA, currencyIdB },\n  },\n  history,\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\n  const { account, chainId, library } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const gasPrice = useGasPrice()\n\n  const currencyA = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n\n  const oneCurrencyIsWETH = Boolean(\n    chainId &&\n      ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\n        (currencyB && currencyEquals(currencyB, WETH[chainId]))),\n  )\n\n  const expertMode = useIsExpertMode()\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\n\n  const isValid = !error\n\n  // modal and loading\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\n\n  // txn values\n  const deadline = useTransactionDeadline() // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n  const [txHash, setTxHash] = useState<string>('')\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {},\n  )\n\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n      }\n    },\n    {},\n  )\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS)\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS)\n\n  const addTransaction = useTransactionAdder()\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return\n    const router = getRouterContract(chainId, library, account)\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\n    }\n\n    let estimate\n    let method: (...args: any) => Promise<TransactionResponse>\n    let args: Array<string | string[] | number>\n    let value: BigNumber | null\n    if (currencyA === ETHER || currencyB === ETHER) {\n      const tokenBIsETH = currencyB === ETHER\n      estimate = router.estimateGas.addLiquidityETH\n      method = router.addLiquidityETH\n      args = [\n        wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)?.address ?? '', // token\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n        account,\n        deadline.toHexString(),\n      ]\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString())\n    } else {\n      estimate = router.estimateGas.addLiquidity\n      method = router.addLiquidity\n      args = [\n        wrappedCurrency(currencyA, chainId)?.address ?? '',\n        wrappedCurrency(currencyB, chainId)?.address ?? '',\n        parsedAmountA.raw.toString(),\n        parsedAmountB.raw.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadline.toHexString(),\n      ]\n      value = null\n    }\n\n    setAttemptingTxn(true)\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n          gasPrice,\n        }).then((response) => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            summary: `Add ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\n              currencies[Field.CURRENCY_A]?.symbol\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencies[Field.CURRENCY_B]?.symbol}`,\n          })\n\n          setTxHash(response.hash)\n        }),\n      )\n      .catch((err) => {\n        setAttemptingTxn(false)\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (err?.code !== 4001) {\n          console.error(err)\n        }\n      })\n  }\n\n  const modalHeader = () => {\n    return noLiquidity ? (\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"48px\" marginRight=\"10px\">\n          {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol}`}\n        </Text>\n        <DoubleCurrencyLogo\n          currency0={currencies[Field.CURRENCY_A]}\n          currency1={currencies[Field.CURRENCY_B]}\n          size={30}\n        />\n      </Flex>\n    ) : (\n      <AutoColumn>\n        <Flex alignItems=\"center\">\n          <Text fontSize=\"48px\" marginRight=\"10px\">\n            {liquidityMinted?.toSignificant(6)}\n          </Text>\n          <DoubleCurrencyLogo\n            currency0={currencies[Field.CURRENCY_A]}\n            currency1={currencies[Field.CURRENCY_B]}\n            size={30}\n          />\n        </Flex>\n        <Row>\n          <Text fontSize=\"24px\">\n            {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol} Pool Tokens`}\n          </Text>\n        </Row>\n        <Text small textAlign=\"left\" my=\"24px\">\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\n            slippage: allowedSlippage / 100,\n          })}\n        </Text>\n      </AutoColumn>\n    )\n  }\n\n  const modalBottom = () => {\n    return (\n      <ConfirmAddModalBottom\n        price={price}\n        currencies={currencies}\n        parsedAmounts={parsedAmounts}\n        noLiquidity={noLiquidity}\n        onAdd={onAdd}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    )\n  }\n\n  const pendingText = t('Supplying %amountA% %symbolA% and %amountB% %symbolB%', {\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    symbolA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n    symbolB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n  })\n\n  const handleCurrencyASelect = useCallback(\n    (currencyA_: Currency) => {\n      const newCurrencyIdA = currencyId(currencyA_)\n      if (newCurrencyIdA === currencyIdB) {\n        history.push(`/add/${currencyIdB}/${currencyIdA}`)\n      } else {\n        history.push(`/add/${newCurrencyIdA}/${currencyIdB}`)\n      }\n    },\n    [currencyIdB, history, currencyIdA],\n  )\n  const handleCurrencyBSelect = useCallback(\n    (currencyB_: Currency) => {\n      const newCurrencyIdB = currencyId(currencyB_)\n      if (currencyIdA === newCurrencyIdB) {\n        if (currencyIdB) {\n          history.push(`/add/${currencyIdB}/${newCurrencyIdB}`)\n        } else {\n          history.push(`/add/${newCurrencyIdB}`)\n        }\n      } else {\n        history.push(`/add/${currencyIdA || 'BNB'}/${newCurrencyIdB}`)\n      }\n    },\n    [currencyIdA, history, currencyIdB],\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n    }\n    setTxHash('')\n  }, [onFieldAInput, txHash])\n\n  const addIsUnsupported = useIsTransactionUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n\n  const [onPresentAddLiquidityModal] = useModal(\n    <TransactionConfirmationModal\n      title={noLiquidity ? t('You are creating a pool') : t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      content={() => <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />}\n      pendingText={pendingText}\n      currencyToAdd={pair?.liquidityToken}\n    />,\n    true,\n    true,\n    'addLiquidityModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader\n          title={t('Add Liquidity')}\n          subtitle={t('Add liquidity to receive LP tokens')}\n          helper={t(\n            'Liquidity providers earn a 0.17% trading fee on all trades made for that token pair, proportional to their share of the liquidity pool.',\n          )}\n          backTo=\"/pool\"\n        />\n        <CardBody>\n          <AutoColumn gap=\"20px\">\n            {noLiquidity && (\n              <ColumnCenter>\n                <Message variant=\"warning\">\n                  <div>\n                    <Text bold mb=\"8px\">\n                      {t('You are the first liquidity provider.')}\n                    </Text>\n                    <Text mb=\"8px\">{t('The ratio of tokens you add will set the price of this pool.')}</Text>\n                    <Text>{t('Once you are happy with the rate click supply to review.')}</Text>\n                  </div>\n                </Message>\n              </ColumnCenter>\n            )}\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_A]}\n              onUserInput={onFieldAInput}\n              onMax={() => {\n                onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n              }}\n              onCurrencySelect={handleCurrencyASelect}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n              currency={currencies[Field.CURRENCY_A]}\n              id=\"add-liquidity-input-tokena\"\n              showCommonBases\n            />\n            <ColumnCenter>\n              <AddIcon width=\"16px\" />\n            </ColumnCenter>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_B]}\n              onUserInput={onFieldBInput}\n              onCurrencySelect={handleCurrencyBSelect}\n              onMax={() => {\n                onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n              }}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n              currency={currencies[Field.CURRENCY_B]}\n              id=\"add-liquidity-input-tokenb\"\n              showCommonBases\n            />\n            {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n              <>\n                <LightCard padding=\"0px\" borderRadius=\"20px\">\n                  <RowBetween padding=\"1rem\">\n                    <Text fontSize=\"14px\">\n                      {noLiquidity ? t('Initial prices and pool share') : t('Prices and pool share')}\n                    </Text>\n                  </RowBetween>{' '}\n                  <LightCard padding=\"1rem\" borderRadius=\"20px\">\n                    <PoolPriceBar\n                      currencies={currencies}\n                      poolTokenPercentage={poolTokenPercentage}\n                      noLiquidity={noLiquidity}\n                      price={price}\n                    />\n                  </LightCard>\n                </LightCard>\n              </>\n            )}\n\n            {addIsUnsupported ? (\n              <Button disabled mb=\"4px\">\n                {t('Unsupported Asset')}\n              </Button>\n            ) : !account ? (\n              <ConnectWalletButton />\n            ) : (\n              <AutoColumn gap=\"md\">\n                {(approvalA === ApprovalState.NOT_APPROVED ||\n                  approvalA === ApprovalState.PENDING ||\n                  approvalB === ApprovalState.NOT_APPROVED ||\n                  approvalB === ApprovalState.PENDING) &&\n                  isValid && (\n                    <RowBetween>\n                      {approvalA !== ApprovalState.APPROVED && (\n                        <Button\n                          onClick={approveACallback}\n                          disabled={approvalA === ApprovalState.PENDING}\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalA === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                      {approvalB !== ApprovalState.APPROVED && (\n                        <Button\n                          onClick={approveBCallback}\n                          disabled={approvalB === ApprovalState.PENDING}\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalB === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                    </RowBetween>\n                  )}\n                <Button\n                  variant={\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\n                      ? 'danger'\n                      : 'primary'\n                  }\n                  onClick={() => {\n                    if (expertMode) {\n                      onAdd()\n                    } else {\n                      onPresentAddLiquidityModal()\n                    }\n                  }}\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\n                >\n                  {error ?? t('Supply')}\n                </Button>\n              </AutoColumn>\n            )}\n          </AutoColumn>\n        </CardBody>\n      </AppBody>\n      {!addIsUnsupported ? (\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\n          <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n          </AutoColumn>\n        ) : null\n      ) : (\n        <UnsupportedCurrencyFooter currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]} />\n      )}\n    </Page>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}