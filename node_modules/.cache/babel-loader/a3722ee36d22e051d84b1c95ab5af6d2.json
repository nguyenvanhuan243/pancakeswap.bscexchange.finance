{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useAppDispatch } from 'state';\nimport { orderBy } from 'lodash';\nimport { fetchCakeVaultFees, fetchPoolsPublicDataAsync } from 'state/pools';\nimport { simpleRpcProvider } from 'utils/providers';\nimport { useSelector } from 'react-redux';\nimport { useCakeVault } from 'state/pools/hooks';\nimport { getAprData } from 'views/Pools/helpers';\nvar FetchStatus;\n\n(function (FetchStatus) {\n  FetchStatus[\"NOT_FETCHED\"] = \"not-fetched\";\n  FetchStatus[\"FETCHING\"] = \"fetching\";\n  FetchStatus[\"SUCCESS\"] = \"success\";\n  FetchStatus[\"FAILED\"] = \"failed\";\n})(FetchStatus || (FetchStatus = {}));\n\nconst useGetTopPoolsByApr = isIntersecting => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    pools: poolsWithoutAutoVault\n  } = useSelector(state => ({\n    pools: state.pools.data,\n    userDataLoaded: state.pools.userDataLoaded\n  }));\n  const {\n    fees: {\n      performanceFee\n    }\n  } = useCakeVault();\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100;\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED);\n  const [topPools, setTopPools] = useState([null, null, null, null, null]);\n  const pools = useMemo(() => {\n    const activePools = poolsWithoutAutoVault.filter(pool => !pool.isFinished);\n    const cakePool = activePools.find(pool => pool.sousId === 0);\n    const cakeAutoVault = { ...cakePool,\n      isAutoVault: true\n    };\n    const cakeAutoVaultWithApr = { ...cakeAutoVault,\n      apr: getAprData(cakeAutoVault, performanceFeeAsDecimal).apr\n    };\n    return [cakeAutoVaultWithApr, ...poolsWithoutAutoVault];\n  }, [poolsWithoutAutoVault, performanceFeeAsDecimal]);\n  const cakePriceBusd = usePriceCakeBusd();\n  useEffect(() => {\n    const fetchPoolsPublicData = async () => {\n      setFetchStatus(FetchStatus.FETCHING);\n      const blockNumber = await simpleRpcProvider.getBlockNumber();\n\n      try {\n        await dispatch(fetchCakeVaultFees());\n        await dispatch(fetchPoolsPublicDataAsync(blockNumber));\n        setFetchStatus(FetchStatus.SUCCESS);\n      } catch (e) {\n        console.error(e);\n        setFetchStatus(FetchStatus.FAILED);\n      }\n    };\n\n    if (isIntersecting && fetchStatus === FetchStatus.NOT_FETCHED) {\n      fetchPoolsPublicData();\n    }\n  }, [dispatch, setFetchStatus, fetchStatus, topPools, isIntersecting]);\n  useEffect(() => {\n    const getTopPoolsByApr = activePools => {\n      const sortedByApr = orderBy(activePools, pool => pool.apr || 0, 'desc');\n      setTopPools(sortedByApr.slice(0, 5));\n    };\n\n    if (fetchStatus === FetchStatus.SUCCESS && !topPools[0]) {\n      getTopPoolsByApr(pools);\n    }\n  }, [setTopPools, pools, fetchStatus, cakePriceBusd, topPools, performanceFeeAsDecimal]);\n  return {\n    topPools\n  };\n};\n\n_s(useGetTopPoolsByApr, \"Chlh+X8FyMcQFDpfZgtCRx8Dt8o=\", false, function () {\n  return [useAppDispatch, useSelector, useCakeVault, usePriceCakeBusd];\n});\n\nexport default useGetTopPoolsByApr;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/views/Home/hooks/useGetTopPoolsByApr.tsx"],"names":["useState","useEffect","useMemo","usePriceCakeBusd","useAppDispatch","orderBy","fetchCakeVaultFees","fetchPoolsPublicDataAsync","simpleRpcProvider","useSelector","useCakeVault","getAprData","FetchStatus","useGetTopPoolsByApr","isIntersecting","dispatch","pools","poolsWithoutAutoVault","state","data","userDataLoaded","fees","performanceFee","performanceFeeAsDecimal","fetchStatus","setFetchStatus","NOT_FETCHED","topPools","setTopPools","activePools","filter","pool","isFinished","cakePool","find","sousId","cakeAutoVault","isAutoVault","cakeAutoVaultWithApr","apr","cakePriceBusd","fetchPoolsPublicData","FETCHING","blockNumber","getBlockNumber","SUCCESS","e","console","error","FAILED","getTopPoolsByApr","sortedByApr","slice"],"mappings":"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","sourcesContent":["import { useState, useEffect, useMemo } from 'react'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useAppDispatch } from 'state'\nimport { orderBy } from 'lodash'\nimport { Pool, State } from 'state/types'\nimport { fetchCakeVaultFees, fetchPoolsPublicDataAsync } from 'state/pools'\nimport { simpleRpcProvider } from 'utils/providers'\nimport { useSelector } from 'react-redux'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { getAprData } from 'views/Pools/helpers'\n\nenum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  FETCHING = 'fetching',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useGetTopPoolsByApr = (isIntersecting: boolean) => {\n  const dispatch = useAppDispatch()\n  const { pools: poolsWithoutAutoVault } = useSelector((state: State) => ({\n    pools: state.pools.data,\n    userDataLoaded: state.pools.userDataLoaded,\n  }))\n  const {\n    fees: { performanceFee },\n  } = useCakeVault()\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED)\n  const [topPools, setTopPools] = useState<Pool[]>([null, null, null, null, null])\n\n  const pools = useMemo(() => {\n    const activePools = poolsWithoutAutoVault.filter((pool) => !pool.isFinished)\n    const cakePool = activePools.find((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n    const cakeAutoVaultWithApr = { ...cakeAutoVault, apr: getAprData(cakeAutoVault, performanceFeeAsDecimal).apr }\n    return [cakeAutoVaultWithApr, ...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault, performanceFeeAsDecimal])\n\n  const cakePriceBusd = usePriceCakeBusd()\n\n  useEffect(() => {\n    const fetchPoolsPublicData = async () => {\n      setFetchStatus(FetchStatus.FETCHING)\n      const blockNumber = await simpleRpcProvider.getBlockNumber()\n\n      try {\n        await dispatch(fetchCakeVaultFees())\n        await dispatch(fetchPoolsPublicDataAsync(blockNumber))\n        setFetchStatus(FetchStatus.SUCCESS)\n      } catch (e) {\n        console.error(e)\n        setFetchStatus(FetchStatus.FAILED)\n      }\n    }\n\n    if (isIntersecting && fetchStatus === FetchStatus.NOT_FETCHED) {\n      fetchPoolsPublicData()\n    }\n  }, [dispatch, setFetchStatus, fetchStatus, topPools, isIntersecting])\n\n  useEffect(() => {\n    const getTopPoolsByApr = (activePools: Pool[]) => {\n      const sortedByApr = orderBy(activePools, (pool: Pool) => pool.apr || 0, 'desc')\n      setTopPools(sortedByApr.slice(0, 5))\n    }\n    if (fetchStatus === FetchStatus.SUCCESS && !topPools[0]) {\n      getTopPoolsByApr(pools)\n    }\n  }, [setTopPools, pools, fetchStatus, cakePriceBusd, topPools, performanceFeeAsDecimal])\n\n  return { topPools }\n}\n\nexport default useGetTopPoolsByApr\n"]},"metadata":{},"sourceType":"module"}