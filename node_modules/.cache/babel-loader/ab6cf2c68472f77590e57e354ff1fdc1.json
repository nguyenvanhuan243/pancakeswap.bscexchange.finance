{"ast":null,"code":"import React,{useEffect,useRef}from'react';import{useCountUp}from'react-countup';import{Card,CardBody,Flex,PlayCircleOutlineIcon,Skeleton,Text,TooltipText,useTooltip}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{BetPosition}from'state/types';import{formatBigNumberToFixed}from'utils/formatBalance';import{useGetLastOraclePrice,useGetBufferSeconds}from'state/predictions/hooks';import RoundProgress from'components/RoundProgress';import{formatUsdv2,getHasRoundFailed,getPriceDifference}from'../../helpers';import PositionTag from'../PositionTag';import{RoundResultBox,LockPriceRow,PrizePoolRow}from'../RoundResult';import MultiplierArrow from'./MultiplierArrow';import CardHeader from'./CardHeader';import CanceledRoundCard from'./CanceledRoundCard';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var LiveRoundCard=function LiveRoundCard(_ref){var round=_ref.round,betAmount=_ref.betAmount,hasEnteredUp=_ref.hasEnteredUp,hasEnteredDown=_ref.hasEnteredDown,bullMultiplier=_ref.bullMultiplier,bearMultiplier=_ref.bearMultiplier;var _useTranslation=useTranslation(),t=_useTranslation.t;var lockPrice=round.lockPrice,totalAmount=round.totalAmount,lockTimestamp=round.lockTimestamp,closeTimestamp=round.closeTimestamp;var price=useGetLastOraclePrice();var bufferSeconds=useGetBufferSeconds();var isBull=lockPrice&&price.gt(lockPrice);var priceColor=isBull?'success':'failure';var priceDifference=getPriceDifference(price,lockPrice);var priceAsNumber=parseFloat(formatBigNumberToFixed(price,3,8));var hasRoundFailed=getHasRoundFailed(round,bufferSeconds);var _useCountUp=useCountUp({start:0,end:priceAsNumber,duration:1,decimals:3}),countUp=_useCountUp.countUp,update=_useCountUp.update;var _useTooltip=useTooltip(t('Last price from Chainlink Oracle'),{placement:'bottom'}),targetRef=_useTooltip.targetRef,tooltip=_useTooltip.tooltip,tooltipVisible=_useTooltip.tooltipVisible;var updateRef=useRef(update);useEffect(function(){updateRef.current(priceAsNumber);},[priceAsNumber,updateRef]);if(hasRoundFailed){return/*#__PURE__*/_jsx(CanceledRoundCard,{round:round});}return/*#__PURE__*/_jsxs(Card,{isActive:true,children:[/*#__PURE__*/_jsx(CardHeader,{status:\"live\",icon:/*#__PURE__*/_jsx(PlayCircleOutlineIcon,{mr:\"4px\",width:\"24px\",color:\"secondary\"}),title:t('Live'),epoch:round.epoch}),/*#__PURE__*/_jsx(RoundProgress,{variant:\"flat\",scale:\"sm\",lockTimestamp:lockTimestamp,closeTimestamp:closeTimestamp}),/*#__PURE__*/_jsxs(CardBody,{p:\"16px\",children:[/*#__PURE__*/_jsx(MultiplierArrow,{betAmount:betAmount,multiplier:bullMultiplier,hasEntered:hasEnteredUp,isActive:isBull}),/*#__PURE__*/_jsxs(RoundResultBox,{betPosition:isBull?BetPosition.BULL:BetPosition.BEAR,children:[/*#__PURE__*/_jsx(Text,{color:\"textSubtle\",fontSize:\"12px\",bold:true,textTransform:\"uppercase\",mb:\"8px\",children:t('Last Price')}),/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"space-between\",mb:\"16px\",height:\"36px\",children:[/*#__PURE__*/_jsx(\"div\",{ref:targetRef,children:/*#__PURE__*/_jsx(TooltipText,{bold:true,color:priceColor,fontSize:\"24px\",style:{minHeight:'36px'},children:price.gt(0)?\"$\".concat(countUp):/*#__PURE__*/_jsx(Skeleton,{height:\"36px\",width:\"94px\"})})}),/*#__PURE__*/_jsx(PositionTag,{betPosition:isBull?BetPosition.BULL:BetPosition.BEAR,children:formatUsdv2(priceDifference)})]}),lockPrice&&/*#__PURE__*/_jsx(LockPriceRow,{lockPrice:lockPrice}),/*#__PURE__*/_jsx(PrizePoolRow,{totalAmount:totalAmount})]}),/*#__PURE__*/_jsx(MultiplierArrow,{betAmount:betAmount,multiplier:bearMultiplier,betPosition:BetPosition.BEAR,hasEntered:hasEnteredDown,isActive:!isBull})]}),tooltipVisible&&tooltip]});};export default LiveRoundCard;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Predictions/components/RoundCard/LiveRoundCard.tsx"],"names":["React","useEffect","useRef","useCountUp","Card","CardBody","Flex","PlayCircleOutlineIcon","Skeleton","Text","TooltipText","useTooltip","useTranslation","BetPosition","formatBigNumberToFixed","useGetLastOraclePrice","useGetBufferSeconds","RoundProgress","formatUsdv2","getHasRoundFailed","getPriceDifference","PositionTag","RoundResultBox","LockPriceRow","PrizePoolRow","MultiplierArrow","CardHeader","CanceledRoundCard","LiveRoundCard","round","betAmount","hasEnteredUp","hasEnteredDown","bullMultiplier","bearMultiplier","t","lockPrice","totalAmount","lockTimestamp","closeTimestamp","price","bufferSeconds","isBull","gt","priceColor","priceDifference","priceAsNumber","parseFloat","hasRoundFailed","start","end","duration","decimals","countUp","update","placement","targetRef","tooltip","tooltipVisible","updateRef","current","epoch","BULL","BEAR","minHeight"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport {\n  Card,\n  CardBody,\n  Flex,\n  PlayCircleOutlineIcon,\n  Skeleton,\n  Text,\n  TooltipText,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetLastOraclePrice, useGetBufferSeconds } from 'state/predictions/hooks'\nimport RoundProgress from 'components/RoundProgress'\nimport { formatUsdv2, getHasRoundFailed, getPriceDifference } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface LiveRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, totalAmount, lockTimestamp, closeTimestamp } = round\n  const price = useGetLastOraclePrice()\n  const bufferSeconds = useGetBufferSeconds()\n\n  const isBull = lockPrice && price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n\n  const priceDifference = getPriceDifference(price, lockPrice)\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  if (hasRoundFailed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <Card isActive>\n      <CardHeader\n        status=\"live\"\n        icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n        title={t('Live')}\n        epoch={round.epoch}\n      />\n      <RoundProgress variant=\"flat\" scale=\"sm\" lockTimestamp={lockTimestamp} closeTimestamp={closeTimestamp} />\n      <CardBody p=\"16px\">\n        <MultiplierArrow\n          betAmount={betAmount}\n          multiplier={bullMultiplier}\n          hasEntered={hasEnteredUp}\n          isActive={isBull}\n        />\n        <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n          <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n            {t('Last Price')}\n          </Text>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n            <div ref={targetRef}>\n              <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n              </TooltipText>\n            </div>\n            <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n              {formatUsdv2(priceDifference)}\n            </PositionTag>\n          </Flex>\n          {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n          <PrizePoolRow totalAmount={totalAmount} />\n        </RoundResultBox>\n        <MultiplierArrow\n          betAmount={betAmount}\n          multiplier={bearMultiplier}\n          betPosition={BetPosition.BEAR}\n          hasEntered={hasEnteredDown}\n          isActive={!isBull}\n        />\n      </CardBody>\n      {tooltipVisible && tooltip}\n    </Card>\n  )\n}\n\nexport default LiveRoundCard\n"]},"metadata":{},"sourceType":"module"}