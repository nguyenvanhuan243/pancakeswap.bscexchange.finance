{"ast":null,"code":"import _defineProperty from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _BASES_TO_CHECK_TRADE,_SUGGESTED_BASES,_BASES_TO_TRACK_LIQUI;import{ChainId,JSBI,Percent,WETH}from'@pancakeswap/sdk';import{BUSD,DAI,USDT,BTCB,CAKE,WBNB,UST,ETH,USDC}from'./tokens';export var ROUTER_ADDRESS='0x10ED43C718714eb63d5aA57B78B54704E256024E';// a list of tokens by chain\n// used to construct intermediary pairs for trading\nexport var BASES_TO_CHECK_TRADES_AGAINST=(_BASES_TO_CHECK_TRADE={},_defineProperty(_BASES_TO_CHECK_TRADE,ChainId.MAINNET,[WETH[ChainId.MAINNET],CAKE[ChainId.MAINNET],BUSD[ChainId.MAINNET],USDT,BTCB,UST,ETH,USDC]),_defineProperty(_BASES_TO_CHECK_TRADE,ChainId.TESTNET,[WETH[ChainId.TESTNET],CAKE[ChainId.TESTNET],BUSD[ChainId.TESTNET]]),_BASES_TO_CHECK_TRADE);/**\n * Addittional bases for specific tokens\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\n */export var ADDITIONAL_BASES=_defineProperty({},ChainId.MAINNET,{});/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n */export var CUSTOM_BASES=_defineProperty({},ChainId.MAINNET,{});// used for display in the default list when adding liquidity\nexport var SUGGESTED_BASES=(_SUGGESTED_BASES={},_defineProperty(_SUGGESTED_BASES,ChainId.MAINNET,[BUSD[ChainId.MAINNET],CAKE[ChainId.MAINNET],BTCB]),_defineProperty(_SUGGESTED_BASES,ChainId.TESTNET,[WETH[ChainId.TESTNET],CAKE[ChainId.TESTNET],BUSD[ChainId.TESTNET]]),_SUGGESTED_BASES);// used to construct the list of all pairs we consider by default in the frontend\nexport var BASES_TO_TRACK_LIQUIDITY_FOR=(_BASES_TO_TRACK_LIQUI={},_defineProperty(_BASES_TO_TRACK_LIQUI,ChainId.MAINNET,[WETH[ChainId.MAINNET],DAI,BUSD[ChainId.MAINNET],USDT]),_defineProperty(_BASES_TO_TRACK_LIQUI,ChainId.TESTNET,[WETH[ChainId.TESTNET],CAKE[ChainId.TESTNET],BUSD[ChainId.TESTNET]]),_BASES_TO_TRACK_LIQUI);export var PINNED_PAIRS=_defineProperty({},ChainId.MAINNET,[[CAKE[ChainId.MAINNET],WBNB],[BUSD[ChainId.MAINNET],USDT],[DAI,USDT]]);export var NetworkContextName='NETWORK';// default allowed slippage, in bips\nexport var INITIAL_ALLOWED_SLIPPAGE=50;// 20 minutes, denominated in seconds\nexport var DEFAULT_DEADLINE_FROM_NOW=60*20;export var BIG_INT_ZERO=JSBI.BigInt(0);// one basis point\nexport var ONE_BIPS=new Percent(JSBI.BigInt(1),JSBI.BigInt(10000));export var BIPS_BASE=JSBI.BigInt(10000);// used for warning states\nexport var ALLOWED_PRICE_IMPACT_LOW=new Percent(JSBI.BigInt(100),BIPS_BASE);// 1%\nexport var ALLOWED_PRICE_IMPACT_MEDIUM=new Percent(JSBI.BigInt(300),BIPS_BASE);// 3%\nexport var ALLOWED_PRICE_IMPACT_HIGH=new Percent(JSBI.BigInt(500),BIPS_BASE);// 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport var PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN=new Percent(JSBI.BigInt(1000),BIPS_BASE);// 10%\n// for non expert mode disable swaps above this\nexport var BLOCKED_PRICE_IMPACT_NON_EXPERT=new Percent(JSBI.BigInt(1500),BIPS_BASE);// 15%\n// used to ensure the user doesn't send so much BNB so they end up with <.01\nexport var MIN_BNB=JSBI.exponentiate(JSBI.BigInt(10),JSBI.BigInt(16));// .01 BNB\nexport var BETTER_TRADE_LESS_HOPS_THRESHOLD=new Percent(JSBI.BigInt(50),JSBI.BigInt(10000));export var ZERO_PERCENT=new Percent('0');export var ONE_HUNDRED_PERCENT=new Percent('1');// SDN OFAC addresses\nexport var BLOCKED_ADDRESSES=['0x7F367cC41522cE07553e823bf3be79A889DEbe1B','0xd882cFc20F52f2599D84b8e8D58C7FB62cfE344b','0x901bb9583b24D97e995513C6778dc6888AB6870e','0xA7e5d5A720f06526557c513402f2e6B5fA20b008','0x8576aCC5C05D6Ce88f4e49bf65BdF0C62F91353C'];export{default as farmsConfig}from'./farms';export{default as poolsConfig}from'./pools';export{default as ifosConfig}from'./ifo';","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/config/constants/index.ts"],"names":["ChainId","JSBI","Percent","WETH","BUSD","DAI","USDT","BTCB","CAKE","WBNB","UST","ETH","USDC","ROUTER_ADDRESS","BASES_TO_CHECK_TRADES_AGAINST","MAINNET","TESTNET","ADDITIONAL_BASES","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","BIG_INT_ZERO","BigInt","ONE_BIPS","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_BNB","exponentiate","BETTER_TRADE_LESS_HOPS_THRESHOLD","ZERO_PERCENT","ONE_HUNDRED_PERCENT","BLOCKED_ADDRESSES","default","farmsConfig","poolsConfig","ifosConfig"],"mappings":"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","sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap/sdk'\nimport { BUSD, DAI, USDT, BTCB, CAKE, WBNB, UST, ETH, USDC } from './tokens'\n\nexport const ROUTER_ADDRESS = '0x10ED43C718714eb63d5aA57B78B54704E256024E'\n\n// a list of tokens by chain\ntype ChainTokenList = {\n  readonly [chainId in ChainId]: Token[]\n}\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], CAKE[ChainId.MAINNET], BUSD[ChainId.MAINNET], USDT, BTCB, UST, ETH, USDC],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]],\n}\n\n/**\n * Addittional bases for specific tokens\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\n */\nexport const ADDITIONAL_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {},\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n */\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {},\n}\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES: ChainTokenList = {\n  [ChainId.MAINNET]: [BUSD[ChainId.MAINNET], CAKE[ChainId.MAINNET], BTCB],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]],\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], DAI, BUSD[ChainId.MAINNET], USDT],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]],\n}\n\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\n  [ChainId.MAINNET]: [\n    [CAKE[ChainId.MAINNET], WBNB],\n    [BUSD[ChainId.MAINNET], USDT],\n    [DAI, USDT],\n  ],\n}\n\nexport const NetworkContextName = 'NETWORK'\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 50\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\n\nexport const BIG_INT_ZERO = JSBI.BigInt(0)\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\n\n// used to ensure the user doesn't send so much BNB so they end up with <.01\nexport const MIN_BNB: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 BNB\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(10000))\n\nexport const ZERO_PERCENT = new Percent('0')\nexport const ONE_HUNDRED_PERCENT = new Percent('1')\n\n// SDN OFAC addresses\nexport const BLOCKED_ADDRESSES: string[] = [\n  '0x7F367cC41522cE07553e823bf3be79A889DEbe1B',\n  '0xd882cFc20F52f2599D84b8e8D58C7FB62cfE344b',\n  '0x901bb9583b24D97e995513C6778dc6888AB6870e',\n  '0xA7e5d5A720f06526557c513402f2e6B5fA20b008',\n  '0x8576aCC5C05D6Ce88f4e49bf65BdF0C62F91353C',\n]\n\nexport { default as farmsConfig } from './farms'\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n"]},"metadata":{},"sourceType":"module"}