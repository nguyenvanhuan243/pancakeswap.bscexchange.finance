{"ast":null,"code":"import _slicedToArray from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React from'react';import{Button,useModal}from'@pancakeswap/uikit';import{getBalanceNumber}from'utils/formatBalance';import{useTranslation}from'contexts/Localization';import useTokenBalance from'hooks/useTokenBalance';import{getAddress}from'utils/addressHelpers';import useToast from'hooks/useToast';import ContributeModal from'./ContributeModal';import GetLpModal from'./GetLpModal';import{jsx as _jsx}from\"react/jsx-runtime\";var ContributeButton=function ContributeButton(_ref){var poolId=_ref.poolId,ifo=_ref.ifo,publicIfoData=_ref.publicIfoData,walletIfoData=_ref.walletIfoData;var publicPoolCharacteristics=publicIfoData[poolId];var userPoolCharacteristics=walletIfoData[poolId];var isPendingTx=userPoolCharacteristics.isPendingTx,amountTokenCommittedInLP=userPoolCharacteristics.amountTokenCommittedInLP;var limitPerUserInLP=publicPoolCharacteristics.limitPerUserInLP;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useToast=useToast(),toastSuccess=_useToast.toastSuccess;var _useTokenBalance=useTokenBalance(getAddress(ifo.currency.address)),userCurrencyBalance=_useTokenBalance.balance;// Refetch all the data, and display a message when fetching is done\nvar handleContributeSuccess=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Promise.all([publicIfoData.fetchIfoData(),walletIfoData.fetchIfoData()]);case 2:toastSuccess(t('Success!'),t('You have contributed %amount% CAKE-BNB LP tokens to this IFO!',{amount:getBalanceNumber(amount)}));case 3:case\"end\":return _context.stop();}}},_callee);}));return function handleContributeSuccess(_x){return _ref2.apply(this,arguments);};}();var _useModal=useModal(/*#__PURE__*/_jsx(ContributeModal,{poolId:poolId,ifo:ifo,publicIfoData:publicIfoData,walletIfoData:walletIfoData,onSuccess:handleContributeSuccess,userCurrencyBalance:userCurrencyBalance}),false),_useModal2=_slicedToArray(_useModal,1),onPresentContributeModal=_useModal2[0];var _useModal3=useModal(/*#__PURE__*/_jsx(GetLpModal,{currency:ifo.currency}),false),_useModal4=_slicedToArray(_useModal3,1),onPresentGetLpModal=_useModal4[0];var isDisabled=isPendingTx||limitPerUserInLP.isGreaterThan(0)&&amountTokenCommittedInLP.isGreaterThanOrEqualTo(limitPerUserInLP);return/*#__PURE__*/_jsx(Button,{onClick:userCurrencyBalance.isEqualTo(0)?onPresentGetLpModal:onPresentContributeModal,width:\"100%\",disabled:isDisabled,children:isDisabled?t('Max. Committed'):t('Commit LP Tokens')});};export default ContributeButton;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeButton.tsx"],"names":["React","Button","useModal","getBalanceNumber","useTranslation","useTokenBalance","getAddress","useToast","ContributeModal","GetLpModal","ContributeButton","poolId","ifo","publicIfoData","walletIfoData","publicPoolCharacteristics","userPoolCharacteristics","isPendingTx","amountTokenCommittedInLP","limitPerUserInLP","t","toastSuccess","currency","address","userCurrencyBalance","balance","handleContributeSuccess","amount","Promise","all","fetchIfoData","onPresentContributeModal","onPresentGetLpModal","isDisabled","isGreaterThan","isGreaterThanOrEqualTo","isEqualTo"],"mappings":"qfAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,MAAT,CAAiBC,QAAjB,KAAiC,oBAAjC,CACA,OAASC,gBAAT,KAAiC,qBAAjC,CAGA,OAASC,cAAT,KAA+B,uBAA/B,CACA,MAAOC,CAAAA,eAAP,KAA4B,uBAA5B,CACA,OAASC,UAAT,KAA2B,sBAA3B,CACA,MAAOC,CAAAA,QAAP,KAAqB,gBAArB,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,C,2CAQA,GAAMC,CAAAA,gBAAiC,CAAG,QAApCA,CAAAA,gBAAoC,MAAmD,IAAhDC,CAAAA,MAAgD,MAAhDA,MAAgD,CAAxCC,GAAwC,MAAxCA,GAAwC,CAAnCC,aAAmC,MAAnCA,aAAmC,CAApBC,aAAoB,MAApBA,aAAoB,CAC3F,GAAMC,CAAAA,yBAAyB,CAAGF,aAAa,CAACF,MAAD,CAA/C,CACA,GAAMK,CAAAA,uBAAuB,CAAGF,aAAa,CAACH,MAAD,CAA7C,CACA,GAAQM,CAAAA,WAAR,CAAkDD,uBAAlD,CAAQC,WAAR,CAAqBC,wBAArB,CAAkDF,uBAAlD,CAAqBE,wBAArB,CACA,GAAQC,CAAAA,gBAAR,CAA6BJ,yBAA7B,CAAQI,gBAAR,CACA,oBAAcf,cAAc,EAA5B,CAAQgB,CAAR,iBAAQA,CAAR,CACA,cAAyBb,QAAQ,EAAjC,CAAQc,YAAR,WAAQA,YAAR,CACA,qBAAyChB,eAAe,CAACC,UAAU,CAACM,GAAG,CAACU,QAAJ,CAAaC,OAAd,CAAX,CAAxD,CAAiBC,mBAAjB,kBAAQC,OAAR,CAEA;AACA,GAAMC,CAAAA,uBAAuB,2FAAG,iBAAOC,MAAP,wIACxBC,CAAAA,OAAO,CAACC,GAAR,CAAY,CAAChB,aAAa,CAACiB,YAAd,EAAD,CAA+BhB,aAAa,CAACgB,YAAd,EAA/B,CAAZ,CADwB,QAE9BT,YAAY,CACVD,CAAC,CAAC,UAAD,CADS,CAEVA,CAAC,CAAC,+DAAD,CAAkE,CAAEO,MAAM,CAAExB,gBAAgB,CAACwB,MAAD,CAA1B,CAAlE,CAFS,CAAZ,CAF8B,sDAAH,kBAAvBD,CAAAA,uBAAuB,6CAA7B,CAQA,cAAmCxB,QAAQ,cACzC,KAAC,eAAD,EACE,MAAM,CAAES,MADV,CAEE,GAAG,CAAEC,GAFP,CAGE,aAAa,CAAEC,aAHjB,CAIE,aAAa,CAAEC,aAJjB,CAKE,SAAS,CAAEY,uBALb,CAME,mBAAmB,CAAEF,mBANvB,EADyC,CASzC,KATyC,CAA3C,wCAAOO,wBAAP,eAYA,eAA8B7B,QAAQ,cAAC,KAAC,UAAD,EAAY,QAAQ,CAAEU,GAAG,CAACU,QAA1B,EAAD,CAAyC,KAAzC,CAAtC,yCAAOU,mBAAP,eAEA,GAAMC,CAAAA,UAAU,CACdhB,WAAW,EACVE,gBAAgB,CAACe,aAAjB,CAA+B,CAA/B,GAAqChB,wBAAwB,CAACiB,sBAAzB,CAAgDhB,gBAAhD,CAFxC,CAIA,mBACE,KAAC,MAAD,EACE,OAAO,CAAEK,mBAAmB,CAACY,SAApB,CAA8B,CAA9B,EAAmCJ,mBAAnC,CAAyDD,wBADpE,CAEE,KAAK,CAAC,MAFR,CAGE,QAAQ,CAAEE,UAHZ,UAKGA,UAAU,CAAGb,CAAC,CAAC,gBAAD,CAAJ,CAAyBA,CAAC,CAAC,kBAAD,CALvC,EADF,CASD,CA7CD,CA+CA,cAAeV,CAAAA,gBAAf","sourcesContent":["import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { getAddress } from 'utils/addressHelpers'\nimport useToast from 'hooks/useToast'\nimport ContributeModal from './ContributeModal'\nimport GetLpModal from './GetLpModal'\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n}\nconst ContributeButton: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData }) => {\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n  const { isPendingTx, amountTokenCommittedInLP } = userPoolCharacteristics\n  const { limitPerUserInLP } = publicPoolCharacteristics\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const { balance: userCurrencyBalance } = useTokenBalance(getAddress(ifo.currency.address))\n\n  // Refetch all the data, and display a message when fetching is done\n  const handleContributeSuccess = async (amount: BigNumber) => {\n    await Promise.all([publicIfoData.fetchIfoData(), walletIfoData.fetchIfoData()])\n    toastSuccess(\n      t('Success!'),\n      t('You have contributed %amount% CAKE-BNB LP tokens to this IFO!', { amount: getBalanceNumber(amount) }),\n    )\n  }\n\n  const [onPresentContributeModal] = useModal(\n    <ContributeModal\n      poolId={poolId}\n      ifo={ifo}\n      publicIfoData={publicIfoData}\n      walletIfoData={walletIfoData}\n      onSuccess={handleContributeSuccess}\n      userCurrencyBalance={userCurrencyBalance}\n    />,\n    false,\n  )\n\n  const [onPresentGetLpModal] = useModal(<GetLpModal currency={ifo.currency} />, false)\n\n  const isDisabled =\n    isPendingTx ||\n    (limitPerUserInLP.isGreaterThan(0) && amountTokenCommittedInLP.isGreaterThanOrEqualTo(limitPerUserInLP))\n\n  return (\n    <Button\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetLpModal : onPresentContributeModal}\n      width=\"100%\"\n      disabled={isDisabled}\n    >\n      {isDisabled ? t('Max. Committed') : t('Commit LP Tokens')}\n    </Button>\n  )\n}\n\nexport default ContributeButton\n"]},"metadata":{},"sourceType":"module"}