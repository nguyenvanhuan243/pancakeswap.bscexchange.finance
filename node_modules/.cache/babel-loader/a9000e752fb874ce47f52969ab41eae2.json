{"ast":null,"code":"import React,{useMemo,useCallback}from'react';import useActiveWeb3React from'hooks/useActiveWeb3React';import{useDispatch}from'react-redux';import{Modal,ModalBody,Text,Button,Flex}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{isTransactionRecent,useAllTransactions}from'state/transactions/hooks';import{clearAllTransactions}from'state/transactions/actions';import{AutoRow}from'../../Layout/Row';import Transaction from'./Transaction';// we want the latest one to come first, so return negative if a is after b\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function newTransactionsFirst(a,b){return b.addedTime-a.addedTime;}function renderTransactions(transactions){return/*#__PURE__*/_jsx(Flex,{flexDirection:\"column\",children:transactions.map(function(tx){return/*#__PURE__*/_jsx(Transaction,{tx:tx},tx.hash+tx.addedTime);})});}var TransactionsModal=function TransactionsModal(_ref){var onDismiss=_ref.onDismiss;var _useActiveWeb3React=useActiveWeb3React(),account=_useActiveWeb3React.account,chainId=_useActiveWeb3React.chainId;var dispatch=useDispatch();var allTransactions=useAllTransactions();var _useTranslation=useTranslation(),t=_useTranslation.t;var sortedRecentTransactions=useMemo(function(){var txs=Object.values(allTransactions);return txs.filter(isTransactionRecent).sort(newTransactionsFirst);},[allTransactions]);var pending=sortedRecentTransactions.filter(function(tx){return!tx.receipt;});var confirmed=sortedRecentTransactions.filter(function(tx){return tx.receipt;});var clearAllTransactionsCallback=useCallback(function(){if(chainId)dispatch(clearAllTransactions({chainId:chainId}));},[dispatch,chainId]);return/*#__PURE__*/_jsx(Modal,{title:t('Recent Transactions'),headerBackground:\"gradients.cardHeader\",onDismiss:onDismiss,children:account&&/*#__PURE__*/_jsx(ModalBody,{children:!!pending.length||!!confirmed.length?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(AutoRow,{mb:\"1rem\",style:{justifyContent:'space-between'},children:[/*#__PURE__*/_jsx(Text,{children:t('Recent Transactions')}),/*#__PURE__*/_jsx(Button,{variant:\"tertiary\",scale:\"xs\",onClick:clearAllTransactionsCallback,children:t('clear all')})]}),renderTransactions(pending),renderTransactions(confirmed)]}):/*#__PURE__*/_jsx(Text,{children:t('No recent transactions')})})});};export default TransactionsModal;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/components/App/Transactions/TransactionsModal.tsx"],"names":["React","useMemo","useCallback","useActiveWeb3React","useDispatch","Modal","ModalBody","Text","Button","Flex","useTranslation","isTransactionRecent","useAllTransactions","clearAllTransactions","AutoRow","Transaction","newTransactionsFirst","a","b","addedTime","renderTransactions","transactions","map","tx","hash","TransactionsModal","onDismiss","account","chainId","dispatch","allTransactions","t","sortedRecentTransactions","txs","Object","values","filter","sort","pending","receipt","confirmed","clearAllTransactionsCallback","length","justifyContent"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useDispatch } from 'react-redux'\nimport { Modal, ModalBody, Text, Button, Flex, InjectedModalProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks'\nimport { TransactionDetails } from 'state/transactions/reducer'\nimport { AppDispatch } from 'state'\nimport { clearAllTransactions } from 'state/transactions/actions'\nimport { AutoRow } from '../../Layout/Row'\nimport Transaction from './Transaction'\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nfunction renderTransactions(transactions: TransactionDetails[]) {\n  return (\n    <Flex flexDirection=\"column\">\n      {transactions.map((tx) => {\n        return <Transaction key={tx.hash + tx.addedTime} tx={tx} />\n      })}\n    </Flex>\n  )\n}\n\nconst TransactionsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const { account, chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const allTransactions = useAllTransactions()\n\n  const { t } = useTranslation()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const pending = sortedRecentTransactions.filter((tx) => !tx.receipt)\n  const confirmed = sortedRecentTransactions.filter((tx) => tx.receipt)\n\n  const clearAllTransactionsCallback = useCallback(() => {\n    if (chainId) dispatch(clearAllTransactions({ chainId }))\n  }, [dispatch, chainId])\n\n  return (\n    <Modal title={t('Recent Transactions')} headerBackground=\"gradients.cardHeader\" onDismiss={onDismiss}>\n      {account && (\n        <ModalBody>\n          {!!pending.length || !!confirmed.length ? (\n            <>\n              <AutoRow mb=\"1rem\" style={{ justifyContent: 'space-between' }}>\n                <Text>{t('Recent Transactions')}</Text>\n                <Button variant=\"tertiary\" scale=\"xs\" onClick={clearAllTransactionsCallback}>\n                  {t('clear all')}\n                </Button>\n              </AutoRow>\n              {renderTransactions(pending)}\n              {renderTransactions(confirmed)}\n            </>\n          ) : (\n            <Text>{t('No recent transactions')}</Text>\n          )}\n        </ModalBody>\n      )}\n    </Modal>\n  )\n}\n\nexport default TransactionsModal\n"]},"metadata":{},"sourceType":"module"}