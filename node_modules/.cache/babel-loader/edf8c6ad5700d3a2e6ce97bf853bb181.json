{"ast":null,"code":"'use strict';\n/** @typedef {import('./generated-types').ConstantCodeMap} ConstantCodeMap */\n\n/** @typedef {import('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */\n\n/** @typedef {import('./generated-types').CodeNameMap} CodeNameMap */\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n\n/** @typedef {import('./generated-types').CodecConstant} CodecConstant */\n\nvar _require = require('./generated-table'),\n    baseTable = _require.baseTable;\n\nvar varintEncode = require('./util').varintEncode;\n\nvar nameToVarint = {};\nvar constantToCode = {};\nvar codeToName = {}; // eslint-disable-next-line guard-for-in\n\nfor (var name in baseTable) {\n  var codecName = name;\n  var code = baseTable[codecName];\n  nameToVarint[codecName] = varintEncode(code);\n  var constant = codecName.toUpperCase().replace(/-/g, '_');\n  constantToCode[constant] = code;\n\n  if (!codeToName[code]) {\n    codeToName[code] = codecName;\n  }\n}\n\nObject.freeze(nameToVarint);\nObject.freeze(constantToCode);\nObject.freeze(codeToName);\nvar nameToCode = Object.freeze(baseTable);\nmodule.exports = {\n  nameToVarint: nameToVarint,\n  constantToCode: constantToCode,\n  nameToCode: nameToCode,\n  codeToName: codeToName\n};","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/cids/node_modules/multicodec/src/maps.js"],"names":["require","baseTable","varintEncode","nameToVarint","constantToCode","codeToName","name","codecName","code","constant","toUpperCase","replace","Object","freeze","nameToCode","module","exports"],"mappings":"AAAA;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA,eAAsBA,OAAO,CAAC,mBAAD,CAA7B;AAAA,IAAQC,SAAR,YAAQA,SAAR;;AACA,IAAMC,YAAY,GAAGF,OAAO,CAAC,QAAD,CAAP,CAAkBE,YAAvC;;AAEA,IAAMC,YAAY,GAAqC,EAAvD;AACA,IAAMC,cAAc,GAAkC,EAAtD;AACA,IAAMC,UAAU,GAA8B,EAA9C,C,CAEA;;AACA,KAAK,IAAMC,IAAX,IAAmBL,SAAnB,EAA8B;AAC5B,MAAMM,SAAS,GAA4BD,IAA3C;AACA,MAAME,IAAI,GAAGP,SAAS,CAACM,SAAD,CAAtB;AACAJ,EAAAA,YAAY,CAACI,SAAD,CAAZ,GAA0BL,YAAY,CAACM,IAAD,CAAtC;AAEA,MAAMC,QAAQ,GAAgCF,SAAS,CAACG,WAAV,GAAwBC,OAAxB,CAAgC,IAAhC,EAAsC,GAAtC,CAA9C;AACAP,EAAAA,cAAc,CAACK,QAAD,CAAd,GAA2BD,IAA3B;;AAEA,MAAI,CAACH,UAAU,CAACG,IAAD,CAAf,EAAuB;AACrBH,IAAAA,UAAU,CAACG,IAAD,CAAV,GAAmBD,SAAnB;AACD;AACF;;AAEDK,MAAM,CAACC,MAAP,CAAcV,YAAd;AACAS,MAAM,CAACC,MAAP,CAAcT,cAAd;AACAQ,MAAM,CAACC,MAAP,CAAcR,UAAd;AACA,IAAMS,UAAU,GAAGF,MAAM,CAACC,MAAP,CAAcZ,SAAd,CAAnB;AACAc,MAAM,CAACC,OAAP,GAAiB;AACfb,EAAAA,YAAY,EAAZA,YADe;AAEfC,EAAAA,cAAc,EAAdA,cAFe;AAGfU,EAAAA,UAAU,EAAVA,UAHe;AAIfT,EAAAA,UAAU,EAAVA;AAJe,CAAjB","sourcesContent":["'use strict'\n\n/** @typedef {import('./generated-types').ConstantCodeMap} ConstantCodeMap */\n/** @typedef {import('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */\n/** @typedef {import('./generated-types').CodeNameMap} CodeNameMap */\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecConstant} CodecConstant */\n\nconst { baseTable } = require('./generated-table')\nconst varintEncode = require('./util').varintEncode\n\nconst nameToVarint = /** @type {NameUint8ArrayMap} */ ({})\nconst constantToCode = /** @type {ConstantCodeMap} */({})\nconst codeToName = /** @type {CodeNameMap} */({})\n\n// eslint-disable-next-line guard-for-in\nfor (const name in baseTable) {\n  const codecName = /** @type {CodecName} */(name)\n  const code = baseTable[codecName]\n  nameToVarint[codecName] = varintEncode(code)\n\n  const constant = /** @type {CodecConstant} */(codecName.toUpperCase().replace(/-/g, '_'))\n  constantToCode[constant] = code\n\n  if (!codeToName[code]) {\n    codeToName[code] = codecName\n  }\n}\n\nObject.freeze(nameToVarint)\nObject.freeze(constantToCode)\nObject.freeze(codeToName)\nconst nameToCode = Object.freeze(baseTable)\nmodule.exports = {\n  nameToVarint,\n  constantToCode,\n  nameToCode,\n  codeToName\n}\n"]},"metadata":{},"sourceType":"script"}