{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';import{useWeb3React}from'@web3-react/core';import{BIG_ZERO}from'utils/bigNumber';import{getActivePools}from'utils/calls';import{getAddress}from'utils/addressHelpers';import{simpleRpcProvider}from'utils/providers';import BigNumber from'bignumber.js';import{getVotingPower}from'../helpers';var initialState={verificationHash:null,cakeBalance:BIG_ZERO,cakeVaultBalance:BIG_ZERO,cakePoolBalance:BIG_ZERO,poolsBalance:BIG_ZERO,cakeBnbLpBalance:BIG_ZERO,total:BIG_ZERO};var useGetVotingPower=function useGetVotingPower(block){var isActive=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useState=useState(initialState),_useState2=_slicedToArray(_useState,2),votingPower=_useState2[0],setVotingPower=_useState2[1];var _useState3=useState(!!account),_useState4=_slicedToArray(_useState3,2),isLoading=_useState4[0],setIsLoading=_useState4[1];useEffect(function(){var fetchVotingPower=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var blockNumber,eligiblePools,poolAddresses,_yield$getVotingPower,cakeBalance,cakeBnbLpBalance,cakePoolBalance,total,poolsBalance,cakeVaultBalance,verificationHash;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setIsLoading(true);_context.prev=1;_context.t0=block;if(_context.t0){_context.next=7;break;}_context.next=6;return simpleRpcProvider.getBlockNumber();case 6:_context.t0=_context.sent;case 7:blockNumber=_context.t0;_context.next=10;return getActivePools(blockNumber);case 10:eligiblePools=_context.sent;poolAddresses=eligiblePools.map(function(_ref2){var contractAddress=_ref2.contractAddress;return getAddress(contractAddress);});_context.next=14;return getVotingPower(account,poolAddresses,blockNumber);case 14:_yield$getVotingPower=_context.sent;cakeBalance=_yield$getVotingPower.cakeBalance;cakeBnbLpBalance=_yield$getVotingPower.cakeBnbLpBalance;cakePoolBalance=_yield$getVotingPower.cakePoolBalance;total=_yield$getVotingPower.total;poolsBalance=_yield$getVotingPower.poolsBalance;cakeVaultBalance=_yield$getVotingPower.cakeVaultBalance;verificationHash=_yield$getVotingPower.verificationHash;if(isActive){setVotingPower(function(prevVotingPower){return _objectSpread(_objectSpread({},prevVotingPower),{},{verificationHash:verificationHash,cakeBalance:new BigNumber(cakeBalance),cakeBnbLpBalance:new BigNumber(cakeBnbLpBalance),cakePoolBalance:new BigNumber(cakePoolBalance),poolsBalance:new BigNumber(poolsBalance),cakeVaultBalance:new BigNumber(cakeVaultBalance),total:new BigNumber(total)});});}case 23:_context.prev=23;setIsLoading(false);return _context.finish(23);case 26:case\"end\":return _context.stop();}}},_callee,null,[[1,,23,26]]);}));return function fetchVotingPower(){return _ref.apply(this,arguments);};}();if(account&&isActive){fetchVotingPower();}},[account,block,setVotingPower,isActive,setIsLoading]);return _objectSpread(_objectSpread({},votingPower),{},{isLoading:isLoading});};export default useGetVotingPower;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Voting/hooks/useGetVotingPower.tsx"],"names":["useState","useEffect","useWeb3React","BIG_ZERO","getActivePools","getAddress","simpleRpcProvider","BigNumber","getVotingPower","initialState","verificationHash","cakeBalance","cakeVaultBalance","cakePoolBalance","poolsBalance","cakeBnbLpBalance","total","useGetVotingPower","block","isActive","account","votingPower","setVotingPower","isLoading","setIsLoading","fetchVotingPower","getBlockNumber","blockNumber","eligiblePools","poolAddresses","map","contractAddress","prevVotingPower"],"mappings":"4pBAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACA,OAASC,cAAT,KAA+B,aAA/B,CACA,OAASC,UAAT,KAA2B,sBAA3B,CACA,OAASC,iBAAT,KAAkC,iBAAlC,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,cAAT,KAA+B,YAA/B,CAYA,GAAMC,CAAAA,YAAmB,CAAG,CAC1BC,gBAAgB,CAAE,IADQ,CAE1BC,WAAW,CAAER,QAFa,CAG1BS,gBAAgB,CAAET,QAHQ,CAI1BU,eAAe,CAAEV,QAJS,CAK1BW,YAAY,CAAEX,QALY,CAM1BY,gBAAgB,CAAEZ,QANQ,CAO1Ba,KAAK,CAAEb,QAPmB,CAA5B,CAUA,GAAMc,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAqE,IAApDC,CAAAA,QAAoD,2DAAzC,IAAyC,CAC7F,kBAAoBjB,YAAY,EAAhC,CAAQkB,OAAR,eAAQA,OAAR,CACA,cAAsCpB,QAAQ,CAACS,YAAD,CAA9C,wCAAOY,WAAP,eAAoBC,cAApB,eACA,eAAkCtB,QAAQ,CAAC,CAAC,CAACoB,OAAH,CAA1C,yCAAOG,SAAP,eAAkBC,YAAlB,eAEAvB,SAAS,CAAC,UAAM,CACd,GAAMwB,CAAAA,gBAAgB,0FAAG,uSACvBD,YAAY,CAAC,IAAD,CAAZ,CADuB,4BAIDN,KAJC,8DAIeZ,CAAAA,iBAAiB,CAACoB,cAAlB,EAJf,yCAIfC,WAJe,oCAKOvB,CAAAA,cAAc,CAACuB,WAAD,CALrB,SAKfC,aALe,eAMfC,aANe,CAMCD,aAAa,CAACE,GAAd,CAAkB,mBAAGC,CAAAA,eAAH,OAAGA,eAAH,OAAyB1B,CAAAA,UAAU,CAAC0B,eAAD,CAAnC,EAAlB,CAND,wBAeXvB,CAAAA,cAAc,CAACY,OAAD,CAAUS,aAAV,CAAyBF,WAAzB,CAfH,6CAQnBhB,WARmB,uBAQnBA,WARmB,CASnBI,gBATmB,uBASnBA,gBATmB,CAUnBF,eAVmB,uBAUnBA,eAVmB,CAWnBG,KAXmB,uBAWnBA,KAXmB,CAYnBF,YAZmB,uBAYnBA,YAZmB,CAanBF,gBAbmB,uBAanBA,gBAbmB,CAcnBF,gBAdmB,uBAcnBA,gBAdmB,CAiBrB,GAAIS,QAAJ,CAAc,CACZG,cAAc,CAAC,SAACU,eAAD,wCACVA,eADU,MAEbtB,gBAAgB,CAAhBA,gBAFa,CAGbC,WAAW,CAAE,GAAIJ,CAAAA,SAAJ,CAAcI,WAAd,CAHA,CAIbI,gBAAgB,CAAE,GAAIR,CAAAA,SAAJ,CAAcQ,gBAAd,CAJL,CAKbF,eAAe,CAAE,GAAIN,CAAAA,SAAJ,CAAcM,eAAd,CALJ,CAMbC,YAAY,CAAE,GAAIP,CAAAA,SAAJ,CAAcO,YAAd,CAND,CAObF,gBAAgB,CAAE,GAAIL,CAAAA,SAAJ,CAAcK,gBAAd,CAPL,CAQbI,KAAK,CAAE,GAAIT,CAAAA,SAAJ,CAAcS,KAAd,CARM,IAAD,CAAd,CAUD,CA5BoB,yBA8BrBQ,YAAY,CAAC,KAAD,CAAZ,CA9BqB,oGAAH,kBAAhBC,CAAAA,gBAAgB,0CAAtB,CAkCA,GAAIL,OAAO,EAAID,QAAf,CAAyB,CACvBM,gBAAgB,GACjB,CACF,CAtCQ,CAsCN,CAACL,OAAD,CAAUF,KAAV,CAAiBI,cAAjB,CAAiCH,QAAjC,CAA2CK,YAA3C,CAtCM,CAAT,CAwCA,sCAAYH,WAAZ,MAAyBE,SAAS,CAATA,SAAzB,GACD,CA9CD,CAgDA,cAAeN,CAAAA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getActivePools } from 'utils/calls'\nimport { getAddress } from 'utils/addressHelpers'\nimport { simpleRpcProvider } from 'utils/providers'\nimport BigNumber from 'bignumber.js'\nimport { getVotingPower } from '../helpers'\n\ninterface State {\n  verificationHash: string\n  cakeBalance: BigNumber\n  cakeVaultBalance: BigNumber\n  cakePoolBalance: BigNumber\n  poolsBalance: BigNumber\n  cakeBnbLpBalance: BigNumber\n  total: BigNumber\n}\n\nconst initialState: State = {\n  verificationHash: null,\n  cakeBalance: BIG_ZERO,\n  cakeVaultBalance: BIG_ZERO,\n  cakePoolBalance: BIG_ZERO,\n  poolsBalance: BIG_ZERO,\n  cakeBnbLpBalance: BIG_ZERO,\n  total: BIG_ZERO,\n}\n\nconst useGetVotingPower = (block?: number, isActive = true): State & { isLoading: boolean } => {\n  const { account } = useWeb3React()\n  const [votingPower, setVotingPower] = useState(initialState)\n  const [isLoading, setIsLoading] = useState(!!account)\n\n  useEffect(() => {\n    const fetchVotingPower = async () => {\n      setIsLoading(true)\n\n      try {\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n        const eligiblePools = await getActivePools(blockNumber)\n        const poolAddresses = eligiblePools.map(({ contractAddress }) => getAddress(contractAddress))\n        const {\n          cakeBalance,\n          cakeBnbLpBalance,\n          cakePoolBalance,\n          total,\n          poolsBalance,\n          cakeVaultBalance,\n          verificationHash,\n        } = await getVotingPower(account, poolAddresses, blockNumber)\n\n        if (isActive) {\n          setVotingPower((prevVotingPower) => ({\n            ...prevVotingPower,\n            verificationHash,\n            cakeBalance: new BigNumber(cakeBalance),\n            cakeBnbLpBalance: new BigNumber(cakeBnbLpBalance),\n            cakePoolBalance: new BigNumber(cakePoolBalance),\n            poolsBalance: new BigNumber(poolsBalance),\n            cakeVaultBalance: new BigNumber(cakeVaultBalance),\n            total: new BigNumber(total),\n          }))\n        }\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    if (account && isActive) {\n      fetchVotingPower()\n    }\n  }, [account, block, setVotingPower, isActive, setIsLoading])\n\n  return { ...votingPower, isLoading }\n}\n\nexport default useGetVotingPower\n"]},"metadata":{},"sourceType":"module"}