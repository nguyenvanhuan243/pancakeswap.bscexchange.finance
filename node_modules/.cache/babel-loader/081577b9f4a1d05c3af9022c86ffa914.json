{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Pools/components/PoolCard/Modals/StakeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, Link, CalculateIcon, IconButton } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport useTheme from 'hooks/useTheme';\nimport useToast from 'hooks/useToast';\nimport BigNumber from 'bignumber.js';\nimport RoiCalculatorModal from 'components/RoiCalculatorModal';\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance';\nimport { getAddress } from 'utils/addressHelpers';\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers';\nimport PercentageButton from './PercentageButton';\nimport useStakePool from '../../../hooks/useStakePool';\nimport useUnstakePool from '../../../hooks/useUnstakePool';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledLink = styled(Link)`\n  width: 100%;\n`;\n_c = StyledLink;\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`;\n_c2 = AnnualRoiContainer;\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`;\n_c3 = AnnualRoiDisplay;\n\nconst StakeModal = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss\n}) => {\n  _s();\n\n  const {\n    sousId,\n    stakingToken,\n    earningTokenPrice,\n    apr,\n    userData,\n    stakingLimit,\n    earningToken\n  } = pool;\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    onStake\n  } = useStakePool(sousId, isBnbPool);\n  const {\n    onUnstake\n  } = useUnstakePool(sousId, pool.enableEmergencyWithdraw);\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const [pendingTx, setPendingTx] = useState(false);\n  const [stakeAmount, setStakeAmount] = useState('');\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false);\n  const [percent, setPercent] = useState(0);\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false);\n\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance;\n    }\n\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance;\n  };\n\n  const usdValueStaked = new BigNumber(stakeAmount).times(stakingTokenPrice);\n  const formattedUsdValueStaked = !usdValueStaked.isNaN() && formatNumber(usdValueStaked.toNumber());\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !usdValueStaked.isNaN() ? usdValueStaked.toNumber() : 0,\n    apr,\n    earningTokenPrice\n  });\n  const annualRoi = interestBreakdown[3] * pool.earningTokenPrice;\n  const formattedAnnualRoi = formatNumber(annualRoi, annualRoi > 10000 ? 0 : 2, annualRoi > 10000 ? 0 : 2);\n  const getTokenLink = stakingToken.address ? `/swap?outputCurrency=${getAddress(stakingToken.address)}` : '/swap';\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals);\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit));\n    }\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit]);\n\n  const handleStakeInputChange = input => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals);\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber());\n      setPercent(Math.min(percentage, 100));\n    } else {\n      setPercent(0);\n    }\n\n    setStakeAmount(input);\n  };\n\n  const handleChangePercent = sliderPercent => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent);\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals);\n      setStakeAmount(amountToStake);\n    } else {\n      setStakeAmount('');\n    }\n\n    setPercent(sliderPercent);\n  };\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true);\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals);\n        toastSuccess(`${t('Unstaked')}!`, t('Your %symbol% earnings have also been harvested to your wallet!', {\n          symbol: earningToken.symbol\n        }));\n        setPendingTx(false);\n        onDismiss();\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setPendingTx(false);\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals);\n        toastSuccess(`${t('Staked')}!`, t('Your %symbol% funds have been staked in the pool!', {\n          symbol: stakingToken.symbol\n        }));\n        setPendingTx(false);\n        onDismiss();\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setPendingTx(false);\n      }\n    }\n  };\n\n  if (showRoiCalculator) {\n    return /*#__PURE__*/_jsxDEV(RoiCalculatorModal, {\n      earningTokenPrice: earningTokenPrice,\n      stakingTokenPrice: stakingTokenPrice,\n      apr: apr,\n      linkLabel: t('Get %symbol%', {\n        symbol: stakingToken.symbol\n      }),\n      linkHref: getTokenLink,\n      stakingTokenBalance: userData.stakedBalance.plus(stakingTokenBalance),\n      stakingTokenSymbol: stakingToken.symbol,\n      earningTokenSymbol: earningToken.symbol,\n      onBack: () => setShowRoiCalculator(false),\n      initialValue: stakeAmount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    minWidth: \"346px\",\n    title: isRemovingStake ? t('Unstake') : t('Stake in Pool'),\n    onDismiss: onDismiss,\n    headerBackground: theme.colors.gradients.cardHeader,\n    children: [stakingLimit.gt(0) && !isRemovingStake && /*#__PURE__*/_jsxDEV(Text, {\n      color: \"secondary\",\n      bold: true,\n      mb: \"24px\",\n      style: {\n        textAlign: 'center'\n      },\n      fontSize: \"16px\",\n      children: t('Max stake for this pool: %amount% %token%', {\n        amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n        token: stakingToken.symbol\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mb: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        children: [isRemovingStake ? t('Unstake') : t('Stake'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        minWidth: \"70px\",\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          src: `/images/tokens/${getAddress(stakingToken.address)}.png`,\n          width: 24,\n          height: 24,\n          alt: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          ml: \"4px\",\n          bold: true,\n          children: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n      value: stakeAmount,\n      onUserInput: handleStakeInputChange,\n      currencyValue: stakingTokenPrice !== 0 && `~${formattedUsdValueStaked || 0} USD`,\n      isWarning: hasReachedStakeLimit,\n      decimals: stakingToken.decimals\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), hasReachedStakeLimit && /*#__PURE__*/_jsxDEV(Text, {\n      color: \"failure\",\n      fontSize: \"12px\",\n      style: {\n        textAlign: 'right'\n      },\n      mt: \"4px\",\n      children: t('Maximum total stake: %amount% %token%', {\n        amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n        token: stakingToken.symbol\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      ml: \"auto\",\n      color: \"textSubtle\",\n      fontSize: \"12px\",\n      mb: \"8px\",\n      children: t('Balance: %balance%', {\n        balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals)\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      min: 0,\n      max: 100,\n      value: percent,\n      onValueChanged: handleChangePercent,\n      name: \"stake\",\n      valueLabel: `${percent}%`,\n      step: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mt: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(PercentageButton, {\n        onClick: () => handleChangePercent(25),\n        children: \"25%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PercentageButton, {\n        onClick: () => handleChangePercent(50),\n        children: \"50%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PercentageButton, {\n        onClick: () => handleChangePercent(75),\n        children: \"75%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PercentageButton, {\n        onClick: () => handleChangePercent(100),\n        children: t('Max')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), !isRemovingStake && /*#__PURE__*/_jsxDEV(Flex, {\n      mt: \"24px\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        mr: \"8px\",\n        color: \"textSubtle\",\n        children: [t('Annual ROI at current rates'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AnnualRoiContainer, {\n        alignItems: \"center\",\n        onClick: () => setShowRoiCalculator(true),\n        children: [/*#__PURE__*/_jsxDEV(AnnualRoiDisplay, {\n          children: [\"$\", formattedAnnualRoi]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          variant: \"text\",\n          scale: \"sm\",\n          children: /*#__PURE__*/_jsxDEV(CalculateIcon, {\n            color: \"textSubtle\",\n            width: \"18px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      isLoading: pendingTx,\n      endIcon: pendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 30\n      }, this) : null,\n      onClick: handleConfirmClick,\n      disabled: !stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit,\n      mt: \"24px\",\n      children: pendingTx ? t('Confirming') : t('Confirm')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), !isRemovingStake && /*#__PURE__*/_jsxDEV(StyledLink, {\n      external: true,\n      href: getTokenLink,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        mt: \"8px\",\n        variant: \"secondary\",\n        children: t('Get %symbol%', {\n          symbol: stakingToken.symbol\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StakeModal, \"RilidMpA7e7rjbYXhnfxJawZY8c=\", false, function () {\n  return [useTranslation, useTheme, useStakePool, useUnstakePool, useToast];\n});\n\n_c4 = StakeModal;\nexport default StakeModal;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StyledLink\");\n$RefreshReg$(_c2, \"AnnualRoiContainer\");\n$RefreshReg$(_c3, \"AnnualRoiDisplay\");\n$RefreshReg$(_c4, \"StakeModal\");","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Pools/components/PoolCard/Modals/StakeModal.tsx"],"names":["React","useEffect","useState","styled","Modal","Text","Flex","Image","Button","Slider","BalanceInput","AutoRenewIcon","Link","CalculateIcon","IconButton","useTranslation","useTheme","useToast","BigNumber","RoiCalculatorModal","getFullDisplayBalance","formatNumber","getDecimalAmount","getAddress","getInterestBreakdown","PercentageButton","useStakePool","useUnstakePool","StyledLink","AnnualRoiContainer","AnnualRoiDisplay","StakeModal","isBnbPool","pool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","onDismiss","sousId","stakingToken","earningTokenPrice","apr","userData","stakingLimit","earningToken","t","theme","onStake","onUnstake","enableEmergencyWithdraw","toastSuccess","toastError","pendingTx","setPendingTx","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","percent","setPercent","showRoiCalculator","setShowRoiCalculator","getCalculatedStakingLimit","stakedBalance","gt","usdValueStaked","times","formattedUsdValueStaked","isNaN","toNumber","interestBreakdown","principalInUSD","annualRoi","formattedAnnualRoi","getTokenLink","address","fullDecimalStakeAmount","decimals","plus","handleStakeInputChange","input","convertedInput","percentage","Math","floor","dividedBy","multipliedBy","min","handleChangePercent","sliderPercent","percentageOfStakingMax","amountToStake","handleConfirmClick","symbol","e","colors","gradients","cardHeader","textAlign","amount","token","balance","parseFloat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Modal,\n  Text,\n  Flex,\n  Image,\n  Button,\n  Slider,\n  BalanceInput,\n  AutoRenewIcon,\n  Link,\n  CalculateIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\nimport PercentageButton from './PercentageButton'\nimport useStakePool from '../../../hooks/useStakePool'\nimport useUnstakePool from '../../../hooks/useUnstakePool'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { sousId, stakingToken, earningTokenPrice, apr, userData, stakingLimit, earningToken } = pool\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useStakePool(sousId, isBnbPool)\n  const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [percent, setPercent] = useState(0)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance\n  }\n\n  const usdValueStaked = new BigNumber(stakeAmount).times(stakingTokenPrice)\n  const formattedUsdValueStaked = !usdValueStaked.isNaN() && formatNumber(usdValueStaked.toNumber())\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !usdValueStaked.isNaN() ? usdValueStaked.toNumber() : 0,\n    apr,\n    earningTokenPrice,\n  })\n  const annualRoi = interestBreakdown[3] * pool.earningTokenPrice\n  const formattedAnnualRoi = formatNumber(annualRoi, annualRoi > 10000 ? 0 : 2, annualRoi > 10000 ? 0 : 2)\n\n  const getTokenLink = stakingToken.address ? `/swap?outputCurrency=${getAddress(stakingToken.address)}` : '/swap'\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Staked')}!`,\n          t('Your %symbol% funds have been staked in the pool!', {\n            symbol: stakingToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        earningTokenPrice={earningTokenPrice}\n        stakingTokenPrice={stakingTokenPrice}\n        apr={apr}\n        linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n        linkHref={getTokenLink}\n        stakingTokenBalance={userData.stakedBalance.plus(stakingTokenBalance)}\n        stakingTokenSymbol={stakingToken.symbol}\n        earningTokenSymbol={earningToken.symbol}\n        onBack={() => setShowRoiCalculator(false)}\n        initialValue={stakeAmount}\n      />\n    )\n  }\n\n  return (\n    <Modal\n      minWidth=\"346px\"\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stakingLimit.gt(0) && !isRemovingStake && (\n        <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n          {t('Max stake for this pool: %amount% %token%', {\n            amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n            width={24}\n            height={24}\n            alt={stakingToken.symbol}\n          />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={stakingTokenPrice !== 0 && `~${formattedUsdValueStaked || 0} USD`}\n        isWarning={hasReachedStakeLimit}\n        decimals={stakingToken.decimals}\n      />\n      {hasReachedStakeLimit && (\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n          {t('Maximum total stake: %amount% %token%', {\n            amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', {\n          balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n        })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\n      </Flex>\n      {!isRemovingStake && (\n        <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Text mr=\"8px\" color=\"textSubtle\">\n            {t('Annual ROI at current rates')}:\n          </Text>\n          <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n            <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n            <IconButton variant=\"text\" scale=\"sm\">\n              <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n            </IconButton>\n          </AnnualRoiContainer>\n        </Flex>\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <StyledLink external href={getTokenLink}>\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\n            {t('Get %symbol%', { symbol: stakingToken.symbol })}\n          </Button>\n        </StyledLink>\n      )}\n    </Modal>\n  )\n}\n\nexport default StakeModal\n"]},"metadata":{},"sourceType":"module"}