{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Collectibles/components/GlobalCheckClaimStatus.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useWeb3React } from '@web3-react/core';\nimport { useModal } from '@pancakeswap/uikit';\nimport nfts from 'config/constants/nfts';\nimport NftGiveawayModal from './NftGiveawayModal';\nimport useBunnySpecialLottery from '../hooks/useBunnySpecialLottery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * This is represented as a component rather than a hook because we need to keep it\n * inside the Router.\n *\n * TODO: Put global checks in redux or make a generic area to house global checks\n */\nconst GlobalCheckClaimStatus = ({\n  excludeLocations\n}) => {\n  _s();\n\n  const hasDisplayedModal = useRef(false);\n  const [claimableNfts, setClaimableNfts] = useState([]);\n  const [onPresentGiftModal] = useModal( /*#__PURE__*/_jsxDEV(NftGiveawayModal, {\n    nfts: claimableNfts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 41\n  }, this));\n  const {\n    account\n  } = useWeb3React();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    canClaimBaller,\n    canClaimLottie,\n    canClaimLucky\n  } = useBunnySpecialLottery(); // Check claim status\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const claimable = [];\n      const nftConfigMap = {\n        lottie: nfts.find(nft => nft.identifier === 'lottie'),\n        lucky: nfts.find(nft => nft.identifier === 'lucky'),\n        baller: nfts.find(nft => nft.identifier === 'baller')\n      };\n      const {\n        canClaim: isBallerClaimable\n      } = await canClaimBaller();\n      const {\n        canClaim: isLottieClaimable\n      } = await canClaimLottie();\n      const {\n        canClaim: isLuckyClaimable\n      } = await canClaimLucky();\n\n      if (isBallerClaimable) {\n        claimable.push(nftConfigMap.baller);\n      }\n\n      if (isLottieClaimable) {\n        claimable.push(nftConfigMap.lottie);\n      }\n\n      if (isLuckyClaimable) {\n        claimable.push(nftConfigMap.lucky);\n      }\n\n      setClaimableNfts(claimable);\n    };\n\n    if (account) {\n      fetchClaimStatus();\n    }\n  }, [account, canClaimBaller, canClaimLottie, canClaimLucky]); // Check if we need to display the modal\n\n  useEffect(() => {\n    const matchesSomeLocations = excludeLocations.some(location => pathname.includes(location));\n\n    if (claimableNfts.length > 0 && !matchesSomeLocations && !hasDisplayedModal.current) {\n      onPresentGiftModal();\n      hasDisplayedModal.current = true;\n    }\n  }, [pathname, excludeLocations, hasDisplayedModal, onPresentGiftModal, claimableNfts]); // Reset the check flag when account changes\n\n  useEffect(() => {\n    hasDisplayedModal.current = false;\n  }, [account, hasDisplayedModal]);\n  return null;\n};\n\n_s(GlobalCheckClaimStatus, \"r+ulOb/1iGNnbejnhbQupJq0ufY=\", false, function () {\n  return [useModal, useWeb3React, useLocation, useBunnySpecialLottery];\n});\n\n_c = GlobalCheckClaimStatus;\nexport default GlobalCheckClaimStatus;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalCheckClaimStatus\");","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Collectibles/components/GlobalCheckClaimStatus.tsx"],"names":["React","useEffect","useRef","useState","useLocation","useWeb3React","useModal","nfts","NftGiveawayModal","useBunnySpecialLottery","GlobalCheckClaimStatus","excludeLocations","hasDisplayedModal","claimableNfts","setClaimableNfts","onPresentGiftModal","account","pathname","canClaimBaller","canClaimLottie","canClaimLucky","fetchClaimStatus","claimable","nftConfigMap","lottie","find","nft","identifier","lucky","baller","canClaim","isBallerClaimable","isLottieClaimable","isLuckyClaimable","push","matchesSomeLocations","some","location","includes","length","current"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { useModal } from '@pancakeswap/uikit'\nimport { Nft } from 'config/constants/types'\nimport nfts from 'config/constants/nfts'\nimport NftGiveawayModal from './NftGiveawayModal'\nimport useBunnySpecialLottery from '../hooks/useBunnySpecialLottery'\n\ninterface GlobalCheckClaimStatusProps {\n  excludeLocations: string[]\n}\n\n/**\n * This is represented as a component rather than a hook because we need to keep it\n * inside the Router.\n *\n * TODO: Put global checks in redux or make a generic area to house global checks\n */\nconst GlobalCheckClaimStatus: React.FC<GlobalCheckClaimStatusProps> = ({ excludeLocations }) => {\n  const hasDisplayedModal = useRef(false)\n  const [claimableNfts, setClaimableNfts] = useState<Nft[]>([])\n  const [onPresentGiftModal] = useModal(<NftGiveawayModal nfts={claimableNfts} />)\n  const { account } = useWeb3React()\n  const { pathname } = useLocation()\n  const { canClaimBaller, canClaimLottie, canClaimLucky } = useBunnySpecialLottery()\n\n  // Check claim status\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const claimable: Nft[] = []\n\n      const nftConfigMap = {\n        lottie: nfts.find((nft) => nft.identifier === 'lottie'),\n        lucky: nfts.find((nft) => nft.identifier === 'lucky'),\n        baller: nfts.find((nft) => nft.identifier === 'baller'),\n      }\n\n      const { canClaim: isBallerClaimable } = await canClaimBaller()\n      const { canClaim: isLottieClaimable } = await canClaimLottie()\n      const { canClaim: isLuckyClaimable } = await canClaimLucky()\n\n      if (isBallerClaimable) {\n        claimable.push(nftConfigMap.baller)\n      }\n\n      if (isLottieClaimable) {\n        claimable.push(nftConfigMap.lottie)\n      }\n\n      if (isLuckyClaimable) {\n        claimable.push(nftConfigMap.lucky)\n      }\n\n      setClaimableNfts(claimable)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, canClaimBaller, canClaimLottie, canClaimLucky])\n\n  // Check if we need to display the modal\n  useEffect(() => {\n    const matchesSomeLocations = excludeLocations.some((location) => pathname.includes(location))\n\n    if (claimableNfts.length > 0 && !matchesSomeLocations && !hasDisplayedModal.current) {\n      onPresentGiftModal()\n      hasDisplayedModal.current = true\n    }\n  }, [pathname, excludeLocations, hasDisplayedModal, onPresentGiftModal, claimableNfts])\n\n  // Reset the check flag when account changes\n  useEffect(() => {\n    hasDisplayedModal.current = false\n  }, [account, hasDisplayedModal])\n\n  return null\n}\n\nexport default GlobalCheckClaimStatus\n"]},"metadata":{},"sourceType":"module"}