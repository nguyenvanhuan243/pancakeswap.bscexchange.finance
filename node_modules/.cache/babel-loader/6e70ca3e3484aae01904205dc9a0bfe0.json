{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenvanhuan243/Documents/pancake-frontend/src/views/Home/components/FarmsPoolsRow/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Flex, Box, SwapVertIcon, IconButton } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport useIntersectionObserver from 'hooks/useIntersectionObserver';\nimport useGetTopFarmsByApr from 'views/Home/hooks/useGetTopFarmsByApr';\nimport useGetTopPoolsByApr from 'views/Home/hooks/useGetTopPoolsByApr';\nimport TopFarmPool from './TopFarmPool';\nimport RowHeading from './RowHeading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, auto);\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    grid-gap: 16px;\n    grid-template-columns: repeat(5, auto);\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    grid-gap: 32px;\n  }\n`;\n_c = Grid;\n\nconst FarmsPoolsRow = () => {\n  _s();\n\n  const [showFarms, setShowFarms] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const {\n    observerRef,\n    isIntersecting\n  } = useIntersectionObserver();\n  const {\n    topFarms\n  } = useGetTopFarmsByApr(isIntersecting);\n  const {\n    topPools\n  } = useGetTopPoolsByApr(isIntersecting);\n  const timer = useRef(null);\n  const isLoaded = topFarms[0] && topPools[0];\n  const startTimer = useCallback(() => {\n    timer.current = setInterval(() => {\n      setShowFarms(prev => !prev);\n    }, 6000);\n  }, [timer]);\n  useEffect(() => {\n    if (isLoaded) {\n      startTimer();\n    }\n\n    return () => {\n      clearInterval(timer.current);\n    };\n  }, [timer, isLoaded, startTimer]);\n\n  const getPoolText = pool => {\n    if (pool.isAutoVault) {\n      return t('Auto CAKE');\n    }\n\n    if (pool.sousId === 0) {\n      return t('Manual CAKE');\n    }\n\n    return t('Stake %stakingSymbol% - Earn %earningSymbol%', {\n      earningSymbol: pool.earningToken.symbol,\n      stakingSymbol: pool.stakingToken.symbol\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: observerRef,\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      mt: \"24px\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        mb: \"24px\",\n        children: [/*#__PURE__*/_jsxDEV(RowHeading, {\n          text: showFarms ? t('Top Farms') : t('Top Syrup Pools')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          variant: \"text\",\n          height: \"100%\",\n          width: \"auto\",\n          onClick: () => {\n            setShowFarms(prev => !prev);\n            clearInterval(timer.current);\n            startTimer();\n          },\n          children: /*#__PURE__*/_jsxDEV(SwapVertIcon, {\n            height: \"24px\",\n            width: \"24px\",\n            color: \"textSubtle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        height: ['240px', null, '80px'],\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          children: topFarms.map((topFarm, index) => /*#__PURE__*/_jsxDEV(TopFarmPool // eslint-disable-next-line react/no-array-index-key\n          , {\n            title: topFarm === null || topFarm === void 0 ? void 0 : topFarm.lpSymbol,\n            percentage: (topFarm === null || topFarm === void 0 ? void 0 : topFarm.apr) + (topFarm === null || topFarm === void 0 ? void 0 : topFarm.lpRewardsApr),\n            index: index,\n            visible: showFarms\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          children: topPools.map((topPool, index) => /*#__PURE__*/_jsxDEV(TopFarmPool // eslint-disable-next-line react/no-array-index-key\n          , {\n            title: topPool && getPoolText(topPool),\n            percentage: topPool === null || topPool === void 0 ? void 0 : topPool.apr,\n            index: index,\n            visible: !showFarms\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FarmsPoolsRow, \"3Qv6Hz+TA+bpu6BwVgdT1n5pJwA=\", false, function () {\n  return [useTranslation, useIntersectionObserver, useGetTopFarmsByApr, useGetTopPoolsByApr];\n});\n\n_c2 = FarmsPoolsRow;\nexport default FarmsPoolsRow;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"FarmsPoolsRow\");","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/views/Home/components/FarmsPoolsRow/index.tsx"],"names":["React","useState","useEffect","useRef","useCallback","styled","Flex","Box","SwapVertIcon","IconButton","useTranslation","useIntersectionObserver","useGetTopFarmsByApr","useGetTopPoolsByApr","TopFarmPool","RowHeading","Grid","div","theme","mediaQueries","sm","md","FarmsPoolsRow","showFarms","setShowFarms","t","observerRef","isIntersecting","topFarms","topPools","timer","isLoaded","startTimer","current","setInterval","prev","clearInterval","getPoolText","pool","isAutoVault","sousId","earningSymbol","earningToken","symbol","stakingSymbol","stakingToken","map","topFarm","index","lpSymbol","apr","lpRewardsApr","topPool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, SwapVertIcon, IconButton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport useGetTopFarmsByApr from 'views/Home/hooks/useGetTopFarmsByApr'\nimport useGetTopPoolsByApr from 'views/Home/hooks/useGetTopPoolsByApr'\nimport TopFarmPool from './TopFarmPool'\nimport RowHeading from './RowHeading'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, auto);\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-gap: 16px;\n    grid-template-columns: repeat(5, auto);\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-gap: 32px;\n  }\n`\n\nconst FarmsPoolsRow = () => {\n  const [showFarms, setShowFarms] = useState(false)\n  const { t } = useTranslation()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const { topFarms } = useGetTopFarmsByApr(isIntersecting)\n  const { topPools } = useGetTopPoolsByApr(isIntersecting)\n\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const isLoaded = topFarms[0] && topPools[0]\n\n  const startTimer = useCallback(() => {\n    timer.current = setInterval(() => {\n      setShowFarms((prev) => !prev)\n    }, 6000)\n  }, [timer])\n\n  useEffect(() => {\n    if (isLoaded) {\n      startTimer()\n    }\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [timer, isLoaded, startTimer])\n\n  const getPoolText = (pool: Pool) => {\n    if (pool.isAutoVault) {\n      return t('Auto CAKE')\n    }\n\n    if (pool.sousId === 0) {\n      return t('Manual CAKE')\n    }\n\n    return t('Stake %stakingSymbol% - Earn %earningSymbol%', {\n      earningSymbol: pool.earningToken.symbol,\n      stakingSymbol: pool.stakingToken.symbol,\n    })\n  }\n\n  return (\n    <div ref={observerRef}>\n      <Flex flexDirection=\"column\" mt=\"24px\">\n        <Flex mb=\"24px\">\n          <RowHeading text={showFarms ? t('Top Farms') : t('Top Syrup Pools')} />\n          <IconButton\n            variant=\"text\"\n            height=\"100%\"\n            width=\"auto\"\n            onClick={() => {\n              setShowFarms((prev) => !prev)\n              clearInterval(timer.current)\n              startTimer()\n            }}\n          >\n            <SwapVertIcon height=\"24px\" width=\"24px\" color=\"textSubtle\" />\n          </IconButton>\n        </Flex>\n        <Box height={['240px', null, '80px']}>\n          <Grid>\n            {topFarms.map((topFarm, index) => (\n              <TopFarmPool\n                // eslint-disable-next-line react/no-array-index-key\n                key={index}\n                title={topFarm?.lpSymbol}\n                percentage={topFarm?.apr + topFarm?.lpRewardsApr}\n                index={index}\n                visible={showFarms}\n              />\n            ))}\n          </Grid>\n          <Grid>\n            {topPools.map((topPool, index) => (\n              <TopFarmPool\n                // eslint-disable-next-line react/no-array-index-key\n                key={index}\n                title={topPool && getPoolText(topPool)}\n                percentage={topPool?.apr}\n                index={index}\n                visible={!showFarms}\n              />\n            ))}\n          </Grid>\n        </Box>\n      </Flex>\n    </div>\n  )\n}\n\nexport default FarmsPoolsRow\n"]},"metadata":{},"sourceType":"module"}