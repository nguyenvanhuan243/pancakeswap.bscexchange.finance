{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React from'react';import{AutoRenewIcon,Button}from'@pancakeswap/uikit';import{PoolIds}from'config/constants/types';import{useTranslation}from'contexts/Localization';import useToast from'hooks/useToast';import{jsx as _jsx}from\"react/jsx-runtime\";var ClaimButton=function ClaimButton(_ref){var poolId=_ref.poolId,ifoVersion=_ref.ifoVersion,walletIfoData=_ref.walletIfoData;var userPoolCharacteristics=walletIfoData[poolId];var _useTranslation=useTranslation(),t=_useTranslation.t;var _useToast=useToast(),toastError=_useToast.toastError,toastSuccess=_useToast.toastSuccess;var setPendingTx=function setPendingTx(isPending){return walletIfoData.setPendingTx(isPending,poolId);};var handleClaim=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var tx,_tx;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setPendingTx(true);if(!(ifoVersion===1)){_context.next=10;break;}_context.next=5;return walletIfoData.contract.harvest();case 5:tx=_context.sent;_context.next=8;return tx.wait();case 8:_context.next=15;break;case 10:_context.next=12;return walletIfoData.contract.harvestPool(poolId===PoolIds.poolBasic?0:1);case 12:_tx=_context.sent;_context.next=15;return _tx.wait();case 15:walletIfoData.setIsClaimed(poolId);toastSuccess(t('Success!'),t('You have successfully claimed your rewards.'));_context.next=23;break;case 19:_context.prev=19;_context.t0=_context[\"catch\"](0);toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));console.error(_context.t0);case 23:_context.prev=23;setPendingTx(false);return _context.finish(23);case 26:case\"end\":return _context.stop();}}},_callee,null,[[0,19,23,26]]);}));return function handleClaim(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsx(Button,{onClick:handleClaim,disabled:userPoolCharacteristics.isPendingTx,width:\"100%\",isLoading:userPoolCharacteristics.isPendingTx,endIcon:userPoolCharacteristics.isPendingTx?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,children:t('Claim')});};export default ClaimButton;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx"],"names":["React","AutoRenewIcon","Button","PoolIds","useTranslation","useToast","ClaimButton","poolId","ifoVersion","walletIfoData","userPoolCharacteristics","t","toastError","toastSuccess","setPendingTx","isPending","handleClaim","contract","harvest","tx","wait","harvestPool","poolBasic","setIsClaimed","console","error","isPendingTx"],"mappings":"6UAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,aAAT,CAAwBC,MAAxB,KAAsC,oBAAtC,CACA,OAASC,OAAT,KAAwB,wBAAxB,CAEA,OAASC,cAAT,KAA+B,uBAA/B,CACA,MAAOC,CAAAA,QAAP,KAAqB,gBAArB,C,2CAQA,GAAMC,CAAAA,WAA4B,CAAG,QAA/BA,CAAAA,WAA+B,MAA2C,IAAxCC,CAAAA,MAAwC,MAAxCA,MAAwC,CAAhCC,UAAgC,MAAhCA,UAAgC,CAApBC,aAAoB,MAApBA,aAAoB,CAC9E,GAAMC,CAAAA,uBAAuB,CAAGD,aAAa,CAACF,MAAD,CAA7C,CACA,oBAAcH,cAAc,EAA5B,CAAQO,CAAR,iBAAQA,CAAR,CACA,cAAqCN,QAAQ,EAA7C,CAAQO,UAAR,WAAQA,UAAR,CAAoBC,YAApB,WAAoBA,YAApB,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,SAAD,QAAwBN,CAAAA,aAAa,CAACK,YAAd,CAA2BC,SAA3B,CAAsCR,MAAtC,CAAxB,EAArB,CAEA,GAAMS,CAAAA,WAAW,2FAAG,8JAEhBF,YAAY,CAAC,IAAD,CAAZ,CAFgB,KAIZN,UAAU,GAAK,CAJH,iDAKGC,CAAAA,aAAa,CAACQ,QAAd,CAAuBC,OAAvB,EALH,QAKRC,EALQ,qCAMRA,CAAAA,EAAE,CAACC,IAAH,EANQ,8DAQGX,CAAAA,aAAa,CAACQ,QAAd,CAAuBI,WAAvB,CAAmCd,MAAM,GAAKJ,OAAO,CAACmB,SAAnB,CAA+B,CAA/B,CAAmC,CAAtE,CARH,SAQRH,GARQ,sCASRA,CAAAA,GAAE,CAACC,IAAH,EATQ,SAYhBX,aAAa,CAACc,YAAd,CAA2BhB,MAA3B,EACAM,YAAY,CAACF,CAAC,CAAC,UAAD,CAAF,CAAgBA,CAAC,CAAC,6CAAD,CAAjB,CAAZ,CAbgB,iFAehBC,UAAU,CAACD,CAAC,CAAC,OAAD,CAAF,CAAaA,CAAC,CAAC,oFAAD,CAAd,CAAV,CACAa,OAAO,CAACC,KAAR,cAhBgB,yBAkBhBX,YAAY,CAAC,KAAD,CAAZ,CAlBgB,sGAAH,kBAAXE,CAAAA,WAAW,2CAAjB,CAsBA,mBACE,KAAC,MAAD,EACE,OAAO,CAAEA,WADX,CAEE,QAAQ,CAAEN,uBAAuB,CAACgB,WAFpC,CAGE,KAAK,CAAC,MAHR,CAIE,SAAS,CAAEhB,uBAAuB,CAACgB,WAJrC,CAKE,OAAO,CAAEhB,uBAAuB,CAACgB,WAAxB,cAAsC,KAAC,aAAD,EAAe,IAAI,KAAnB,CAAoB,KAAK,CAAC,cAA1B,EAAtC,CAAoF,IAL/F,UAOGf,CAAC,CAAC,OAAD,CAPJ,EADF,CAWD,CAxCD,CA0CA,cAAeL,CAAAA,WAAf","sourcesContent":["import React from 'react'\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit'\nimport { PoolIds } from 'config/constants/types'\nimport { WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\n\ninterface Props {\n  poolId: PoolIds\n  ifoVersion: number\n  walletIfoData: WalletIfoData\n}\n\nconst ClaimButton: React.FC<Props> = ({ poolId, ifoVersion, walletIfoData }) => {\n  const userPoolCharacteristics = walletIfoData[poolId]\n  const { t } = useTranslation()\n  const { toastError, toastSuccess } = useToast()\n\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\n\n  const handleClaim = async () => {\n    try {\n      setPendingTx(true)\n\n      if (ifoVersion === 1) {\n        const tx = await walletIfoData.contract.harvest()\n        await tx.wait()\n      } else {\n        const tx = await walletIfoData.contract.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1)\n        await tx.wait()\n      }\n\n      walletIfoData.setIsClaimed(poolId)\n      toastSuccess(t('Success!'), t('You have successfully claimed your rewards.'))\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(error)\n    } finally {\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleClaim}\n      disabled={userPoolCharacteristics.isPendingTx}\n      width=\"100%\"\n      isLoading={userPoolCharacteristics.isPendingTx}\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n    >\n      {t('Claim')}\n    </Button>\n  )\n}\n\nexport default ClaimButton\n"]},"metadata":{},"sourceType":"module"}