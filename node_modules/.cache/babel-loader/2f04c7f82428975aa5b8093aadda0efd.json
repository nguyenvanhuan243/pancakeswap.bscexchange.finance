{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3,_templateObject4;import React,{useState}from'react';import styled from'styled-components';import{ethers}from'ethers';import{useWeb3React}from'@web3-react/core';import{Button,Input,Modal,Text}from'@pancakeswap/uikit';import{getAddressByType}from'utils/collectibles';import{useTranslation}from'contexts/Localization';import useToast from'hooks/useToast';import{useERC721}from'hooks/useContract';import{useCallWithGasPrice}from'hooks/useCallWithGasPrice';import InfoRow from'./InfoRow';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Value=styled(Text)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  font-weight: 600;\\n\"])));var ModalContent=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  margin-bottom: 16px;\\n\"])));var Actions=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: repeat(2, 1fr);\\n  grid-gap: 8px;\\n\"])));var Label=styled.label(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  color: \",\";\\n  display: block;\\n  margin-bottom: 8px;\\n  margin-top: 24px;\\n\"])),function(_ref){var theme=_ref.theme;return theme.colors.text;});var TransferNftModal=function TransferNftModal(_ref2){var nft=_ref2.nft,tokenIds=_ref2.tokenIds,onSuccess=_ref2.onSuccess,onDismiss=_ref2.onDismiss;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setIsLoading=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),value=_useState4[0],setValue=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),error=_useState6[0],setError=_useState6[1];var _useTranslation=useTranslation(),t=_useTranslation.t;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var contract=useERC721(getAddressByType(nft.type));var _useToast=useToast(),toastSuccess=_useToast.toastSuccess;var _useCallWithGasPrice=useCallWithGasPrice(),callWithGasPrice=_useCallWithGasPrice.callWithGasPrice;var handleConfirm=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var isValidAddress,tx,receipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;isValidAddress=ethers.utils.isAddress(value);if(isValidAddress){_context.next=6;break;}setError(t('Please enter a valid wallet address'));_context.next=14;break;case 6:_context.next=8;return callWithGasPrice(contract,'transferFrom',[account,value,tokenIds[0]]);case 8:tx=_context.sent;setIsLoading(true);// TODO: Refactor to try/catch pattern so error state is properly handled\n_context.next=12;return tx.wait();case 12:receipt=_context.sent;if(receipt.status){onDismiss();onSuccess();toastSuccess(t('NFT successfully transferred!'));}else{setError(t('Unable to transfer NFT'));setIsLoading(false);}case 14:_context.next=19;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](0);console.error('Unable to transfer NFT:',_context.t0);case 19:case\"end\":return _context.stop();}}},_callee,null,[[0,16]]);}));return function handleConfirm(){return _ref3.apply(this,arguments);};}();var handleChange=function handleChange(evt){var inputValue=evt.target.value;setValue(inputValue);};return/*#__PURE__*/_jsxs(Modal,{title:t('Transfer NFT'),onDismiss:onDismiss,children:[/*#__PURE__*/_jsxs(ModalContent,{children:[error&&/*#__PURE__*/_jsx(Text,{color:\"failure\",mb:\"8px\",children:error}),/*#__PURE__*/_jsxs(InfoRow,{children:[/*#__PURE__*/_jsxs(Text,{children:[t('Transferring'),\":\"]}),/*#__PURE__*/_jsx(Value,{children:t('1x %nftName% NFT',{nftName:nft.name})})]}),/*#__PURE__*/_jsxs(Label,{htmlFor:\"transferAddress\",children:[t('Receiving address'),\":\"]}),/*#__PURE__*/_jsx(Input,{id:\"transferAddress\",name:\"address\",type:\"text\",placeholder:t('Paste address'),value:value,onChange:handleChange,isWarning:error,disabled:isLoading})]}),/*#__PURE__*/_jsxs(Actions,{children:[/*#__PURE__*/_jsx(Button,{width:\"100%\",variant:\"secondary\",onClick:onDismiss,children:t('Cancel')}),/*#__PURE__*/_jsx(Button,{width:\"100%\",onClick:handleConfirm,disabled:!account||isLoading||!value,children:t('Confirm')})]})]});};export default TransferNftModal;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/views/Collectibles/components/TransferNftModal.tsx"],"names":["React","useState","styled","ethers","useWeb3React","Button","Input","Modal","Text","getAddressByType","useTranslation","useToast","useERC721","useCallWithGasPrice","InfoRow","Value","ModalContent","div","Actions","Label","label","theme","colors","text","TransferNftModal","nft","tokenIds","onSuccess","onDismiss","isLoading","setIsLoading","value","setValue","error","setError","t","account","contract","type","toastSuccess","callWithGasPrice","handleConfirm","isValidAddress","utils","isAddress","tx","wait","receipt","status","console","handleChange","evt","inputValue","target","nftName","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Input, Modal, Text } from '@pancakeswap/uikit'\nimport { getAddressByType } from 'utils/collectibles'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC721 } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const contract = useERC721(getAddressByType(nft.type))\n  const { toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = ethers.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(t('Please enter a valid wallet address'))\n      } else {\n        const tx = await callWithGasPrice(contract, 'transferFrom', [account, value, tokenIds[0]])\n        setIsLoading(true)\n        // TODO: Refactor to try/catch pattern so error state is properly handled\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          onDismiss()\n          onSuccess()\n          toastSuccess(t('NFT successfully transferred!'))\n        } else {\n          setError(t('Unable to transfer NFT'))\n          setIsLoading(false)\n        }\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={t('Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{t('Transferring')}:</Text>\n          <Value>{t('1x %nftName% NFT', { nftName: nft.name })}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{t('Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={t('Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n"]},"metadata":{},"sourceType":"module"}