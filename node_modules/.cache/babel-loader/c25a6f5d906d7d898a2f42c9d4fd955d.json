{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/nguyenvanhuan243/Documents/apphocvienstock/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React,{useState}from'react';import{Box,ChevronDownIcon,ChevronUpIcon,Flex,IconButton,PlayCircleOutlineIcon,Text,WaitIcon}from'@pancakeswap/uikit';import{useWeb3React}from'@web3-react/core';import styled from'styled-components';import{useAppDispatch}from'state';import{PredictionStatus}from'state/types';import{REWARD_RATE}from'state/predictions/config';import{useGetCurrentEpoch,useGetPredictionsStatus}from'state/predictions/hooks';import{fetchLedgerData,markBetHistoryAsCollected}from'state/predictions';import{getRoundResult,Result}from'state/predictions/helpers';import{useTranslation}from'contexts/Localization';import{formatBnb,getNetPayout}from'./helpers';import CollectWinningsButton from'../CollectWinningsButton';import ReclaimPositionButton from'../ReclaimPositionButton';import BetDetails from'./BetDetails';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var StyledBet=styled(Flex).attrs({alignItems:'center',p:'16px'})(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  background-color: \",\";\\n  border-bottom: 2px solid \",\";\\n  cursor: pointer;\\n\"])),function(_ref){var theme=_ref.theme;return theme.card.background;},function(_ref2){var theme=_ref2.theme;return theme.colors.cardBorder;});var YourResult=styled(Box)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  flex: 1;\\n\"])));var HistoricalBet=function HistoricalBet(_ref3){var bet=_ref3.bet;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isOpen=_useState2[0],setIsOpen=_useState2[1];var amount=bet.amount,round=bet.round;var _useTranslation=useTranslation(),t=_useTranslation.t;var currentEpoch=useGetCurrentEpoch();var status=useGetPredictionsStatus();var dispatch=useAppDispatch();var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var toggleOpen=function toggleOpen(){return setIsOpen(!isOpen);};var getRoundColor=function getRoundColor(result){switch(result){case Result.WIN:return'success';case Result.LOSE:return'failure';case Result.CANCELED:return'textDisabled';default:return'text';}};var getRoundPrefix=function getRoundPrefix(result){if(result===Result.LOSE){return'-';}if(result===Result.WIN){return'+';}return'';};var roundResult=getRoundResult(bet,currentEpoch);var resultTextColor=getRoundColor(roundResult);var resultTextPrefix=getRoundPrefix(roundResult);var isOpenRound=round.epoch===currentEpoch;var isLiveRound=status===PredictionStatus.LIVE&&round.epoch===currentEpoch-1;var canClaim=!bet.claimed&&bet.position===bet.round.position;// Winners get the payout, otherwise the claim what they put it if it was canceled\nvar payout=roundResult===Result.WIN?getNetPayout(bet,REWARD_RATE):amount;var renderBetLabel=function renderBetLabel(){if(isOpenRound){return/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",children:[/*#__PURE__*/_jsx(WaitIcon,{color:\"primary\",mr:\"6px\",width:\"24px\"}),/*#__PURE__*/_jsx(Text,{color:\"primary\",bold:true,children:t('Starting Soon')})]});}if(isLiveRound){return/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",children:[/*#__PURE__*/_jsx(PlayCircleOutlineIcon,{color:\"secondary\",mr:\"6px\",width:\"24px\"}),/*#__PURE__*/_jsx(Text,{color:\"secondary\",bold:true,children:t('Live Now')})]});}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"textSubtle\",children:t('Your Result')}),/*#__PURE__*/_jsx(Text,{bold:true,color:resultTextColor,lineHeight:1,children:roundResult===Result.CANCELED?t('Canceled'):\"\".concat(resultTextPrefix).concat(formatBnb(payout))})]});};var handleSuccess=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// We have to mark the bet as claimed immediately because it does not update fast enough\ndispatch(markBetHistoryAsCollected({account:account,betId:bet.id}));dispatch(fetchLedgerData({account:account,epochs:[bet.round.epoch]}));case 2:case\"end\":return _context.stop();}}},_callee);}));return function handleSuccess(){return _ref4.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(StyledBet,{onClick:toggleOpen,role:\"button\",children:[/*#__PURE__*/_jsx(Box,{width:\"48px\",children:/*#__PURE__*/_jsxs(Text,{textAlign:\"center\",children:[/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"textSubtle\",children:t('Round')}),/*#__PURE__*/_jsx(Text,{bold:true,lineHeight:1,children:round.epoch.toLocaleString()})]})}),/*#__PURE__*/_jsx(YourResult,{px:\"24px\",children:renderBetLabel()}),roundResult===Result.WIN&&canClaim&&/*#__PURE__*/_jsx(CollectWinningsButton,{hasClaimed:!canClaim,epoch:bet.round.epoch,payout:formatBnb(payout),onSuccess:handleSuccess,betAmount:bet.amount.toString(),scale:\"sm\",mr:\"8px\",children:t('Collect')}),roundResult===Result.CANCELED&&canClaim&&/*#__PURE__*/_jsx(ReclaimPositionButton,{epoch:bet.round.epoch,scale:\"sm\",mr:\"8px\",children:t('Reclaim')}),!isOpenRound&&!isLiveRound&&/*#__PURE__*/_jsx(IconButton,{variant:\"text\",scale:\"sm\",children:isOpen?/*#__PURE__*/_jsx(ChevronUpIcon,{}):/*#__PURE__*/_jsx(ChevronDownIcon,{})})]}),isOpen&&/*#__PURE__*/_jsx(BetDetails,{bet:bet,result:getRoundResult(bet,currentEpoch)})]});};export default HistoricalBet;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/apphocvienstock/src/views/Predictions/components/History/HistoricalBet.tsx"],"names":["React","useState","Box","ChevronDownIcon","ChevronUpIcon","Flex","IconButton","PlayCircleOutlineIcon","Text","WaitIcon","useWeb3React","styled","useAppDispatch","PredictionStatus","REWARD_RATE","useGetCurrentEpoch","useGetPredictionsStatus","fetchLedgerData","markBetHistoryAsCollected","getRoundResult","Result","useTranslation","formatBnb","getNetPayout","CollectWinningsButton","ReclaimPositionButton","BetDetails","StyledBet","attrs","alignItems","p","theme","card","background","colors","cardBorder","YourResult","HistoricalBet","bet","isOpen","setIsOpen","amount","round","t","currentEpoch","status","dispatch","account","toggleOpen","getRoundColor","result","WIN","LOSE","CANCELED","getRoundPrefix","roundResult","resultTextColor","resultTextPrefix","isOpenRound","epoch","isLiveRound","LIVE","canClaim","claimed","position","payout","renderBetLabel","handleSuccess","betId","id","epochs","toLocaleString","toString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { useGetCurrentEpoch, useGetPredictionsStatus } from 'state/predictions/hooks'\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = !bet.claimed && bet.position === bet.round.position\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, REWARD_RATE) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            epoch={bet.round.epoch}\n            payout={formatBnb(payout)}\n            onSuccess={handleSuccess}\n            betAmount={bet.amount.toString()}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n"]},"metadata":{},"sourceType":"module"}