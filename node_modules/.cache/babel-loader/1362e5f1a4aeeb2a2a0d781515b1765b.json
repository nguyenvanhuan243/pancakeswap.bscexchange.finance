{"ast":null,"code":"import _objectSpread from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"nft\"];import React,{useEffect,useState}from'react';import{useWeb3React}from'@web3-react/core';import{useProfile}from'state/profile/hooks';import{useEasterNftContract}from'hooks/useContract';import NftCard from'./index';/**\n * A map of NFT bunny Ids to Team ids\n * [identifier]: teamId\n */import{jsx as _jsx}from\"react/jsx-runtime\";export var teamNftMap={'easter-storm':1,'easter-flipper':2,'easter-caker':3};var EasterNftCard=function EasterNftCard(_ref){var nft=_ref.nft,props=_objectWithoutProperties(_ref,_excluded);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isClaimable=_useState2[0],setIsClaimable=_useState2[1];var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useProfile=useProfile(),profile=_useProfile.profile;var identifier=nft.identifier;var _ref2=profile!==null&&profile!==void 0?profile:{},team=_ref2.team;var easterNftContract=useEasterNftContract();var handleClaim=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return easterNftContract.mintNFT();case 2:response=_context.sent;_context.next=5;return response.wait();case 5:return _context.abrupt(\"return\",response);case 6:case\"end\":return _context.stop();}}},_callee);}));return function handleClaim(){return _ref3.apply(this,arguments);};}();useEffect(function(){var fetchClaimStatus=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var canClaim;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return easterNftContract.canClaim(account);case 2:canClaim=_context2.sent;// Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\nsetIsClaimable(canClaim?team.id===teamNftMap[identifier]:false);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchClaimStatus(){return _ref4.apply(this,arguments);};}();if(account&&team){fetchClaimStatus();}},[account,identifier,team,easterNftContract,setIsClaimable]);return/*#__PURE__*/_jsx(NftCard,_objectSpread(_objectSpread({nft:nft},props),{},{canClaim:isClaimable,onClaim:handleClaim}));};export default EasterNftCard;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/views/Collectibles/components/NftCard/EasterNftCard.tsx"],"names":["React","useEffect","useState","useWeb3React","useProfile","useEasterNftContract","NftCard","teamNftMap","EasterNftCard","nft","props","isClaimable","setIsClaimable","account","profile","identifier","team","easterNftContract","handleClaim","mintNFT","response","wait","fetchClaimStatus","canClaim","id"],"mappings":"m3BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,YAAT,KAA6B,kBAA7B,CAEA,OAASC,UAAT,KAA2B,qBAA3B,CACA,OAASC,oBAAT,KAAqC,mBAArC,CACA,MAAOC,CAAAA,OAAP,KAAsC,SAAtC,CAEA;AACA;AACA;AACA,G,2CACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,CACxB,eAAgB,CADQ,CAExB,iBAAkB,CAFM,CAGxB,eAAgB,CAHQ,CAAnB,CAMP,GAAMC,CAAAA,aAAqC,CAAG,QAAxCA,CAAAA,aAAwC,MAAuB,IAApBC,CAAAA,GAAoB,MAApBA,GAAoB,CAAZC,KAAY,0CACnE,cAAsCR,QAAQ,CAAC,KAAD,CAA9C,wCAAOS,WAAP,eAAoBC,cAApB,eACA,kBAAoBT,YAAY,EAAhC,CAAQU,OAAR,eAAQA,OAAR,CACA,gBAAoBT,UAAU,EAA9B,CAAQU,OAAR,aAAQA,OAAR,CACA,GAAQC,CAAAA,UAAR,CAAuBN,GAAvB,CAAQM,UAAR,CACA,UAAiBD,OAAjB,SAAiBA,OAAjB,UAAiBA,OAAjB,CAA4B,EAA5B,CAAQE,IAAR,OAAQA,IAAR,CACA,GAAMC,CAAAA,iBAAiB,CAAGZ,oBAAoB,EAA9C,CAEA,GAAMa,CAAAA,WAAW,2FAAG,sKAC2CD,CAAAA,iBAAiB,CAACE,OAAlB,EAD3C,QACZC,QADY,qCAEZA,CAAAA,QAAQ,CAACC,IAAT,EAFY,wCAGXD,QAHW,wDAAH,kBAAXF,CAAAA,WAAW,2CAAjB,CAMAjB,SAAS,CAAC,UAAM,CACd,GAAMqB,CAAAA,gBAAgB,2FAAG,4KACAL,CAAAA,iBAAiB,CAACM,QAAlB,CAA2BV,OAA3B,CADA,QACjBU,QADiB,gBAGvB;AACAX,cAAc,CAACW,QAAQ,CAAGP,IAAI,CAACQ,EAAL,GAAYjB,UAAU,CAACQ,UAAD,CAAzB,CAAwC,KAAjD,CAAd,CAJuB,wDAAH,kBAAhBO,CAAAA,gBAAgB,2CAAtB,CAOA,GAAIT,OAAO,EAAIG,IAAf,CAAqB,CACnBM,gBAAgB,GACjB,CACF,CAXQ,CAWN,CAACT,OAAD,CAAUE,UAAV,CAAsBC,IAAtB,CAA4BC,iBAA5B,CAA+CL,cAA/C,CAXM,CAAT,CAaA,mBAAO,KAAC,OAAD,8BAAS,GAAG,CAAEH,GAAd,EAAuBC,KAAvB,MAA8B,QAAQ,CAAEC,WAAxC,CAAqD,OAAO,CAAEO,WAA9D,GAAP,CACD,CA5BD,CA8BA,cAAeV,CAAAA,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport { useProfile } from 'state/profile/hooks'\nimport { useEasterNftContract } from 'hooks/useContract'\nimport NftCard, { NftCardProps } from './index'\n\n/**\n * A map of NFT bunny Ids to Team ids\n * [identifier]: teamId\n */\nexport const teamNftMap = {\n  'easter-storm': 1,\n  'easter-flipper': 2,\n  'easter-caker': 3,\n}\n\nconst EasterNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const { profile } = useProfile()\n  const { identifier } = nft\n  const { team } = profile ?? {}\n  const easterNftContract = useEasterNftContract()\n\n  const handleClaim = async () => {\n    const response: ethers.providers.TransactionResponse = await easterNftContract.mintNFT()\n    await response.wait()\n    return response\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaim = await easterNftContract.canClaim(account)\n\n      // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false)\n    }\n\n    if (account && team) {\n      fetchClaimStatus()\n    }\n  }, [account, identifier, team, easterNftContract, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default EasterNftCard\n"]},"metadata":{},"sourceType":"module"}