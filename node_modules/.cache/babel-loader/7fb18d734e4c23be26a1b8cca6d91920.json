{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$();\n\nimport { ChainId, Pair, Token } from '@pancakeswap/sdk';\nimport flatMap from 'lodash/flatMap';\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BASES_TO_TRACK_LIQUIDITY_FOR, PINNED_PAIRS } from 'config/constants';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { useAllTokens } from 'hooks/Tokens';\nimport { addSerializedPair, addSerializedToken, FarmStakedOnly, muteAudio, removeSerializedToken, toggleTheme as toggleThemeAction, unmuteAudio, updateUserDeadline, updateUserExpertMode, updateUserFarmStakedOnly, updateUserSingleHopOnly, updateUserSlippageTolerance, updateGasPrice } from '../actions';\nimport { deserializeToken, GAS_PRICE_GWEI, serializeToken } from './helpers';\nexport function useAudioModeManager() {\n  _s();\n\n  const dispatch = useDispatch();\n  const audioPlay = useSelector(state => state.user.audioPlay);\n  const toggleSetAudioMode = useCallback(() => {\n    if (audioPlay) {\n      dispatch(muteAudio());\n    } else {\n      dispatch(unmuteAudio());\n    }\n  }, [audioPlay, dispatch]);\n  return [audioPlay, toggleSetAudioMode];\n}\n\n_s(useAudioModeManager, \"peXMsI6wL8RFr9b05KQwkjrw8ic=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport function useIsExpertMode() {\n  _s2();\n\n  return useSelector(state => state.user.userExpertMode);\n}\n\n_s2(useIsExpertMode, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useExpertModeManager() {\n  _s3();\n\n  const dispatch = useDispatch();\n  const expertMode = useIsExpertMode();\n  const toggleSetExpertMode = useCallback(() => {\n    dispatch(updateUserExpertMode({\n      userExpertMode: !expertMode\n    }));\n  }, [expertMode, dispatch]);\n  return [expertMode, toggleSetExpertMode];\n}\n\n_s3(useExpertModeManager, \"ULLfsmjCcahFerd6rXziokiA+RI=\", false, function () {\n  return [useDispatch, useIsExpertMode];\n});\n\nexport function useThemeManager() {\n  _s4();\n\n  const dispatch = useDispatch();\n  const isDark = useSelector(state => state.user.isDark);\n  const toggleTheme = useCallback(() => {\n    dispatch(toggleThemeAction());\n  }, [dispatch]);\n  return [isDark, toggleTheme];\n}\n\n_s4(useThemeManager, \"AWOtD8Q/eJSDV8zcP025U4j1vsM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport function useUserSingleHopOnly() {\n  _s5();\n\n  const dispatch = useDispatch();\n  const singleHopOnly = useSelector(state => state.user.userSingleHopOnly);\n  const setSingleHopOnly = useCallback(newSingleHopOnly => {\n    dispatch(updateUserSingleHopOnly({\n      userSingleHopOnly: newSingleHopOnly\n    }));\n  }, [dispatch]);\n  return [singleHopOnly, setSingleHopOnly];\n}\n\n_s5(useUserSingleHopOnly, \"WikX7qzoMFkBpAxkb0uK96O/O0E=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport function useUserSlippageTolerance() {\n  _s6();\n\n  const dispatch = useDispatch();\n  const userSlippageTolerance = useSelector(state => {\n    return state.user.userSlippageTolerance;\n  });\n  const setUserSlippageTolerance = useCallback(slippage => {\n    dispatch(updateUserSlippageTolerance({\n      userSlippageTolerance: slippage\n    }));\n  }, [dispatch]);\n  return [userSlippageTolerance, setUserSlippageTolerance];\n}\n\n_s6(useUserSlippageTolerance, \"lO9PfBe6MbiNxNv0Q3TS/IyxyIE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport function useUserFarmStakedOnly(isActive) {\n  _s7();\n\n  const dispatch = useDispatch();\n  const userFarmStakedOnly = useSelector(state => {\n    return state.user.userFarmStakedOnly;\n  });\n  const setUserFarmStakedOnly = useCallback(stakedOnly => {\n    const farmStakedOnly = stakedOnly ? FarmStakedOnly.TRUE : FarmStakedOnly.FALSE;\n    dispatch(updateUserFarmStakedOnly({\n      userFarmStakedOnly: farmStakedOnly\n    }));\n  }, [dispatch]);\n  return [userFarmStakedOnly === FarmStakedOnly.ON_FINISHED ? !isActive : userFarmStakedOnly === FarmStakedOnly.TRUE, setUserFarmStakedOnly];\n}\n\n_s7(useUserFarmStakedOnly, \"CGf9k54nR2d/KdNipqj07US3Y8Q=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport function useUserTransactionTTL() {\n  _s8();\n\n  const dispatch = useDispatch();\n  const userDeadline = useSelector(state => {\n    return state.user.userDeadline;\n  });\n  const setUserDeadline = useCallback(deadline => {\n    dispatch(updateUserDeadline({\n      userDeadline: deadline\n    }));\n  }, [dispatch]);\n  return [userDeadline, setUserDeadline];\n}\n\n_s8(useUserTransactionTTL, \"nR4EOlfoy/fKrJpN3ITukwrTqzM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport function useAddUserToken() {\n  _s9();\n\n  const dispatch = useDispatch();\n  return useCallback(token => {\n    dispatch(addSerializedToken({\n      serializedToken: serializeToken(token)\n    }));\n  }, [dispatch]);\n}\n\n_s9(useAddUserToken, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});\n\nexport function useRemoveUserAddedToken() {\n  _s10();\n\n  const dispatch = useDispatch();\n  return useCallback((chainId, address) => {\n    dispatch(removeSerializedToken({\n      chainId,\n      address\n    }));\n  }, [dispatch]);\n}\n\n_s10(useRemoveUserAddedToken, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});\n\nexport function useGasPrice() {\n  _s11();\n\n  const chainId = process.env.REACT_APP_CHAIN_ID;\n  const userGas = useSelector(state => state.user.gasPrice);\n  return chainId === ChainId.MAINNET.toString() ? userGas : GAS_PRICE_GWEI.testnet;\n}\n\n_s11(useGasPrice, \"5RYgmy4yW3q5JpihNz3fyUMiqZ8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useGasPriceManager() {\n  _s12();\n\n  const dispatch = useDispatch();\n  const userGasPrice = useGasPrice();\n  const setGasPrice = useCallback(gasPrice => {\n    dispatch(updateGasPrice({\n      gasPrice\n    }));\n  }, [dispatch]);\n  return [userGasPrice, setGasPrice];\n}\n\n_s12(useGasPriceManager, \"aOvZO/KfpUe9g3+x02jlnBsjMXA=\", false, function () {\n  return [useDispatch, useGasPrice];\n});\n\nfunction serializePair(pair) {\n  return {\n    token0: serializeToken(pair.token0),\n    token1: serializeToken(pair.token1)\n  };\n}\n\nexport function usePairAdder() {\n  _s13();\n\n  const dispatch = useDispatch();\n  return useCallback(pair => {\n    dispatch(addSerializedPair({\n      serializedPair: serializePair(pair)\n    }));\n  }, [dispatch]);\n}\n/**\n * Given two tokens return the liquidity token that represents its liquidity shares\n * @param tokenA one of the two tokens\n * @param tokenB the other token\n */\n\n_s13(usePairAdder, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});\n\nexport function toV2LiquidityToken([tokenA, tokenB]) {\n  return new Token(tokenA.chainId, Pair.getAddress(tokenA, tokenB), 18, 'Cake-LP', 'Pancake LPs');\n}\n/**\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\n */\n\nexport function useTrackedTokenPairs() {\n  _s14();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const tokens = useAllTokens(); // pinned pairs\n\n  const pinnedPairs = useMemo(() => {\n    var _PINNED_PAIRS$chainId;\n\n    return chainId ? (_PINNED_PAIRS$chainId = PINNED_PAIRS[chainId]) !== null && _PINNED_PAIRS$chainId !== void 0 ? _PINNED_PAIRS$chainId : [] : [];\n  }, [chainId]); // pairs for every token against every base\n\n  const generatedPairs = useMemo(() => chainId ? flatMap(Object.keys(tokens), tokenAddress => {\n    var _BASES_TO_TRACK_LIQUI;\n\n    const token = tokens[tokenAddress]; // for each token on the current chain,\n\n    return (// loop though all bases on the current chain\n      ((_BASES_TO_TRACK_LIQUI = BASES_TO_TRACK_LIQUIDITY_FOR[chainId]) !== null && _BASES_TO_TRACK_LIQUI !== void 0 ? _BASES_TO_TRACK_LIQUI : []).map(base => {\n        if (base.address === token.address) {\n          return null;\n        }\n\n        return [base, token];\n      }).filter(p => p !== null)\n    );\n  }) : [], [tokens, chainId]); // pairs saved by users\n\n  const savedSerializedPairs = useSelector(({\n    user: {\n      pairs\n    }\n  }) => pairs);\n  const userPairs = useMemo(() => {\n    if (!chainId || !savedSerializedPairs) return [];\n    const forChain = savedSerializedPairs[chainId];\n    if (!forChain) return [];\n    return Object.keys(forChain).map(pairId => {\n      return [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)];\n    });\n  }, [savedSerializedPairs, chainId]);\n  const combinedList = useMemo(() => userPairs.concat(generatedPairs).concat(pinnedPairs), [generatedPairs, pinnedPairs, userPairs]);\n  return useMemo(() => {\n    // dedupes pairs of tokens in the combined list\n    const keyed = combinedList.reduce((memo, [tokenA, tokenB]) => {\n      const sorted = tokenA.sortsBefore(tokenB);\n      const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`;\n      if (memo[key]) return memo;\n      memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA];\n      return memo;\n    }, {});\n    return Object.keys(keyed).map(key => keyed[key]);\n  }, [combinedList]);\n}\n\n_s14(useTrackedTokenPairs, \"oBOSU+ngm2b9bAOkfOtlhmAQB98=\", false, function () {\n  return [useActiveWeb3React, useAllTokens, useSelector];\n});","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/state/user/hooks/index.tsx"],"names":["ChainId","Pair","Token","flatMap","useCallback","useMemo","useDispatch","useSelector","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","useActiveWeb3React","useAllTokens","addSerializedPair","addSerializedToken","FarmStakedOnly","muteAudio","removeSerializedToken","toggleTheme","toggleThemeAction","unmuteAudio","updateUserDeadline","updateUserExpertMode","updateUserFarmStakedOnly","updateUserSingleHopOnly","updateUserSlippageTolerance","updateGasPrice","deserializeToken","GAS_PRICE_GWEI","serializeToken","useAudioModeManager","dispatch","audioPlay","state","user","toggleSetAudioMode","useIsExpertMode","userExpertMode","useExpertModeManager","expertMode","toggleSetExpertMode","useThemeManager","isDark","useUserSingleHopOnly","singleHopOnly","userSingleHopOnly","setSingleHopOnly","newSingleHopOnly","useUserSlippageTolerance","userSlippageTolerance","setUserSlippageTolerance","slippage","useUserFarmStakedOnly","isActive","userFarmStakedOnly","setUserFarmStakedOnly","stakedOnly","farmStakedOnly","TRUE","FALSE","ON_FINISHED","useUserTransactionTTL","userDeadline","setUserDeadline","deadline","useAddUserToken","token","serializedToken","useRemoveUserAddedToken","chainId","address","useGasPrice","process","env","REACT_APP_CHAIN_ID","userGas","gasPrice","MAINNET","toString","testnet","useGasPriceManager","userGasPrice","setGasPrice","serializePair","pair","token0","token1","usePairAdder","serializedPair","toV2LiquidityToken","tokenA","tokenB","getAddress","useTrackedTokenPairs","tokens","pinnedPairs","generatedPairs","Object","keys","tokenAddress","map","base","filter","p","savedSerializedPairs","pairs","userPairs","forChain","pairId","combinedList","concat","keyed","reduce","memo","sorted","sortsBefore","key"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,OAAT,EAAkBC,IAAlB,EAAwBC,KAAxB,QAAqC,kBAArC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,4BAAT,EAAuCC,YAAvC,QAA2D,kBAA3D;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AACA,SAASC,YAAT,QAA6B,cAA7B;AAEA,SACEC,iBADF,EAEEC,kBAFF,EAGEC,cAHF,EAIEC,SAJF,EAKEC,qBALF,EAOEC,WAAW,IAAIC,iBAPjB,EAQEC,WARF,EASEC,kBATF,EAUEC,oBAVF,EAWEC,wBAXF,EAYEC,uBAZF,EAaEC,2BAbF,EAcEC,cAdF,QAeO,YAfP;AAgBA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,cAA3C,QAAiE,WAAjE;AAEA,OAAO,SAASC,mBAAT,GAAsD;AAAA;;AAC3D,QAAMC,QAAQ,GAAGxB,WAAW,EAA5B;AACA,QAAMyB,SAAS,GAAGxB,WAAW,CAA2CyB,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,SAAhE,CAA7B;AAEA,QAAMG,kBAAkB,GAAG9B,WAAW,CAAC,MAAM;AAC3C,QAAI2B,SAAJ,EAAe;AACbD,MAAAA,QAAQ,CAACf,SAAS,EAAV,CAAR;AACD,KAFD,MAEO;AACLe,MAAAA,QAAQ,CAACX,WAAW,EAAZ,CAAR;AACD;AACF,GANqC,EAMnC,CAACY,SAAD,EAAYD,QAAZ,CANmC,CAAtC;AAQA,SAAO,CAACC,SAAD,EAAYG,kBAAZ,CAAP;AACD;;GAbeL,mB;UACGvB,W,EACCC,W;;;AAapB,OAAO,SAAS4B,eAAT,GAAoC;AAAA;;AACzC,SAAO5B,WAAW,CAAgDyB,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWG,cAArE,CAAlB;AACD;;IAFeD,e;UACP5B,W;;;AAGT,OAAO,SAAS8B,oBAAT,GAAuD;AAAA;;AAC5D,QAAMP,QAAQ,GAAGxB,WAAW,EAA5B;AACA,QAAMgC,UAAU,GAAGH,eAAe,EAAlC;AAEA,QAAMI,mBAAmB,GAAGnC,WAAW,CAAC,MAAM;AAC5C0B,IAAAA,QAAQ,CAACT,oBAAoB,CAAC;AAAEe,MAAAA,cAAc,EAAE,CAACE;AAAnB,KAAD,CAArB,CAAR;AACD,GAFsC,EAEpC,CAACA,UAAD,EAAaR,QAAb,CAFoC,CAAvC;AAIA,SAAO,CAACQ,UAAD,EAAaC,mBAAb,CAAP;AACD;;IATeF,oB;UACG/B,W,EACE6B,e;;;AASrB,OAAO,SAASK,eAAT,GAAkD;AAAA;;AACvD,QAAMV,QAAQ,GAAGxB,WAAW,EAA5B;AACA,QAAMmC,MAAM,GAAGlC,WAAW,CAAwCyB,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWQ,MAA7D,CAA1B;AAEA,QAAMxB,WAAW,GAAGb,WAAW,CAAC,MAAM;AACpC0B,IAAAA,QAAQ,CAACZ,iBAAiB,EAAlB,CAAR;AACD,GAF8B,EAE5B,CAACY,QAAD,CAF4B,CAA/B;AAIA,SAAO,CAACW,MAAD,EAASxB,WAAT,CAAP;AACD;;IATeuB,e;UACGlC,W,EACFC,W;;;AASjB,OAAO,SAASmC,oBAAT,GAAgF;AAAA;;AACrF,QAAMZ,QAAQ,GAAGxB,WAAW,EAA5B;AAEA,QAAMqC,aAAa,GAAGpC,WAAW,CAC9ByB,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWW,iBADS,CAAjC;AAIA,QAAMC,gBAAgB,GAAGzC,WAAW,CACjC0C,gBAAD,IAA+B;AAC7BhB,IAAAA,QAAQ,CAACP,uBAAuB,CAAC;AAAEqB,MAAAA,iBAAiB,EAAEE;AAArB,KAAD,CAAxB,CAAR;AACD,GAHiC,EAIlC,CAAChB,QAAD,CAJkC,CAApC;AAOA,SAAO,CAACa,aAAD,EAAgBE,gBAAhB,CAAP;AACD;;IAfeH,oB;UACGpC,W,EAEKC,W;;;AAcxB,OAAO,SAASwC,wBAAT,GAA0E;AAAA;;AAC/E,QAAMjB,QAAQ,GAAGxB,WAAW,EAA5B;AACA,QAAM0C,qBAAqB,GAAGzC,WAAW,CAAuDyB,KAAD,IAAW;AACxG,WAAOA,KAAK,CAACC,IAAN,CAAWe,qBAAlB;AACD,GAFwC,CAAzC;AAIA,QAAMC,wBAAwB,GAAG7C,WAAW,CACzC8C,QAAD,IAAsB;AACpBpB,IAAAA,QAAQ,CAACN,2BAA2B,CAAC;AAAEwB,MAAAA,qBAAqB,EAAEE;AAAzB,KAAD,CAA5B,CAAR;AACD,GAHyC,EAI1C,CAACpB,QAAD,CAJ0C,CAA5C;AAOA,SAAO,CAACkB,qBAAD,EAAwBC,wBAAxB,CAAP;AACD;;IAdeF,wB;UACGzC,W,EACaC,W;;;AAchC,OAAO,SAAS4C,qBAAT,CAA+BC,QAA/B,EAA4F;AAAA;;AACjG,QAAMtB,QAAQ,GAAGxB,WAAW,EAA5B;AACA,QAAM+C,kBAAkB,GAAG9C,WAAW,CAAoDyB,KAAD,IAAW;AAClG,WAAOA,KAAK,CAACC,IAAN,CAAWoB,kBAAlB;AACD,GAFqC,CAAtC;AAIA,QAAMC,qBAAqB,GAAGlD,WAAW,CACtCmD,UAAD,IAAyB;AACvB,UAAMC,cAAc,GAAGD,UAAU,GAAGzC,cAAc,CAAC2C,IAAlB,GAAyB3C,cAAc,CAAC4C,KAAzE;AACA5B,IAAAA,QAAQ,CAACR,wBAAwB,CAAC;AAAE+B,MAAAA,kBAAkB,EAAEG;AAAtB,KAAD,CAAzB,CAAR;AACD,GAJsC,EAKvC,CAAC1B,QAAD,CALuC,CAAzC;AAQA,SAAO,CACLuB,kBAAkB,KAAKvC,cAAc,CAAC6C,WAAtC,GAAoD,CAACP,QAArD,GAAgEC,kBAAkB,KAAKvC,cAAc,CAAC2C,IADjG,EAELH,qBAFK,CAAP;AAID;;IAlBeH,qB;UACG7C,W,EACUC,W;;;AAkB7B,OAAO,SAASqD,qBAAT,GAAuE;AAAA;;AAC5E,QAAM9B,QAAQ,GAAGxB,WAAW,EAA5B;AACA,QAAMuD,YAAY,GAAGtD,WAAW,CAA8CyB,KAAD,IAAW;AACtF,WAAOA,KAAK,CAACC,IAAN,CAAW4B,YAAlB;AACD,GAF+B,CAAhC;AAIA,QAAMC,eAAe,GAAG1D,WAAW,CAChC2D,QAAD,IAAsB;AACpBjC,IAAAA,QAAQ,CAACV,kBAAkB,CAAC;AAAEyC,MAAAA,YAAY,EAAEE;AAAhB,KAAD,CAAnB,CAAR;AACD,GAHgC,EAIjC,CAACjC,QAAD,CAJiC,CAAnC;AAOA,SAAO,CAAC+B,YAAD,EAAeC,eAAf,CAAP;AACD;;IAdeF,qB;UACGtD,W,EACIC,W;;;AAcvB,OAAO,SAASyD,eAAT,GAAmD;AAAA;;AACxD,QAAMlC,QAAQ,GAAGxB,WAAW,EAA5B;AACA,SAAOF,WAAW,CACf6D,KAAD,IAAkB;AAChBnC,IAAAA,QAAQ,CAACjB,kBAAkB,CAAC;AAAEqD,MAAAA,eAAe,EAAEtC,cAAc,CAACqC,KAAD;AAAjC,KAAD,CAAnB,CAAR;AACD,GAHe,EAIhB,CAACnC,QAAD,CAJgB,CAAlB;AAMD;;IARekC,e;UACG1D,W;;;AASnB,OAAO,SAAS6D,uBAAT,GAA+E;AAAA;;AACpF,QAAMrC,QAAQ,GAAGxB,WAAW,EAA5B;AACA,SAAOF,WAAW,CAChB,CAACgE,OAAD,EAAkBC,OAAlB,KAAsC;AACpCvC,IAAAA,QAAQ,CAACd,qBAAqB,CAAC;AAAEoD,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAD,CAAtB,CAAR;AACD,GAHe,EAIhB,CAACvC,QAAD,CAJgB,CAAlB;AAMD;;KAReqC,uB;UACG7D,W;;;AASnB,OAAO,SAASgE,WAAT,GAA+B;AAAA;;AACpC,QAAMF,OAAO,GAAGG,OAAO,CAACC,GAAR,CAAYC,kBAA5B;AACA,QAAMC,OAAO,GAAGnE,WAAW,CAA0CyB,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAW0C,QAA/D,CAA3B;AACA,SAAOP,OAAO,KAAKpE,OAAO,CAAC4E,OAAR,CAAgBC,QAAhB,EAAZ,GAAyCH,OAAzC,GAAmD/C,cAAc,CAACmD,OAAzE;AACD;;KAJeR,W;UAEE/D,W;;;AAIlB,OAAO,SAASwE,kBAAT,GAAwE;AAAA;;AAC7E,QAAMjD,QAAQ,GAAGxB,WAAW,EAA5B;AACA,QAAM0E,YAAY,GAAGV,WAAW,EAAhC;AAEA,QAAMW,WAAW,GAAG7E,WAAW,CAC5BuE,QAAD,IAAsB;AACpB7C,IAAAA,QAAQ,CAACL,cAAc,CAAC;AAAEkD,MAAAA;AAAF,KAAD,CAAf,CAAR;AACD,GAH4B,EAI7B,CAAC7C,QAAD,CAJ6B,CAA/B;AAOA,SAAO,CAACkD,YAAD,EAAeC,WAAf,CAAP;AACD;;KAZeF,kB;UACGzE,W,EACIgE,W;;;AAYvB,SAASY,aAAT,CAAuBC,IAAvB,EAAmD;AACjD,SAAO;AACLC,IAAAA,MAAM,EAAExD,cAAc,CAACuD,IAAI,CAACC,MAAN,CADjB;AAELC,IAAAA,MAAM,EAAEzD,cAAc,CAACuD,IAAI,CAACE,MAAN;AAFjB,GAAP;AAID;;AAED,OAAO,SAASC,YAAT,GAA8C;AAAA;;AACnD,QAAMxD,QAAQ,GAAGxB,WAAW,EAA5B;AAEA,SAAOF,WAAW,CACf+E,IAAD,IAAgB;AACdrD,IAAAA,QAAQ,CAAClB,iBAAiB,CAAC;AAAE2E,MAAAA,cAAc,EAAEL,aAAa,CAACC,IAAD;AAA/B,KAAD,CAAlB,CAAR;AACD,GAHe,EAIhB,CAACrD,QAAD,CAJgB,CAAlB;AAMD;AAED;AACA;AACA;AACA;AACA;;KAfgBwD,Y;UACGhF,W;;;AAenB,OAAO,SAASkF,kBAAT,CAA4B,CAACC,MAAD,EAASC,MAAT,CAA5B,EAAqE;AAC1E,SAAO,IAAIxF,KAAJ,CAAUuF,MAAM,CAACrB,OAAjB,EAA0BnE,IAAI,CAAC0F,UAAL,CAAgBF,MAAhB,EAAwBC,MAAxB,CAA1B,EAA2D,EAA3D,EAA+D,SAA/D,EAA0E,aAA1E,CAAP;AACD;AAED;AACA;AACA;;AACA,OAAO,SAASE,oBAAT,GAAkD;AAAA;;AACvD,QAAM;AAAExB,IAAAA;AAAF,MAAc1D,kBAAkB,EAAtC;AACA,QAAMmF,MAAM,GAAGlF,YAAY,EAA3B,CAFuD,CAIvD;;AACA,QAAMmF,WAAW,GAAGzF,OAAO,CAAC;AAAA;;AAAA,WAAO+D,OAAO,4BAAG3D,YAAY,CAAC2D,OAAD,CAAf,yEAA4B,EAA5B,GAAiC,EAA/C;AAAA,GAAD,EAAqD,CAACA,OAAD,CAArD,CAA3B,CALuD,CAOvD;;AACA,QAAM2B,cAAgC,GAAG1F,OAAO,CAC9C,MACE+D,OAAO,GACHjE,OAAO,CAAC6F,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAD,EAAuBK,YAAD,IAAkB;AAAA;;AAC7C,UAAMjC,KAAK,GAAG4B,MAAM,CAACK,YAAD,CAApB,CAD6C,CAE7C;;AACA,WACE;AACA,gCAAC1F,4BAA4B,CAAC4D,OAAD,CAA7B,yEAA0C,EAA1C,EAEG+B,GAFH,CAEQC,IAAD,IAAU;AACb,YAAIA,IAAI,CAAC/B,OAAL,KAAiBJ,KAAK,CAACI,OAA3B,EAAoC;AAClC,iBAAO,IAAP;AACD;;AACD,eAAO,CAAC+B,IAAD,EAAOnC,KAAP,CAAP;AACD,OAPH,EAQGoC,MARH,CAQWC,CAAD,IAA4BA,CAAC,KAAK,IAR5C;AAFF;AAYD,GAfM,CADJ,GAiBH,EAnBwC,EAoB9C,CAACT,MAAD,EAASzB,OAAT,CApB8C,CAAhD,CARuD,CA+BvD;;AACA,QAAMmC,oBAAoB,GAAGhG,WAAW,CAAsC,CAAC;AAAE0B,IAAAA,IAAI,EAAE;AAAEuE,MAAAA;AAAF;AAAR,GAAD,KAAyBA,KAA/D,CAAxC;AAEA,QAAMC,SAA2B,GAAGpG,OAAO,CAAC,MAAM;AAChD,QAAI,CAAC+D,OAAD,IAAY,CAACmC,oBAAjB,EAAuC,OAAO,EAAP;AACvC,UAAMG,QAAQ,GAAGH,oBAAoB,CAACnC,OAAD,CAArC;AACA,QAAI,CAACsC,QAAL,EAAe,OAAO,EAAP;AAEf,WAAOV,MAAM,CAACC,IAAP,CAAYS,QAAZ,EAAsBP,GAAtB,CAA2BQ,MAAD,IAAY;AAC3C,aAAO,CAACjF,gBAAgB,CAACgF,QAAQ,CAACC,MAAD,CAAR,CAAiBvB,MAAlB,CAAjB,EAA4C1D,gBAAgB,CAACgF,QAAQ,CAACC,MAAD,CAAR,CAAiBtB,MAAlB,CAA5D,CAAP;AACD,KAFM,CAAP;AAGD,GAR0C,EAQxC,CAACkB,oBAAD,EAAuBnC,OAAvB,CARwC,CAA3C;AAUA,QAAMwC,YAAY,GAAGvG,OAAO,CAC1B,MAAMoG,SAAS,CAACI,MAAV,CAAiBd,cAAjB,EAAiCc,MAAjC,CAAwCf,WAAxC,CADoB,EAE1B,CAACC,cAAD,EAAiBD,WAAjB,EAA8BW,SAA9B,CAF0B,CAA5B;AAKA,SAAOpG,OAAO,CAAC,MAAM;AACnB;AACA,UAAMyG,KAAK,GAAGF,YAAY,CAACG,MAAb,CAAuD,CAACC,IAAD,EAAO,CAACvB,MAAD,EAASC,MAAT,CAAP,KAA4B;AAC/F,YAAMuB,MAAM,GAAGxB,MAAM,CAACyB,WAAP,CAAmBxB,MAAnB,CAAf;AACA,YAAMyB,GAAG,GAAGF,MAAM,GAAI,GAAExB,MAAM,CAACpB,OAAQ,IAAGqB,MAAM,CAACrB,OAAQ,EAAvC,GAA4C,GAAEqB,MAAM,CAACrB,OAAQ,IAAGoB,MAAM,CAACpB,OAAQ,EAAjG;AACA,UAAI2C,IAAI,CAACG,GAAD,CAAR,EAAe,OAAOH,IAAP;AACfA,MAAAA,IAAI,CAACG,GAAD,CAAJ,GAAYF,MAAM,GAAG,CAACxB,MAAD,EAASC,MAAT,CAAH,GAAsB,CAACA,MAAD,EAASD,MAAT,CAAxC;AACA,aAAOuB,IAAP;AACD,KANa,EAMX,EANW,CAAd;AAQA,WAAOhB,MAAM,CAACC,IAAP,CAAYa,KAAZ,EAAmBX,GAAnB,CAAwBgB,GAAD,IAASL,KAAK,CAACK,GAAD,CAArC,CAAP;AACD,GAXa,EAWX,CAACP,YAAD,CAXW,CAAd;AAYD;;KA7DehB,oB;UACMlF,kB,EACLC,Y,EA8BcJ,W","sourcesContent":["import { ChainId, Pair, Token } from '@pancakeswap/sdk'\nimport flatMap from 'lodash/flatMap'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { BASES_TO_TRACK_LIQUIDITY_FOR, PINNED_PAIRS } from 'config/constants'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useAllTokens } from 'hooks/Tokens'\nimport { AppDispatch, AppState } from '../../index'\nimport {\n  addSerializedPair,\n  addSerializedToken,\n  FarmStakedOnly,\n  muteAudio,\n  removeSerializedToken,\n  SerializedPair,\n  toggleTheme as toggleThemeAction,\n  unmuteAudio,\n  updateUserDeadline,\n  updateUserExpertMode,\n  updateUserFarmStakedOnly,\n  updateUserSingleHopOnly,\n  updateUserSlippageTolerance,\n  updateGasPrice,\n} from '../actions'\nimport { deserializeToken, GAS_PRICE_GWEI, serializeToken } from './helpers'\n\nexport function useAudioModeManager(): [boolean, () => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const audioPlay = useSelector<AppState, AppState['user']['audioPlay']>((state) => state.user.audioPlay)\n\n  const toggleSetAudioMode = useCallback(() => {\n    if (audioPlay) {\n      dispatch(muteAudio())\n    } else {\n      dispatch(unmuteAudio())\n    }\n  }, [audioPlay, dispatch])\n\n  return [audioPlay, toggleSetAudioMode]\n}\n\nexport function useIsExpertMode(): boolean {\n  return useSelector<AppState, AppState['user']['userExpertMode']>((state) => state.user.userExpertMode)\n}\n\nexport function useExpertModeManager(): [boolean, () => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const expertMode = useIsExpertMode()\n\n  const toggleSetExpertMode = useCallback(() => {\n    dispatch(updateUserExpertMode({ userExpertMode: !expertMode }))\n  }, [expertMode, dispatch])\n\n  return [expertMode, toggleSetExpertMode]\n}\n\nexport function useThemeManager(): [boolean, () => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const isDark = useSelector<AppState, AppState['user']['isDark']>((state) => state.user.isDark)\n\n  const toggleTheme = useCallback(() => {\n    dispatch(toggleThemeAction())\n  }, [dispatch])\n\n  return [isDark, toggleTheme]\n}\n\nexport function useUserSingleHopOnly(): [boolean, (newSingleHopOnly: boolean) => void] {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const singleHopOnly = useSelector<AppState, AppState['user']['userSingleHopOnly']>(\n    (state) => state.user.userSingleHopOnly,\n  )\n\n  const setSingleHopOnly = useCallback(\n    (newSingleHopOnly: boolean) => {\n      dispatch(updateUserSingleHopOnly({ userSingleHopOnly: newSingleHopOnly }))\n    },\n    [dispatch],\n  )\n\n  return [singleHopOnly, setSingleHopOnly]\n}\n\nexport function useUserSlippageTolerance(): [number, (slippage: number) => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const userSlippageTolerance = useSelector<AppState, AppState['user']['userSlippageTolerance']>((state) => {\n    return state.user.userSlippageTolerance\n  })\n\n  const setUserSlippageTolerance = useCallback(\n    (slippage: number) => {\n      dispatch(updateUserSlippageTolerance({ userSlippageTolerance: slippage }))\n    },\n    [dispatch],\n  )\n\n  return [userSlippageTolerance, setUserSlippageTolerance]\n}\n\nexport function useUserFarmStakedOnly(isActive: boolean): [boolean, (stakedOnly: boolean) => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const userFarmStakedOnly = useSelector<AppState, AppState['user']['userFarmStakedOnly']>((state) => {\n    return state.user.userFarmStakedOnly\n  })\n\n  const setUserFarmStakedOnly = useCallback(\n    (stakedOnly: boolean) => {\n      const farmStakedOnly = stakedOnly ? FarmStakedOnly.TRUE : FarmStakedOnly.FALSE\n      dispatch(updateUserFarmStakedOnly({ userFarmStakedOnly: farmStakedOnly }))\n    },\n    [dispatch],\n  )\n\n  return [\n    userFarmStakedOnly === FarmStakedOnly.ON_FINISHED ? !isActive : userFarmStakedOnly === FarmStakedOnly.TRUE,\n    setUserFarmStakedOnly,\n  ]\n}\n\nexport function useUserTransactionTTL(): [number, (slippage: number) => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const userDeadline = useSelector<AppState, AppState['user']['userDeadline']>((state) => {\n    return state.user.userDeadline\n  })\n\n  const setUserDeadline = useCallback(\n    (deadline: number) => {\n      dispatch(updateUserDeadline({ userDeadline: deadline }))\n    },\n    [dispatch],\n  )\n\n  return [userDeadline, setUserDeadline]\n}\n\nexport function useAddUserToken(): (token: Token) => void {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(\n    (token: Token) => {\n      dispatch(addSerializedToken({ serializedToken: serializeToken(token) }))\n    },\n    [dispatch],\n  )\n}\n\nexport function useRemoveUserAddedToken(): (chainId: number, address: string) => void {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(\n    (chainId: number, address: string) => {\n      dispatch(removeSerializedToken({ chainId, address }))\n    },\n    [dispatch],\n  )\n}\n\nexport function useGasPrice(): string {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const userGas = useSelector<AppState, AppState['user']['gasPrice']>((state) => state.user.gasPrice)\n  return chainId === ChainId.MAINNET.toString() ? userGas : GAS_PRICE_GWEI.testnet\n}\n\nexport function useGasPriceManager(): [string, (userGasPrice: string) => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const userGasPrice = useGasPrice()\n\n  const setGasPrice = useCallback(\n    (gasPrice: string) => {\n      dispatch(updateGasPrice({ gasPrice }))\n    },\n    [dispatch],\n  )\n\n  return [userGasPrice, setGasPrice]\n}\n\nfunction serializePair(pair: Pair): SerializedPair {\n  return {\n    token0: serializeToken(pair.token0),\n    token1: serializeToken(pair.token1),\n  }\n}\n\nexport function usePairAdder(): (pair: Pair) => void {\n  const dispatch = useDispatch<AppDispatch>()\n\n  return useCallback(\n    (pair: Pair) => {\n      dispatch(addSerializedPair({ serializedPair: serializePair(pair) }))\n    },\n    [dispatch],\n  )\n}\n\n/**\n * Given two tokens return the liquidity token that represents its liquidity shares\n * @param tokenA one of the two tokens\n * @param tokenB the other token\n */\nexport function toV2LiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\n  return new Token(tokenA.chainId, Pair.getAddress(tokenA, tokenB), 18, 'Cake-LP', 'Pancake LPs')\n}\n\n/**\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\n */\nexport function useTrackedTokenPairs(): [Token, Token][] {\n  const { chainId } = useActiveWeb3React()\n  const tokens = useAllTokens()\n\n  // pinned pairs\n  const pinnedPairs = useMemo(() => (chainId ? PINNED_PAIRS[chainId] ?? [] : []), [chainId])\n\n  // pairs for every token against every base\n  const generatedPairs: [Token, Token][] = useMemo(\n    () =>\n      chainId\n        ? flatMap(Object.keys(tokens), (tokenAddress) => {\n            const token = tokens[tokenAddress]\n            // for each token on the current chain,\n            return (\n              // loop though all bases on the current chain\n              (BASES_TO_TRACK_LIQUIDITY_FOR[chainId] ?? [])\n                // to construct pairs of the given token with each base\n                .map((base) => {\n                  if (base.address === token.address) {\n                    return null\n                  }\n                  return [base, token]\n                })\n                .filter((p): p is [Token, Token] => p !== null)\n            )\n          })\n        : [],\n    [tokens, chainId],\n  )\n\n  // pairs saved by users\n  const savedSerializedPairs = useSelector<AppState, AppState['user']['pairs']>(({ user: { pairs } }) => pairs)\n\n  const userPairs: [Token, Token][] = useMemo(() => {\n    if (!chainId || !savedSerializedPairs) return []\n    const forChain = savedSerializedPairs[chainId]\n    if (!forChain) return []\n\n    return Object.keys(forChain).map((pairId) => {\n      return [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)]\n    })\n  }, [savedSerializedPairs, chainId])\n\n  const combinedList = useMemo(\n    () => userPairs.concat(generatedPairs).concat(pinnedPairs),\n    [generatedPairs, pinnedPairs, userPairs],\n  )\n\n  return useMemo(() => {\n    // dedupes pairs of tokens in the combined list\n    const keyed = combinedList.reduce<{ [key: string]: [Token, Token] }>((memo, [tokenA, tokenB]) => {\n      const sorted = tokenA.sortsBefore(tokenB)\n      const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`\n      if (memo[key]) return memo\n      memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA]\n      return memo\n    }, {})\n\n    return Object.keys(keyed).map((key) => keyed[key])\n  }, [combinedList])\n}\n"]},"metadata":{},"sourceType":"module"}