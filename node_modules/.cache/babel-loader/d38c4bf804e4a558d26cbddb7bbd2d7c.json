{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$(),\n    _s16 = $RefreshSig$(),\n    _s17 = $RefreshSig$(),\n    _s18 = $RefreshSig$(),\n    _s19 = $RefreshSig$(),\n    _s20 = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ethers } from 'ethers';\nimport { minBy, orderBy } from 'lodash';\nimport { parseBigNumberObj } from './helpers';\nexport const useGetRounds = () => {\n  _s();\n\n  const rounds = useSelector(state => state.predictions.rounds);\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return { ...accum,\n      [epoch]: parseBigNumberObj(rounds[epoch])\n    };\n  }, {});\n};\n\n_s(useGetRounds, \"NzcuGjY7/e8ANpMudDUPNEr2P38=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetRound = epoch => {\n  _s2();\n\n  const round = useSelector(state => state.predictions.rounds[epoch]);\n  return parseBigNumberObj(round);\n};\n\n_s2(useGetRound, \"I9yr3H2jZEg2pVJJxnbwqUm8+Vg=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetSortedRounds = () => {\n  _s3();\n\n  const roundData = useGetRounds();\n  return orderBy(Object.values(roundData), ['epoch'], ['asc']);\n};\n\n_s3(useGetSortedRounds, \"jFCo8rqHdnklGdNQF/awTvojkG0=\", false, function () {\n  return [useGetRounds];\n});\n\nexport const useGetBetByEpoch = (account, epoch) => {\n  _s4();\n\n  const bets = useSelector(state => state.predictions.ledgers);\n\n  if (!bets[account]) {\n    return null;\n  }\n\n  if (!bets[account][epoch]) {\n    return null;\n  }\n\n  return parseBigNumberObj(bets[account][epoch]);\n};\n\n_s4(useGetBetByEpoch, \"l2hU2dIovtccD4bBSsew9DdDw24=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIsClaimable = epoch => {\n  _s5();\n\n  const claimableStatuses = useSelector(state => state.predictions.claimableStatuses);\n  return claimableStatuses[epoch] || false;\n};\n/**\n * Used to get the range of rounds to poll for\n */\n\n_s5(useGetIsClaimable, \"w8QNveyYtGfi9T0Sqff9LkqaoO0=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetEarliestEpoch = () => {\n  _s6();\n\n  return useSelector(state => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch');\n    return earliestRound === null || earliestRound === void 0 ? void 0 : earliestRound.epoch;\n  });\n};\n\n_s6(useGetEarliestEpoch, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useIsHistoryPaneOpen = () => {\n  _s7();\n\n  return useSelector(state => state.predictions.isHistoryPaneOpen);\n};\n\n_s7(useIsHistoryPaneOpen, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useIsChartPaneOpen = () => {\n  _s8();\n\n  return useSelector(state => state.predictions.isChartPaneOpen);\n};\n\n_s8(useIsChartPaneOpen, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCurrentEpoch = () => {\n  _s9();\n\n  return useSelector(state => state.predictions.currentEpoch);\n};\n\n_s9(useGetCurrentEpoch, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIntervalSeconds = () => {\n  _s10();\n\n  return useSelector(state => state.predictions.intervalSeconds);\n};\n\n_s10(useGetIntervalSeconds, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCurrentRound = () => {\n  _s11();\n\n  const currentEpoch = useGetCurrentEpoch();\n  const rounds = useGetRounds();\n  return rounds[currentEpoch];\n};\n\n_s11(useGetCurrentRound, \"B/HaigPTJ/QMLS+Z7HONCAaVukI=\", false, function () {\n  return [useGetCurrentEpoch, useGetRounds];\n});\n\nexport const useGetPredictionsStatus = () => {\n  _s12();\n\n  return useSelector(state => state.predictions.status);\n};\n\n_s12(useGetPredictionsStatus, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistoryFilter = () => {\n  _s13();\n\n  return useSelector(state => state.predictions.historyFilter);\n};\n\n_s13(useGetHistoryFilter, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetMinBetAmount = () => {\n  _s14();\n\n  const minBetAmount = useSelector(state => state.predictions.minBetAmount);\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount]);\n};\n\n_s14(useGetMinBetAmount, \"0dRfTS7F/4osBkgeEhhyeRmd26g=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetBufferSeconds = () => {\n  _s15();\n\n  return useSelector(state => state.predictions.bufferSeconds);\n};\n\n_s15(useGetBufferSeconds, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIsFetchingHistory = () => {\n  _s16();\n\n  return useSelector(state => state.predictions.isFetchingHistory);\n};\n\n_s16(useGetIsFetchingHistory, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistory = () => {\n  _s17();\n\n  return useSelector(state => state.predictions.history);\n};\n\n_s17(useGetHistory, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistoryByAccount = account => {\n  _s18();\n\n  const bets = useGetHistory();\n  return bets ? bets[account] : [];\n};\n\n_s18(useGetHistoryByAccount, \"Yrp7yExhLjDp2kAaHnofs1ZdL7U=\", false, function () {\n  return [useGetHistory];\n});\n\nexport const useGetLastOraclePrice = () => {\n  _s19();\n\n  const lastOraclePrice = useSelector(state => state.predictions.lastOraclePrice);\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice);\n  }, [lastOraclePrice]);\n};\n/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */\n\n_s19(useGetLastOraclePrice, \"sP8ZCewbYE0zHEHJigP6zSqhRXs=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCurrentRoundLockTimestamp = () => {\n  _s20();\n\n  const currentRound = useGetCurrentRound();\n  const intervalSeconds = useGetIntervalSeconds();\n\n  if (!currentRound.lockTimestamp) {\n    return currentRound.startTimestamp + intervalSeconds;\n  }\n\n  return currentRound.lockTimestamp;\n};\n\n_s20(useGetCurrentRoundLockTimestamp, \"Zqie2PjybblLRaJFTlB3fC70U+g=\", false, function () {\n  return [useGetCurrentRound, useGetIntervalSeconds];\n});","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/state/predictions/hooks.ts"],"names":["useMemo","useSelector","ethers","minBy","orderBy","parseBigNumberObj","useGetRounds","rounds","state","predictions","Object","keys","reduce","accum","epoch","useGetRound","round","useGetSortedRounds","roundData","values","useGetBetByEpoch","account","bets","ledgers","useGetIsClaimable","claimableStatuses","useGetEarliestEpoch","earliestRound","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalSeconds","intervalSeconds","useGetCurrentRound","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetMinBetAmount","minBetAmount","BigNumber","from","useGetBufferSeconds","bufferSeconds","useGetIsFetchingHistory","isFetchingHistory","useGetHistory","history","useGetHistoryByAccount","useGetLastOraclePrice","lastOraclePrice","useGetCurrentRoundLockTimestamp","currentRound","lockTimestamp","startTimestamp"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,QAA/B;AAEA,SAASC,iBAAT,QAAkC,WAAlC;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAMC,MAAM,GAAGN,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkBF,MAArC,CAA1B;AACA,SAAOG,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,MAApB,CAA2B,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClD,WAAO,EACL,GAAGD,KADE;AAEL,OAACC,KAAD,GAAST,iBAAiB,CAA4BE,MAAM,CAACO,KAAD,CAAlC;AAFrB,KAAP;AAID,GALM,EAKJ,EALI,CAAP;AAMD,CARM;;GAAMR,Y;UACIL,W;;;AASjB,OAAO,MAAMc,WAAW,GAAID,KAAD,IAAmB;AAAA;;AAC5C,QAAME,KAAK,GAAGf,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkBF,MAAlB,CAAyBO,KAAzB,CAAnB,CAAzB;AACA,SAAOT,iBAAiB,CAA4BW,KAA5B,CAAxB;AACD,CAHM;;IAAMD,W;UACGd,W;;;AAIhB,OAAO,MAAMgB,kBAAkB,GAAG,MAAM;AAAA;;AACtC,QAAMC,SAAS,GAAGZ,YAAY,EAA9B;AACA,SAAOF,OAAO,CAACM,MAAM,CAACS,MAAP,CAAcD,SAAd,CAAD,EAA2B,CAAC,OAAD,CAA3B,EAAsC,CAAC,KAAD,CAAtC,CAAd;AACD,CAHM;;IAAMD,kB;UACOX,Y;;;AAIpB,OAAO,MAAMc,gBAAgB,GAAG,CAACC,OAAD,EAAkBP,KAAlB,KAAoC;AAAA;;AAClE,QAAMQ,IAAI,GAAGrB,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkBc,OAArC,CAAxB;;AAEA,MAAI,CAACD,IAAI,CAACD,OAAD,CAAT,EAAoB;AAClB,WAAO,IAAP;AACD;;AAED,MAAI,CAACC,IAAI,CAACD,OAAD,CAAJ,CAAcP,KAAd,CAAL,EAA2B;AACzB,WAAO,IAAP;AACD;;AAED,SAAOT,iBAAiB,CAA8BiB,IAAI,CAACD,OAAD,CAAJ,CAAcP,KAAd,CAA9B,CAAxB;AACD,CAZM;;IAAMM,gB;UACEnB,W;;;AAaf,OAAO,MAAMuB,iBAAiB,GAAIV,KAAD,IAAW;AAAA;;AAC1C,QAAMW,iBAAiB,GAAGxB,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkBgB,iBAArC,CAArC;AACA,SAAOA,iBAAiB,CAACX,KAAD,CAAjB,IAA4B,KAAnC;AACD,CAHM;AAKP;AACA;AACA;;IAPaU,iB;UACevB,W;;;AAO5B,OAAO,MAAMyB,mBAAmB,GAAG,MAAM;AAAA;;AACvC,SAAOzB,WAAW,CAAEO,KAAD,IAAkB;AACnC,UAAMmB,aAAa,GAAGxB,KAAK,CAACO,MAAM,CAACS,MAAP,CAAcX,KAAK,CAACC,WAAN,CAAkBF,MAAhC,CAAD,EAA0C,OAA1C,CAA3B;AACA,WAAOoB,aAAP,aAAOA,aAAP,uBAAOA,aAAa,CAAEb,KAAtB;AACD,GAHiB,CAAlB;AAID,CALM;;IAAMY,mB;UACJzB,W;;;AAMT,OAAO,MAAM2B,oBAAoB,GAAG,MAAM;AAAA;;AACxC,SAAO3B,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkBoB,iBAArC,CAAlB;AACD,CAFM;;IAAMD,oB;UACJ3B,W;;;AAGT,OAAO,MAAM6B,kBAAkB,GAAG,MAAM;AAAA;;AACtC,SAAO7B,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkBsB,eAArC,CAAlB;AACD,CAFM;;IAAMD,kB;UACJ7B,W;;;AAGT,OAAO,MAAM+B,kBAAkB,GAAG,MAAM;AAAA;;AACtC,SAAO/B,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkBwB,YAArC,CAAlB;AACD,CAFM;;IAAMD,kB;UACJ/B,W;;;AAGT,OAAO,MAAMiC,qBAAqB,GAAG,MAAM;AAAA;;AACzC,SAAOjC,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkB0B,eAArC,CAAlB;AACD,CAFM;;KAAMD,qB;UACJjC,W;;;AAGT,OAAO,MAAMmC,kBAAkB,GAAG,MAAM;AAAA;;AACtC,QAAMH,YAAY,GAAGD,kBAAkB,EAAvC;AACA,QAAMzB,MAAM,GAAGD,YAAY,EAA3B;AACA,SAAOC,MAAM,CAAC0B,YAAD,CAAb;AACD,CAJM;;KAAMG,kB;UACUJ,kB,EACN1B,Y;;;AAIjB,OAAO,MAAM+B,uBAAuB,GAAG,MAAM;AAAA;;AAC3C,SAAOpC,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkB6B,MAArC,CAAlB;AACD,CAFM;;KAAMD,uB;UACJpC,W;;;AAGT,OAAO,MAAMsC,mBAAmB,GAAG,MAAM;AAAA;;AACvC,SAAOtC,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkB+B,aAArC,CAAlB;AACD,CAFM;;KAAMD,mB;UACJtC,W;;;AAGT,OAAO,MAAMwC,kBAAkB,GAAG,MAAM;AAAA;;AACtC,QAAMC,YAAY,GAAGzC,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkBiC,YAArC,CAAhC;AACA,SAAO1C,OAAO,CAAC,MAAME,MAAM,CAACyC,SAAP,CAAiBC,IAAjB,CAAsBF,YAAtB,CAAP,EAA4C,CAACA,YAAD,CAA5C,CAAd;AACD,CAHM;;KAAMD,kB;UACUxC,W;;;AAIvB,OAAO,MAAM4C,mBAAmB,GAAG,MAAM;AAAA;;AACvC,SAAO5C,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkBqC,aAArC,CAAlB;AACD,CAFM;;KAAMD,mB;UACJ5C,W;;;AAGT,OAAO,MAAM8C,uBAAuB,GAAG,MAAM;AAAA;;AAC3C,SAAO9C,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkBuC,iBAArC,CAAlB;AACD,CAFM;;KAAMD,uB;UACJ9C,W;;;AAGT,OAAO,MAAMgD,aAAa,GAAG,MAAM;AAAA;;AACjC,SAAOhD,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkByC,OAArC,CAAlB;AACD,CAFM;;KAAMD,a;UACJhD,W;;;AAGT,OAAO,MAAMkD,sBAAsB,GAAI9B,OAAD,IAAqB;AAAA;;AACzD,QAAMC,IAAI,GAAG2B,aAAa,EAA1B;AACA,SAAO3B,IAAI,GAAGA,IAAI,CAACD,OAAD,CAAP,GAAmB,EAA9B;AACD,CAHM;;KAAM8B,sB;UACEF,a;;;AAIf,OAAO,MAAMG,qBAAqB,GAAG,MAAM;AAAA;;AACzC,QAAMC,eAAe,GAAGpD,WAAW,CAAEO,KAAD,IAAkBA,KAAK,CAACC,WAAN,CAAkB4C,eAArC,CAAnC;AACA,SAAOrD,OAAO,CAAC,MAAM;AACnB,WAAOE,MAAM,CAACyC,SAAP,CAAiBC,IAAjB,CAAsBS,eAAtB,CAAP;AACD,GAFa,EAEX,CAACA,eAAD,CAFW,CAAd;AAGD,CALM;AAOP;AACA;AACA;;KATaD,qB;UACanD,W;;;AAS1B,OAAO,MAAMqD,+BAA+B,GAAG,MAAM;AAAA;;AACnD,QAAMC,YAAY,GAAGnB,kBAAkB,EAAvC;AACA,QAAMD,eAAe,GAAGD,qBAAqB,EAA7C;;AAEA,MAAI,CAACqB,YAAY,CAACC,aAAlB,EAAiC;AAC/B,WAAOD,YAAY,CAACE,cAAb,GAA8BtB,eAArC;AACD;;AAED,SAAOoB,YAAY,CAACC,aAApB;AACD,CATM;;KAAMF,+B;UACUlB,kB,EACGF,qB","sourcesContent":["import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\nimport { parseBigNumberObj } from './helpers'\n\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalSeconds = () => {\n  return useSelector((state: State) => state.predictions.intervalSeconds)\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetRounds()\n  return rounds[currentEpoch]\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetBufferSeconds = () => {\n  return useSelector((state: State) => state.predictions.bufferSeconds)\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets ? bets[account] : []\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */\nexport const useGetCurrentRoundLockTimestamp = () => {\n  const currentRound = useGetCurrentRound()\n  const intervalSeconds = useGetIntervalSeconds()\n\n  if (!currentRound.lockTimestamp) {\n    return currentRound.startTimestamp + intervalSeconds\n  }\n\n  return currentRound.lockTimestamp\n}\n"]},"metadata":{},"sourceType":"module"}