{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/nguyenvanhuan243/Documents/pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React,{useState}from'react';import styled from'styled-components';import{useWeb3React}from'@web3-react/core';import{Button,Modal,Text,Flex,AutoRenewIcon}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import useToast from'hooks/useToast';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var ModalContent=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  margin-bottom: 16px;\\n\"])));var Actions=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: repeat(2, 1fr);\\n  grid-gap: 8px;\\n\"])));var ClaimNftModal=function ClaimNftModal(_ref){var nft=_ref.nft,onSuccess=_ref.onSuccess,onClaim=_ref.onClaim,onDismiss=_ref.onDismiss;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isConfirming=_useState2[0],setIsConfirming=_useState2[1];var _useTranslation=useTranslation(),t=_useTranslation.t;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useToast=useToast(),toastError=_useToast.toastError,toastSuccess=_useToast.toastSuccess;var handleConfirm=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var tx,receipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setIsConfirming(true);_context.prev=1;_context.next=4;return onClaim();case 4:tx=_context.sent;_context.next=7;return tx.wait();case 7:receipt=_context.sent;if(receipt.status){toastSuccess(t('Successfully claimed!'));onDismiss();onSuccess();}_context.next=15;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](1);toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));setIsConfirming(false);case 15:case\"end\":return _context.stop();}}},_callee,null,[[1,11]]);}));return function handleConfirm(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(Modal,{title:t('Claim Collectible'),onDismiss:onDismiss,children:[/*#__PURE__*/_jsx(ModalContent,{children:/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",mb:\"8px\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsxs(Text,{children:[t('You will receive'),\":\"]}),/*#__PURE__*/_jsx(Text,{bold:true,children:t('1x %nftName% Collectible',{nftName:nft.name})})]})}),/*#__PURE__*/_jsxs(Actions,{children:[/*#__PURE__*/_jsx(Button,{width:\"100%\",variant:\"secondary\",onClick:onDismiss,children:t('Cancel')}),/*#__PURE__*/_jsx(Button,{width:\"100%\",onClick:handleConfirm,disabled:!account,isLoading:isConfirming,endIcon:isConfirming?/*#__PURE__*/_jsx(AutoRenewIcon,{color:\"currentColor\",spin:true}):null,children:t('Confirm')})]})]});};export default ClaimNftModal;","map":{"version":3,"sources":["/Users/nguyenvanhuan243/Documents/pancake-frontend/src/views/Collectibles/components/ClaimNftModal.tsx"],"names":["React","useState","styled","useWeb3React","Button","Modal","Text","Flex","AutoRenewIcon","useTranslation","useToast","ModalContent","div","Actions","ClaimNftModal","nft","onSuccess","onClaim","onDismiss","isConfirming","setIsConfirming","t","account","toastError","toastSuccess","handleConfirm","tx","wait","receipt","status","nftName","name"],"mappings":"stBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CAEA,OAASC,YAAT,KAA6B,kBAA7B,CACA,OAASC,MAAT,CAAqCC,KAArC,CAA4CC,IAA5C,CAAkDC,IAAlD,CAAwDC,aAAxD,KAA6E,oBAA7E,CAEA,OAASC,cAAT,KAA+B,uBAA/B,CACA,MAAOC,CAAAA,QAAP,KAAqB,gBAArB,C,wFAQA,GAAMC,CAAAA,YAAY,CAAGT,MAAM,CAACU,GAAV,2FAAlB,CAIA,GAAMC,CAAAA,OAAO,CAAGX,MAAM,CAACU,GAAV,mJAAb,CAMA,GAAME,CAAAA,aAA2C,CAAG,QAA9CA,CAAAA,aAA8C,MAA4C,IAAzCC,CAAAA,GAAyC,MAAzCA,GAAyC,CAApCC,SAAoC,MAApCA,SAAoC,CAAzBC,OAAyB,MAAzBA,OAAyB,CAAhBC,SAAgB,MAAhBA,SAAgB,CAC9F,cAAwCjB,QAAQ,CAAC,KAAD,CAAhD,wCAAOkB,YAAP,eAAqBC,eAArB,eACA,oBAAcX,cAAc,EAA5B,CAAQY,CAAR,iBAAQA,CAAR,CACA,kBAAoBlB,YAAY,EAAhC,CAAQmB,OAAR,eAAQA,OAAR,CACA,cAAqCZ,QAAQ,EAA7C,CAAQa,UAAR,WAAQA,UAAR,CAAoBC,YAApB,WAAoBA,YAApB,CAEA,GAAMC,CAAAA,aAAa,2FAAG,kJACpBL,eAAe,CAAC,IAAD,CAAf,CADoB,sCAGDH,CAAAA,OAAO,EAHN,QAGZS,EAHY,qCAIIA,CAAAA,EAAE,CAACC,IAAH,EAJJ,QAIZC,OAJY,eAKlB,GAAIA,OAAO,CAACC,MAAZ,CAAoB,CAClBL,YAAY,CAACH,CAAC,CAAC,uBAAD,CAAF,CAAZ,CACAH,SAAS,GACTF,SAAS,GACV,CATiB,iFAWlBO,UAAU,CAACF,CAAC,CAAC,OAAD,CAAF,CAAaA,CAAC,CAAC,oFAAD,CAAd,CAAV,CACAD,eAAe,CAAC,KAAD,CAAf,CAZkB,qEAAH,kBAAbK,CAAAA,aAAa,2CAAnB,CAgBA,mBACE,MAAC,KAAD,EAAO,KAAK,CAAEJ,CAAC,CAAC,mBAAD,CAAf,CAAsC,SAAS,CAAEH,SAAjD,wBACE,KAAC,YAAD,wBACE,MAAC,IAAD,EAAM,UAAU,CAAC,QAAjB,CAA0B,EAAE,CAAC,KAA7B,CAAmC,cAAc,CAAC,eAAlD,wBACE,MAAC,IAAD,YAAOG,CAAC,CAAC,kBAAD,CAAR,OADF,cAEE,KAAC,IAAD,EAAM,IAAI,KAAV,UAAYA,CAAC,CAAC,0BAAD,CAA6B,CAAES,OAAO,CAAEf,GAAG,CAACgB,IAAf,CAA7B,CAAb,EAFF,GADF,EADF,cAOE,MAAC,OAAD,yBACE,KAAC,MAAD,EAAQ,KAAK,CAAC,MAAd,CAAqB,OAAO,CAAC,WAA7B,CAAyC,OAAO,CAAEb,SAAlD,UACGG,CAAC,CAAC,QAAD,CADJ,EADF,cAIE,KAAC,MAAD,EACE,KAAK,CAAC,MADR,CAEE,OAAO,CAAEI,aAFX,CAGE,QAAQ,CAAE,CAACH,OAHb,CAIE,SAAS,CAAEH,YAJb,CAKE,OAAO,CAAEA,YAAY,cAAG,KAAC,aAAD,EAAe,KAAK,CAAC,cAArB,CAAoC,IAAI,KAAxC,EAAH,CAAiD,IALxE,UAOGE,CAAC,CAAC,SAAD,CAPJ,EAJF,GAPF,GADF,CAwBD,CA9CD,CAgDA,cAAeP,CAAAA,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\n\ninterface ClaimNftModalProps extends InjectedModalProps {\n  nft: Nft\n  onSuccess: () => void\n  onClaim: () => Promise<ethers.providers.TransactionResponse>\n}\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    setIsConfirming(true)\n    try {\n      const tx = await onClaim()\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        toastSuccess(t('Successfully claimed!'))\n        onDismiss()\n        onSuccess()\n      }\n    } catch {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsConfirming(false)\n    }\n  }\n\n  return (\n    <Modal title={t('Claim Collectible')} onDismiss={onDismiss}>\n      <ModalContent>\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\n          <Text>{t('You will receive')}:</Text>\n          <Text bold>{t('1x %nftName% Collectible', { nftName: nft.name })}</Text>\n        </Flex>\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          onClick={handleConfirm}\n          disabled={!account}\n          isLoading={isConfirming}\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n"]},"metadata":{},"sourceType":"module"}